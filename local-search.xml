<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>客户端开发-事件流</title>
    <link href="/article/6477/"/>
    <url>/article/6477/</url>
    
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>客户端开发中存在多个实例之间相互通讯的需求。一般这种需求是通过函数调用实现的。而在需要广播消息的场景中，往往需要一个实例向多个实例发送消息。当业务变得复杂时，通讯也变得难以维护。以我工作中实际遇到的问题举例。</p><h2 id="操作回退">操作回退</h2><h2 id="关键帧相关">关键帧相关</h2><h1 id="解决方案">解决方案</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MacOS中manim安装问题</title>
    <link href="/article/62c3/"/>
    <url>/article/62c3/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://manim.community"><strong>manim</strong></a>是社区维护版</li><li><a href="https://pypi.org/project/manimgl/#description"><strong>manimgl</strong></a>是3Blue1Brown使用的版本</li></ul><p>一般可以使用manim社区维护版。</p><p>在MacOS上安装manim时，除了按照官网上的描述操作外，也容易出现一些其他问题。</p><p>我遇到的：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pkg-config --print-errors --atleast-version 1.30.0 pangocairo<br></code></pre></td></tr></tbody></table></figure><p>会报错找不到<code>xproto</code>这个库。</p><p>解决方法：</p><ol type="1"><li>去 <a href="https://www.x.org/archive/individual/proto/">x.org/archive/individual/proto</a>下载源码；</li><li>生成配置文件<code>./configure --prefix=/usr/local/&lt;xxx&gt;</code></li><li>安装 <code>make install</code></li></ol><p>实际上除了<code>xproto</code>，还需要下载<code>renderproto</code>，<code>kbproto</code>和<code>xextproto</code>这几个库。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>杂谈</title>
    <link href="/article/bb5c/"/>
    <url>/article/bb5c/</url>
    
    <content type="html"><![CDATA[<p>献给活着的我，以及想要了解我的人。</p><span id="more"></span><p><strong>起因</strong></p><p>俗话说三十而立，四十不惑。趁着我还未到而立之年时，想通过杂谈的方式来像《人生的枷锁》中菲利普一样总结一些阶段性的人生感悟，兴趣使然。</p><p>我曾在很多时候对一些事物突发奇想，也许是通勤途中，也许是面对他人激烈情绪波动时，也许是在某些事情迫在眉睫的压迫下，一旦有了这些突然通透的想法，我都想让它在脑中不断翻滚，仔细玩味，试图找出这些想法与我已有的认知的关系，为这些看似充满哲理的想法打上仅属于我一人的标签。但是当我试图记录下来时，我总是脑中空白，无从落笔。为了突破表达的桎梏，我开始了此次杂谈的尝试。</p><p>首先是创造表达的条件，我会主动提出一些问题，并且围绕问题力求完整地铺陈自己的观点。</p><p>在过程中，我会不断精简用词用句，整理相似的言论，将这些杂谈变得不那么杂乱无章。</p><p>最后，未来的我或者非我一定会对部分言论有不同观点，甚至强烈反对，那我执着于将思想通过文字记录下来的原因也就达到了。</p><p>如果我连自己的想法都无法完整表达，使他人充分理解，那么我将不能保证自己不会成为他人意志的附庸。</p><p><strong>对世界的认知</strong></p><p>受限于目前的科技水平，我们至今无法确定是否有地外生命的存在。因此我将讨论的内容局限在这颗小小的蓝色行星上。</p><p>从地球的诞生到今天，经过了几十亿年，而人类文明也不过几千年，科技突飞猛进的阶段仅集中在近两三百年。如今部分个体因人类取得的若干成就欣喜若狂起来，但我们其实都清楚，人类几千年的核心生存动力一直没变：争夺生存资源和阶级斗争。</p><p>只要人类从事生产，必然需要生产资料，但是生存资源是有限的，因此因争夺生产资源导致的矛盾冲突贯彻了人类文明的历史；并且人类个体之间的生产力水平存在差距，这样的差距在生产初期会造成不同生产力水平的人分为不同类别，而当人类繁衍的方式从群婚到对偶制再到现在的个体制婚姻后，以血缘关系为基础的继承制被确立了下来，从此之后在某一代人由于生产力水平不同产生的分类被其后代继承，阶级从此出现。但事实上，每个生物对其诞生的环境没有选择权，当其认识到自己天生被阶级分类后，不得利的一方便试图反抗，而得利的一方为了巩固地位会想尽方法阻止这种反抗，具体形式包括但不限于建立国家政权将压迫合法化、通过宗教信仰将压迫神圣化、武力镇压以及转移斗争矛盾等。</p><p>由此得见，人类几千年都没有变化。就算科技发展的再令人兴奋，只要人类自身的问题没有被解决，总有一天由科技发展带来的生产力提升会再次将以上矛盾激化，到那时斗争的方式将会在现在的视角下更难以想象，最终的结果只有两种：争夺生产资源带来的战争和阶级斗争进行到了人类灭亡的最后一刻；或者人类通过自身或外力解决了这两大核心问题。对于后者而言，无非也就是两种可能性：人类解放了自身的生产力，也找到了无限化生存资源的方法；或者压迫阶级和被压迫阶级中有一方选择永远不再斗争。</p><p>由于目前的我并没有能力解决以上问题，所以不如将其搁置，去思考一些其他有意思的事物，比如我是如何认知世界的。</p><p>我作为一个自然人，与其他大部分动物一样，对世界认知的方式都是通过五感（视觉、听觉、嗅觉、味觉和触觉）收集世界的信息，交由大脑等神经中枢处理，再反馈给环境。由于我对生物领域并不了解，凭借个人朴素的直觉，视觉、听觉于触觉在我感知世界的过程中扮演了更重要的角色，而事实上，前两者与计算机科学也紧密连接在了一起，随着虚拟现实技术的不断发展，触觉模拟也逐渐成了一种研究方向。在此，我仅针对“视觉”部分详细展开，介绍我对自己领域——<strong>计算机图形学</strong>的看法。</p><p><strong>为什么选择计算机图形学</strong></p><p>前几天看见了亚里士多德的一句话：“哲学始于惊讶”。这句话本身就挺让我惊讶的，因为它让我回想起了面对初中数学课本上的对“体积”的定义的感受：“物体所占空间的大小叫做体积”。</p><p>这个定义在初中阶段没什么问题，但当时的我却怎么都想不通，什么叫做“所占空间的大小”，直到有一天我突然想到，空无一物的空间本身也许就是有大小的，在这空间内放入的物体，只是抢走了原来属于空旷空间的一部分资源，而这部分被抢走的资源的多少就是物体的体积。也许这样思考并不一定是符合应试要求的，但这确实让我体验到了“惊讶”的感觉。</p><p>而后来我就将这样的一个问题种到了脑子里，直到在导师的教诲下发了芽，问题是：“空无一物的空间本身的大小是多大，虽然直观感受上这种大小是无限的，但是二维空间的无限大和三维空间的无限大是一样大吗？”。</p><p>也许任何一名大四的数学系学生和对集合论有一些研究的计算机专业的学生都可以回答出上面这个问题，不过我还是想要用欣喜若狂形容在研一的理论辅导时听到导师谈到上述问题并给出严谨推理时的心情。我并没有当场表现出来，但是在以后的方向选题和课题交流过程中，我总是时不时提到这些。也许有精力的时候我会整理一下相关资料，用自己的话较为朴素和系统地回答关于空间大小的问题。</p><p>为了更好得描述计算机图形学这个概念是如何在我人生中出现的，接下来的讨论中除了我和抽象的物体之外别无其他。</p>]]></content>
    
    
    <categories>
      
      <category>代码之外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四川大学软件著作权申请指南</title>
    <link href="/article/c555/"/>
    <url>/article/c555/</url>
    
    <content type="html"><![CDATA[<h1 id="四川大学软著申请指南">四川大学软著申请指南</h1><p>申请软件著作权时，可以将四川大学作为著作权人，自己为代理人和开发者进行申请。</p><p>申请的流程非常繁琐，不只包括中国版权保护中心网站的流程，还要根据学校的规定，走学校的部分流程。</p><p>如果需要将该软著作为自己的研究成果，需要保留好下面提到的《四川大学软件著作权申请登记表》盖章后的照片，用于确认代理人和开发者，因为最终的软著证书上只有著作权人：四川大学的字样。</p><span id="more"></span><h2 id="四川大学软件著作权申请流程">四川大学软件著作权申请流程</h2><p><strong>文字版</strong></p><ol type="1"><li>准备<strong>《源码文件》</strong>以及<strong>《软件说明书》</strong></li><li>在 <a href="https://www.ccopyright.com.cn/">中国版权保护中心</a>提交电子版文件，提交时会需要填写学校验证码</li><li>填写<a href="https://kyy.scu.edu.cn/info/2166/7540.htm"><strong>《四川大学软件著作权申请信息登记表》</strong></a>，二级单位处盖学院公章</li><li>前往四川大学<strong>科转部</strong>（望江行政楼341室）提交(3)中的表格，并索取(2)中的学校验证码</li><li>有了学校验证码之后在版权网站提交电子版，打印网站自动生成的文件，盖学校公章（也是找科转部）</li><li>准备学校法人复印件材料（申请流程见附件，在网上申请，望江行政楼自助打印）</li><li>收集好(5)和(6)的材料后按网站要求邮寄提交，等待审核</li></ol><p><strong>流程图版</strong></p><center><figure><img src="https://imgbed.scubot.com/image/flowchat.svg" alt="flowchat"><figcaption aria-hidden="true">flowchat</figcaption></figure></center><h2 id="网上办理流程注意事项">网上办理流程注意事项</h2><ul><li>办理身份：<strong>代理申请</strong></li><li>著作权人：四川大学 (121000004000091949)<img src="https://imgbed.scubot.com/image/20221101112106.png" alt="示例 " style="zoom:30%;"></li></ul><h2 id="学校法人证书申请流程">学校法人证书申请流程</h2><p>登陆：<a href="https://my.scu.edu.cn"><strong>https://my.scu.edu.cn</strong></a></p><p>点击法人证书申请（学生）项目，填写表单即可。</p><p><img src="https://imgbed.scubot.com/image/286619DA-AB4E-4666-8EED-8ADA71798C17.png"></p>]]></content>
    
    
    <categories>
      
      <category>SCU相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文明与罗马文明</title>
    <link href="/article/ede1/"/>
    <url>/article/ede1/</url>
    
    <content type="html"><![CDATA[<p>由于最近我在读古罗马历史，对其中一些故事非常感兴趣，加之接触过《文明6》这款游戏，所以想从这款游戏的内容出发，对罗马历史做出粗略的勾勒。</p><p><strong>光荣属于希腊，伟大属于罗马</strong></p><span id="more"></span><p>需要提前说明的是，我目前仅读过以下书籍，并不包含非常严格的一手/二手史料，所以我对历史的描述必然会出现真实性的偏差，当个故事听就好。</p><ul class="task-list"><li><label><input type="checkbox" checked="">《罗马人的故事》 ——盐野七生</label></li><li><label><input type="checkbox" checked="">《罗马共和国》 ——牛津通识读本</label></li><li><label><input type="checkbox" checked="">《奥古斯都》 ——约翰·威廉斯</label></li></ul><h2 id="文明6-设定">文明6 设定</h2><p>《文明》这款游戏中有诸多玩家可以选择的历史文明，选择后可以模拟从远古时期到中世纪再到现代、原子能时代、信息时代乃至未来时代的一系列变化历程。</p><h3 id="与罗马相关的人物">与罗马相关的人物</h3><p>每个文明都有一个领袖，其中罗马的文明领袖就是图拉真大帝。罗马文明在图拉真统治时期达到了最大的版图模块，罗马人可以骄傲得将地中海称作Marenostrum（我们的海）；且由于图拉真还有个爱好，喜欢大浴场，他在位时期修建了很多公共基础设施，其中包括了很多大浴场，所以《文明6》中罗马的一大特色建筑就是浴场。</p><p>但《文明》中同一个文明不一定只有一个领袖，比如中华帝国的领袖就有秦始皇和忽必烈两人，而罗马文明延续了两千多年，却只设置了一个领袖，显然这一个领袖无法概括罗马文明的全部。而更让人费解的是，提到罗马领袖，我想绝大部分人脑海中第一反应出来的名字都不会是图拉真，而是西方帝国最高统治权的象征、苏丹和沙皇的词源——盖乌斯·尤里乌斯·凯撒。</p><img src="https://imgbed.scubot.com/image/20221112143553.png"><center><p>图拉真时期的罗马版图</p></center><p>其实《文明6》中并非没有凯撒的身影，在游戏结束之后，系统会对玩家在这一局中的操作与决策评分，共分有20个等级，每个等级都对应着一个历史伟人。我印象中第十一名是二战时期法国的戴高乐，第四名是丘吉尔，第二名是巴比伦的汉谟拉比，第一名就是凯撒。由此可见凯撒在制作组心中具有不一样的地位，他们并没有让凯撒成为游戏中实际存在的领袖，或者是伟人系统中的大将军，赋予他某种加成能力，而是将凯撒变作一种目标，一种只可企及不可超越的目标。</p><p>说到《文明6》中的伟人系统，就不得不提到两位与罗马相关的人物，其中之一是大将军<strong>汉尼拔·巴卡</strong>，又被后世誉为西方战略之父，他在与罗马的第二次布匿战争期间率领几万人和几十头战象翻阅阿尔卑斯山的壮举被载入史册，这位人物我们之后还会提到。</p><p>而另一位就显得与众不同，他就是与凯撒、庞培齐名<strong>克拉苏</strong>，这三者组成的罗马前三头同盟在公元前50年前拥有罗马绝大部分的权力，克拉苏也是率军打仗的将领，他最为人熟知的就是率兵镇压了广为人知的斯巴达克斯角斗士起义，不过最终克拉苏在东征安息帝国时兵败被杀，据说还是被敌人灌了黄金液体而死，用于讽刺这位将军的贪财，事实上克拉苏也确实是罗马当时的首富，因为足够富裕，所以为了提升政治地位就必须带兵打仗，但毕竟不是将军的料子，最后落得如此下场，也许《文明6》的制作组也想讽刺克拉苏，又或者是点明他的本质，所以将克拉苏设为了伟人中的大商人，而不是大将军。《文明6》中与罗马相关的伟人应该还有很多，只不过这两个是我实际注意到的。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://imgbed.scubot.com/image/20221112151020.png" alt="凯撒"></div><div class="group-image-wrap"><img src="https://imgbed.scubot.com/image/20221112151033.png" alt="庞培"></div><div class="group-image-wrap"><img src="https://imgbed.scubot.com/image/20221112151048.png" alt="克拉苏"></div></div></div><center><p>罗马前三头同盟：凯撒、庞培、克拉苏（由左至右）</p></center><h3 id="与罗马相关的文明">与罗马相关的文明</h3><p>在《文明6》中与罗马相关的文明有很多，比如被凯撒征服的<strong>高卢</strong>，也是<strong>法国</strong>的前身（游戏里高卢和法国是算作两种文明）。还有灭亡了东罗马帝国的<strong>奥斯曼帝国</strong>，以及东罗马<strong>拜占庭帝国</strong>，除此之外还有罗马精神（但不是种族）的延续：<strong>神圣罗马帝国（德国）</strong>和<strong>俄罗斯</strong>。与罗马相关的文明如此之多，这里还不包括曾被罗马纳入版图的希腊诸城邦和埃及等，以至于有种说法，在游戏中随机文明开局，很大可能就是罗马内战。</p><p>以上有太多文明与罗马有关系，但是我觉得最值得品味的一个文明，是与罗马间接相关的<strong>腓尼基</strong>。</p><h2 id="狄多的诅咒">狄多的诅咒</h2><p>腓尼基本是巴尔干半岛的一个国家，与其说是国家，不如说是一个种族，拥有一定的主权。在公元前十三世纪前后，腓尼基的公主狄多受到其兄的迫害流亡海外，来到了北非的一片沿海之地，靠近如今的突尼斯，建立了城市迦太基。</p><p>而同一时期，希腊各城邦因为美人海伦等一系列原因，攻打了东方的特洛伊城十年之久，最终使用了我们耳熟能详的“特洛伊的木马”一计，攻下了特洛伊城。特洛伊王的女婿埃涅阿斯率领随从潜逃，也正好来到了狄多公主建立的迦太基，并与之坠入爱河。</p><center><img src="https://imgbed.scubot.com/image/20221112153701.png"></center><center><p>狄多和埃涅阿斯的逃亡路线</p></center><p>但是某一天，埃涅阿斯接到神谕，说他应该建立一个更伟大的文明，不应该屈居于迦太基，所以他抛弃了狄多公主到了亚平宁半岛（如今的意大利），与当地的王联姻。狄多知道之后非常愤怒，站在祭祀台上诅咒迦太基与埃涅阿斯的种族世代为敌，说完自刎而死。</p><p>在埃涅阿斯定落脚意大利的400年之后，他的后代罗慕路斯和雷慕斯于公元前753年建立了罗马城，从此罗马进入王政时期。随着罗马文明的发展，在罗马的第七任国王“高傲者”塔克文被<strong>布鲁图斯</strong>和克劳迪乌斯家族推翻之后，罗马进入了共和时期。</p><p>在公元前3世纪到公元前2世纪，在当时还不属于罗马领土的西西里岛上的两个希腊城邦墨西拿和叙拉古（也称锡拉库萨）起了争执，而这两者为了解决矛盾，分别向罗马和迦太基求援。罗马是典型的农耕文明，从未经历过海战，而迦太基本就是沿海的城市，国内经济以海上贸易为主，且拥有当时地中海上的精英舰队，考虑到种种现实问题，罗马决定举行公民大会，由罗马公民投票决定是否对西西里岛出兵，同时向迦太基宣战。而投票的结果也彰显了罗马的野心，他们不能接受其他国家对周遭城邦的侵占，毅然向迦太基发出战争通告，史称第一次布匿战争。</p><p>战争一旦爆发就很难停下，尤其是在中世纪前，两股势力之间的战争往往都会被冠以“第几次”这样的指代，而罗马和迦太基之间的布匿战争就进行了三次，最终在公元前146年，罗马的执政官小西庇阿奉元老院话事人大加图的主张，毁灭了迦太基，并且在废墟上撒盐诅咒。至此狄多公主的诅咒是以自己的国家迦太基被灭亡而结束了。</p><p>但是如果仔细分析布匿战争的过程，尤其是第二次布匿战争时，迦太基的将军汉尼拔对罗马军事力量进行了极大的打击，以至于不得不任命特殊期的独裁官以取代共和时期的两名执政官来指挥战斗。而且汉尼拔被后事战争学家称作西方战略之父，不光是因为其战术的高超，更是因为他洞察到了罗马共和时期的真正强大之处在于罗马与意大利半岛其他城邦的同盟者关系，汉尼拔入侵意大利的最主要目的就是瓦解这种同盟关系，使得罗马在根本上崩溃，但是第二次布匿战争还是以大西庇阿大败汉尼拔而宣告罗马的胜利。</p><p>不过因为汉尼拔对罗马的高强度打击，使得罗马开启了长时间任命独裁官的先例，并且让罗马士兵数量激增，导致战后老兵的安置成了很大的问题，为了解决这个问题，先是出现了格拉古兄弟的土地改革，但是由于触犯了贵族元老们的利益，最后以格拉古兄弟惨死而告终，而又因为格拉古兄弟改革中关于同盟国的罗马公民权提案被元老院否定，导致罗马的同盟国叛变，爆发了同盟国战争。为了平息战争，罗马人选举了没有任何政治背景的军人马略作为执政官，进行军队改革。</p><p>马略改革的最大特点就是把征兵制改成了募兵制，用于吸收战后的老兵继续作战，而不是以前按照居民财富阶级直接征召，虽然马略改革成功解决了同盟国战争的问题，但是直接为后来的苏拉独裁、凯撒夺权和屋大维称帝奠定了基调：军队私有化。直接加速了罗马由共和转帝制的进程。</p><p>所以从历史的全局视角来看，狄多的诅咒确实应验了，因为迦太基与罗马的战争间接破坏了罗马的共和体制，罗马转为帝国之后极为动荡，最后分裂成东西两个帝国，西罗马帝国在欧洲的民族大迁徙运动中被悄然吞噬，东罗马于公元1453年被奥斯曼帝国击败，整整2100年的罗马从此消失。罗马的精神造在共和体制被破坏时就在不断自我消逝，最后自我解体，与迦太基一样被毁灭了。</p><h2 id="一些趣事">一些趣事</h2><p><strong>布鲁图斯的共和使命</strong></p><p>与狄多公主的诅咒同样有宿命感的是，推翻罗马王政，建立共和的叫布鲁图斯，而几百年后，正是他们家的后代，小布鲁图斯，打着维护共和的名义刺杀了凯撒，直接加速了罗马帝制的进程。</p><p><strong>"尤里卡 Eureka"的由来</strong></p><p>第一次布匿战争中的叙拉古位处西西里岛的东南方向，是希腊在西西里岛的殖民城邦。第一次布匿战争期间，叙拉古的国王希伦在觉得大势已去之时与罗马讲和，主动提供罗马驻西西里岛军队的补给，并一直与罗马保持同盟关系直到去世。</p><center><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Sicilia_-_prima_guerra_punica_zh.svg/800px-Sicilia_-_prima_guerra_punica_zh.svg.png"></center><center><p>第一次布匿战争时期的西西里岛</p></center><p>这位国王生前与叙拉古的一名古希腊科学家保持密切联系，曾委托他鉴定金冠是否参有杂质。接下来的故事我们耳熟能详：这位科学家在洗澡时灵光一现，想到了可以通过排出的水的质量来计算水中物体的质量，并且喊出了那句“Eureka”，意为“我知道了”。《文明6》中保留了尤里卡的设定，即在解锁某项科技时，只要完成该科技指定的尤里卡条件，解锁科技所需要的消耗就会大幅降低。</p><p>值得一提的是，在第二次布匿战争期间，由老国王希伦的去世产生的动荡的政治势力被汉尼拔利用，叙拉古又站在反抗罗马的一边。在罗马镇压叙拉古叛乱，攻入城池时，罗马将军曾嘱咐士兵，不允许迫害这名科学家。但是由于士兵只知道他的名字叫阿基米德，并不清楚他的样子，所以在催促一名拿木棍在地上写字的老人离开房间无果后，一名士兵毫不犹豫得将剑刃刺向了他的脖颈。</p>]]></content>
    
    
    <categories>
      
      <category>代码之外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>罗马</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mesh Deformation Transfer</title>
    <link href="/article/4581/"/>
    <url>/article/4581/</url>
    
    <content type="html"><![CDATA[<h1 id="deformation-transfer-for-triangle-mesh">Deformation Transfer ForTriangle Mesh</h1><h2 id="概述">概述</h2><p><strong>问题描述</strong></p><p>对于两个具有一定视觉相似度的三角网格：原网格 <span class="math inline">\(S_0\)</span> 和目标网格 <span class="math inline">\(T_0\)</span>，根据原网格已知的变形序列 <span class="math inline">\(\mathcal S=\{S_0,\,\dots,\, S_{|\mathcalS|}\}\)</span>，生成目标网格的对应的变形序列<span class="math inline">\(\mathcal T=\{T_0,\, \dots, T_{|\mathcalS|}\}\)</span>。</p><figure><img src="https://imgbed.scubot.com/image/20221020144729.png" alt="banner"><figcaption aria-hidden="true">banner</figcaption></figure><span id="more"></span><p><strong>问题假设</strong></p><ol type="1"><li><span class="math inline">\(\mathcal S\)</span> 和 <span class="math inline">\(\mathcal T\)</span>中的网格分别具有相同的拓扑结构，但两个集合对应网格之间不要求。</li><li><span class="math inline">\(S_0\)</span> 与 <span class="math inline">\(T_0\)</span>应当具有一定的视觉相似度，并且相关点对通过人为标记的方式体现。</li></ol><p><strong>基本思想</strong></p><ol type="1"><li>根据人为标定的标记点，计算由 <span class="math inline">\(S_0\)</span> 到 <span class="math inline">\(T_0\)</span> 的三角面片对应关系 <span class="math inline">\(M=\{(s_0,\,t_0),\, \dots,\,(s_{\lvert M\rvert},\,t_{\lvert M\rvert})\}\)</span>。</li><li>对 <span class="math inline">\(S_i,\, i\in \{1,\, \dots ,\,|\mathcal S|\}\)</span> ，由于 <span class="math inline">\(S_i\)</span>与 <span class="math inline">\(S_0\)</span>具有相同的拓扑，可以根据对应关系<span class="math inline">\(M\)</span>，将<span class="math inline">\(S_i\)</span>每个三角面的变换作用到<span class="math inline">\(T_0\)</span>，加上一些约束条件，得到变形后的 <span class="math inline">\(T_i\)</span> 。</li></ol><h2 id="三角面变换">三角面变换</h2><p>在三维空间中，对于三角面<span class="math inline">\(F_i =\left[v_0,\, v_1,\, v_2\right]\)</span> 到另一个三角面<span class="math inline">\(\widetilde{F_i} =\left[\widetilde v_0,\,\widetilde v_1,\, \widetilde v_2 \right]\)</span>的仿射变换可以分解为线型部分<span class="math inline">\(Q_i\)</span>和非线性部分 <span class="math inline">\(\mathbfd_i\)</span>。求解该仿射变换需要用四对点到点的关系，对每个三角面引入第四个点：<span class="math display">\[v_3 = v_0 +(v_1 −v_0) \times (v_2 −v_0) \big / \sqrt{|(v_1 −v_0) \times(v_2 −v_0)|}\]</span></p><p>线性部分<span class="math inline">\(Q_i = \widetilde V_i{V_i}^{-1}\)</span>，其中<span class="math inline">\(V_i = \left[v_1 -v_0\quad v_2 - v_0 \quad v_3-v_0\right]\)</span></p><h2 id="对应关系计算">对应关系计算</h2><p>根据标定点，将 <span class="math inline">\(S_0\)</span>在保持拓扑不变的前提下变形为 <span class="math inline">\(T_0\)</span>。</p><p>根据三角面变换中的定义，将<span class="math inline">\(S_0\)</span>中每个三角面的第四个点加到顶点序列之后：<span class="math display">\[x = \left(\underbrace{v_0,\, v_1,\, \dots,\,v_{n-1}}_{\text{原始顶点}},\, \underbrace{v_{n},\, \dots,\,v_{n+m-1}}_{\text{新增顶点}} \right)\]</span> 其中<span class="math inline">\(n\)</span>为<span class="math inline">\(S_0\)</span>中原始顶点的个数，<span class="math inline">\(m\)</span>为三角面个数，<span class="math inline">\(x \in \mathbb R^{3\times (n+m)}\)</span>。</p><p>通过改动<span class="math inline">\(x\)</span>，来实现<span class="math inline">\(S_0\)</span>到<span class="math inline">\(T_0\)</span>的变形，具体表现为定义损失函数，最小二乘法搜索最优解：<span class="math display">\[\min_{\widetilde x} (w_S E_S,\, w_IE_I,\, w_CE_C) \\\text{约束标记点对中原网格顶点与目标网格顶点相同}\]</span></p><table style="width:100%;"><thead><tr><th style="text-align: left;">损失项</th><th style="text-align: left;">表达式</th><th style="text-align: left;">备注</th></tr></thead><tbody><tr><td style="text-align: left;">平滑性<br>(smoothness)</td><td style="text-align: left;"><span class="math inline">\(E_S(x) =\sum_{Q_i}{ \sum_{Q_j \in \text{adj}(Q_i)}{\lVert Q_i-Q_j\rVert_F^2}}\)</span></td><td style="text-align: left;">对每一个三角面，周围三角面的形变应该尽量与之相似</td></tr><tr><td style="text-align: left;">不变性<br>(identity)</td><td style="text-align: left;"><span class="math inline">\(E_I(x) =\sum_{Q_i}{\lVert Q_i - \mathbf I \rVert_F^2}\)</span></td><td style="text-align: left;">每个三角面的形变尽可能小</td></tr><tr><td style="text-align: left;">最近点损失</td><td style="text-align: left;"><span class="math inline">\(E_C(x;\,c_0,\,\dots,\,c_n)=\sum_i{\lVert v_i -c_i\rVert^2_F}\)</span></td><td style="text-align: left;">原网格的每个顶点都应该尽可能贴近与目标网格的最近点</td></tr></tbody></table><p>当<span class="math inline">\(S_0\)</span>在保持拓扑不变的情况下变形为接近 <span class="math inline">\(T_0\)</span>后，计算两个网格三角面之间的对应关系<span class="math inline">\(M\)</span>。</p><blockquote><p>对<span class="math inline">\(S_0\)</span>中的每个三角面，在<span class="math inline">\(T_0\)</span>中至少存在一个三角面与之存在最近关系，反之亦然。所以两个网格中三角面的对应关系为多对多，并非映射。</p></blockquote><h2 id="形变迁移">形变迁移</h2><p>在有原网格与目标网格三角面的对应关系<span class="math inline">\(M\)</span>, 以及原网格 初始网格<span class="math inline">\(S_0\)</span> 与形变网格<span class="math inline">\(S_i\)</span>的每个三角面形变关系后，我们可以直接将<span class="math inline">\(S_0\)</span> 到<span class="math inline">\(S_i\)</span>的形变迁移到<span class="math inline">\(T_0\)</span> 上，得到<span class="math inline">\(T_i\)</span>：</p><p><span class="math display">\[\min_{Q_i+\mathbf d_i} \sum_{j=0}^{ | M | -1} { \lVert \mathbf S_{s_j}-\mathbf T_{t_j}\rVert_F^2} \\\text{约束 }Q_j\, v_i + \mathbf {d}_j= Q_k \, v_i + \mathbf d_k,\quad\forall i,\forall j,k\in\text{adj}(v_i)\]</span></p><p>这里的<span class="math inline">\(\mathbfS_{s_j}\)</span>表述为网格<span class="math inline">\(S_i\)</span>中标号为<span class="math inline">\(s_j\)</span>的三角形的变换<span class="math inline">\(Q_{s_j}\)</span>，<span class="math inline">\(T_{t_j}\)</span>同理。</p><p>对于实际求解，可以将上述对三角面变换的逼近转换到对顶点变换的逼近。</p><blockquote><p>由于三角面变换逼近时，可能会出现边缘撕裂的情况，所以需要添加三角形的邻域约束。而转用顶点表达时，通过同一网格类型拓扑不变的假设，蕴含了变换后的网格不会出现边缘撕裂。</p></blockquote><p>具体的顶点公式推导在后面。</p><h2 id="细节推导">细节推导</h2><h3 id="三角面变换-1">三角面变换</h3><p>以上描述的优化函数大多都是用三角面的形变表示，而优化目标是顶点序列<span class="math inline">\(x\)</span>，需要进行推导将三角面的形变转换为关于顶点序列<span class="math inline">\(x\)</span> 的表达式，即。 <span class="math display">\[Q_i = \widetilde V_i\, {V_i}^{-1} \quad\xrightarrow[]{\text{展开顶点序列 }x} \quad Q_i= x\,\hat{V}_i^{-1}\]</span> <strong>计算展开<span class="math inline">\(x\)</span></strong> <span class="math display">\[\begin{align*}\underset{3\times 3}{Q_i} &amp;= \widetilde V_i\, {V_i}^{-1} \\[2ex]     &amp;= \begin{bmatrix} \widetilde v_1^i - \widetilde v_0^i &amp;\widetilde v_2^i - \widetilde v_0^i &amp; \widetilde v_3^i - \widetildev_0^i \end{bmatrix} \, {V_i}^{-1} \\[2ex]     &amp;= \begin{bmatrix} \widetilde v_1^i &amp; \widetilde v_2^i&amp; \widetilde v_3^i \end{bmatrix}\, {V_i}^{-1} -            \begin{bmatrix} \widetilde v_0^i &amp; \widetilde v_0^i&amp; \widetilde v_0^i \end{bmatrix}\, {V_i}^{-1}\\[2ex]     &amp;= \begin{bmatrix} \widetilde v_0 &amp; \widetilde v_1 &amp;\dots &amp; \widetilde v_{n+m-1} \end{bmatrix}     \begin{bmatrix}&amp;\dots\\0 &amp; 0 &amp; 0\\ &amp; \dots\\1&amp;0&amp;0\\&amp;\dots&amp;\\0&amp;1&amp;0\\&amp;\dots&amp;\\0&amp;0&amp;1\\&amp;\dots\end{bmatrix}     {V_i}^{-1}     -     \begin{bmatrix} \widetilde v_0 &amp; \widetilde v_1 &amp; \dots&amp; \widetilde v_{n+m-1} \end{bmatrix}     \begin{bmatrix}&amp;\dots\\1&amp;1&amp;1\\&amp;\dots\\0&amp;0&amp;0\\&amp;\dots&amp;\\0&amp;0&amp;0\\&amp;\dots&amp;\\0&amp;0&amp;0\\&amp;\dots\end{bmatrix}    {V_i}^{-1}    \\[2ex]    &amp;=\begin{bmatrix} \widetilde v_0 &amp; \widetilde v_1 &amp;\dots &amp; \widetilde v_{n+m-1} \end{bmatrix}    \begin{bmatrix}&amp;\dots\\-1&amp;-1&amp;-1\\&amp;\dots\\1&amp;0&amp;0\\&amp;\dots&amp;\\0&amp;1&amp;0\\&amp;\dots&amp;\\0&amp;0&amp;1\\&amp;\dots\end{bmatrix}{V_i}^{-1} \\[2ex]    &amp;= x \, \hat{V}_i^{-1}\end{align*}\]</span></p><h3 id="一般的目标函数">一般的目标函数</h3><p>对于一般情况，期望在保持原网格拓扑不变的同时满足每个三角面的变形目标<span class="math inline">\(C_i\)</span>，写作： <span class="math display">\[\begin{align*}\sum_{i=0}^{\lvert M \rvert-1}{\big\lVert Q_i -C_i\big\rVert_F^2} &amp;=\sum_{i=0}^{\lvert M \rvert-1}{\big\lVert x\, \hat{V}_i^{-1} -C_i\big\rVert_F^2} \\[2ex]&amp; =\sum_{i=0}^{\lvert M \rvert-1}{\begin{Vmatrix} \left( x\, \hat{V}_i^{-1} - C_i\right)^T\end{Vmatrix}_F^2} \\[2ex]&amp;= \sum_{i=0}^{\lvert M \rvert-1}{\begin{Vmatrix}\left(\hat{V}_i^{-1}\right)^T\, x^T-C_i^T\end{Vmatrix}_F^2}\\[2ex]&amp;= \begin{Vmatrix}\begin{pmatrix}\left(\hat{V}_0^{-1}\right)^T \\\left(\hat{V}_1^{-1}\right)^T \\\dots\\\left(\hat{V}_{\lvert M \rvert-1}^{-1}\right)^T\end{pmatrix}\,x^T -\begin{pmatrix}C_0^T \\C_1^T \\\dots \\C_{\lvert M \rvert-1}^T\end{pmatrix}\end{Vmatrix}_F^2 \\[2ex]&amp;=\begin{Vmatrix}A\,x^T - b\end{Vmatrix}_F^2\end{align*}\]</span> 即目标函数变为 <span class="math inline">\(E (x) =\begin{Vmatrix} A\, x^T - b \end{Vmatrix}_F^2\)</span>的形式，使用最小二乘法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://eeweb.engineering.nyu.edu/iselesni/lecture_notes/least_squares/least_squares_SP.pdf">[1]</span></a></sup>，得到<span class="math display">\[\frac{\partial E(x)}{\partial x} = \frac{\partial {\left( x^TA^TA\,x-2b^TA\,x+b^T\,b\right)} }{\partial x} = 2A^TA\,x - 2A^T b = 0\\[2ex]A^T A\,x = A^T b\]</span></p><h3 id="具体的目标函数">具体的目标函数</h3><p><strong>平滑性损失</strong> <span class="math display">\[\begin{align*}E_S(x)&amp;=\sum_{Q_i}{ \sum_{Q_j \in \text{adj}(Q_i)}{\lVert Q_i-Q_j\rVert_F^2}} \\[2ex]&amp;=\begin{Vmatrix}\begin{pmatrix}\left(\hat{V}_0^{-1} - \hat{V}_{j_0}^{-1}\right)^T \\\left(\hat{V}_0^{-1} - \hat{V}_{j_1}^{-1}\right)^T \\\dots \\\left(\hat{V}_0^{-1} - \hat{V}_{j_{\lvert \text{adj}(Q_i)\rvert-1}}^{-1}\right)^T \\\left(\hat{V}_1^{-1} - \hat{V}_{j_0}^{-1}\right)^T\\\dots\end{pmatrix}\, x^T - 0\end{Vmatrix}_F^2=\begin{Vmatrix}A_S\, x^T - b_S\end{Vmatrix}_F^2\end{align*}\]</span> 其中<span class="math inline">\(A_S \in \mathbb R^{3q\times{(n+m)}}\)</span>， <span class="math inline">\(b_S \in \mathbbR^{3q\times 3}\)</span>，<span class="math inline">\(q = \sum_i {\lvert\text{adj}(Q_i)\rvert}\)</span>。</p><p><strong>不变性损失</strong> <span class="math display">\[\begin{align*}E_I(x) &amp;= \sum_{Q_i}{\lVert Q_i - \mathbf I \rVert_F^2}\\[2ex]&amp;= \begin{Vmatrix}\begin{pmatrix}\left(\hat{V}_0^{-1}\right)^T \\\left(\hat{V}_1^{-1}\right)^T \\\dots\\\left(\hat{V}_{m-1}^{-1}\right)^T\end{pmatrix}\,x^T -\begin{pmatrix}\mathbf I \\\mathbf I \\\dots \\\mathbf I\end{pmatrix}\end{Vmatrix}= \begin{Vmatrix}A_I\, x^T - b_I\end{Vmatrix}_F^2\end{align*}\]</span> 其中<span class="math inline">\(A_I \in \mathbb R^{3m \times(n+m)}\)</span>，<span class="math inline">\(b_I \in \mathbb R^{3m\times3}\)</span>。</p><p><strong>最近点损失</strong> <span class="math display">\[\begin{align*}E_C(x;\, c_0,\,\dots,\,c_n)&amp;=\sum_i{\lVert v_i -c_i\rVert^2} \\[2ex]&amp;=\begin{Vmatrix}\mathbf I\, x^T - \begin{pmatrix}C_0^T \\C_1^T \\\dots \\C_{m+n-1}^T\end{pmatrix}\end{Vmatrix}_F^2 = \begin{Vmatrix}A_C \, x^T -b_C \end{Vmatrix}_F^2\end{align*}\]</span> 其中<span class="math inline">\(A_C \in \mathbb R^{3m \times(n+m)}\)</span>，<span class="math inline">\(b_C \in \mathbb R^{3m\times3}\)</span>。</p><blockquote><p>为了统一使用变量<span class="math inline">\(x^T\)</span>，需要有<span class="math inline">\(n+m\)</span>个点的形式，但实际上只需要计算前<span class="math inline">\(n\)</span>个顶点的最近点。</p></blockquote><p><strong>形变迁移损失</strong> <span class="math display">\[\begin{align*}E_Q(x)&amp;=\sum_{j=0}^{\lvert M\rvert -1} {\lVert \mathbf S_{s_j}-\mathbf T_{t_j}\rVert_F^2}\\[2ex]&amp;=\sum_{j=1}^{\lvert M\rvert}{\begin{Vmatrix}\mathbf S_{s_j}^T - {\hat{V}_{t_j}^{-1}}^T\, x^T\end{Vmatrix}_F^2}\\[2ex]&amp;=\begin{Vmatrix}-\begin{pmatrix}\left(\hat{V}_{t_0}^{-1}\right)^T \\\left(\hat{V}_{t_1}^{-1}\right)^T \\\dots\\\left(\hat{V}_{t_{\lvert M \rvert-1}}^{-1}\right)^T\end{pmatrix}\,x^T+\begin{pmatrix}\mathbf S_{s_0}^T \\\mathbf S_{s_1}^T \\\dots \\\mathbf S_{s_{\lvert M\rvert -1}}^T\end{pmatrix}\end{Vmatrix}_F^2\\[2ex]&amp;= \begin{Vmatrix}A_Q\, x^T - b_Q\end{Vmatrix}_F^2\end{align*}\]</span> 其中<span class="math inline">\(A_Q \in \mathbb R^{3\vertM\rvert \times (n+m)}\)</span>，<span class="math inline">\(b_Q \in\mathbb R^{3\vert M\rvert \times 3}\)</span>，<span class="math inline">\(\lvert M\rvert\)</span>是对应关系中元素的个数，满足<span class="math inline">\(\lvert M\rvert \ge m\)</span>。</p><h2 id="实验">实验</h2><h3 id="注意事项">注意事项</h3><p><strong>对应关系求解: 标记点约束</strong></p><p>在求解<span class="math inline">\(\min_x E_S\)</span>、<span class="math inline">\(\min_xE_I\)</span>和<span class="math inline">\(\min_x E_Q\)</span>时，需要约束<span class="math inline">\(S_0\)</span>和<span class="math inline">\(T_0\)</span>对应的标记点相同： <span class="math display">\[\begin{align*}A^T\,A\, x^T &amp;= A^T\, b\\[2ex]({A^u})^T\,A^u\, \left(x^u\right)^T + ({A^m})^T\, A^m\,\left(\widetilde{x}^m\right)^T &amp;= A^T\, b\\[2ex]({A^u})^T\,A^u\, \left(x^u\right)^T &amp;= A^T\,b - ({A^m})^T\,A^m\,\left(\widetilde{x}^m\right)^T\end{align*}\]</span> 对于<span class="math inline">\(S_0\)</span>，<span class="math inline">\(A^u\)</span>、<span class="math inline">\(x^u\)</span>分别为未标记点的系数矩阵以及顶点序列，<span class="math inline">\(A^m\)</span>、<span class="math inline">\(x^m\)</span>为已标记点的系数矩阵以及顶点序列，<span class="math inline">\(\widetilde{x}^m\)</span>为<span class="math inline">\(T_0\)</span>中已标记点的顶点序列。</p><p>再求解出<span class="math inline">\(x^u\)</span>后再根据约束条件<span class="math inline">\(x^m = \widetilde{x}^m\)</span> 计算出结果 <span class="math inline">\(\widetilde{x}\)</span>。</p><p><strong>对应关系求解: 目标函数组合与迭代</strong></p><p>对应关系计算时，可以将相关目标函数写在一起： <span class="math display">\[\widetilde{x} = \underset{x}{\arg \min}\begin{Vmatrix}\begin{pmatrix}w_SA_S \\w_IA_I\\w_CA_C\end{pmatrix}\,x^T -\begin{pmatrix}w_S b_S\\w_I b_I\\w_C b_C\end{pmatrix}\end{Vmatrix}_F^2\]</span> 其中<span class="math inline">\(w_S=1.0\)</span>，<span class="math inline">\(w_I=0.001\)</span>，<span class="math inline">\(w_C=[0,\,1\, \dots,\, 5000]\)</span>。</p><p><strong>稀疏线性方程组求解<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zhuanlan.zhihu.com/p/479913328">[2]</span></a></sup></strong></p><ol type="1"><li>直接求解<ul><li>LU分解：<span class="math inline">\(Ax=b \Longrightarrow LUx =b\)</span></li><li>Cholesky分解<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://zhuanlan.zhihu.com/p/112091443">[3]</span></a></sup>：<span class="math inline">\(Ax = b \Longrightarrow L^TLx=b\)</span></li></ul></li><li>间接求解<ul><li>Jacobi method / Gauss-Seidel method</li></ul></li></ol><p><strong>优化</strong></p><ol type="1"><li>稀疏矩阵的计算：乘法、转置、切片、拼接和索引。</li><li>稀疏方程组求解。</li><li>计算<span class="math inline">\(E_C\)</span>时，最近点的计算。</li><li>计算对应关系<span class="math inline">\(M\)</span>时，最近三角面重心以及法线夹角的计算。</li></ol><h3 id="计算流程">计算流程</h3><p>计算形变迁移，本质上在优化四个目标函数：<span class="math inline">\(E_S\)</span>、<span class="math inline">\(E_I\)</span>、<span class="math inline">\(E_C\)</span>和<span class="math inline">\(E_Q\)</span>。其中系数矩阵几乎都包含<span class="math inline">\(\hat{V}^{-1}\)</span>的计算。</p><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>https://eeweb.engineering.nyu.edu/iselesni/lecture_notes/least_squares/least_squares_SP.pdf<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>https://zhuanlan.zhihu.com/p/479913328<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>https://zhuanlan.zhihu.com/p/112091443<a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>曲面参数化概述</title>
    <link href="/article/45ef/"/>
    <url>/article/45ef/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>对于如何确定本篇文章的内容涵盖范围这个问题，我想了很久，最终打算从最基本的<strong>什么是形状（shape）</strong>这个问题谈起。</p><span id="more"></span><h2 id="形状的本质">形状的本质</h2><p>在拓扑相关的理论中，<strong>形状</strong>是指<span class="math inline">\(n-1\)</span>维流形（manifold）在<span class="math inline">\(n\)</span>维流形中的嵌套。</p><p>流形是连续的，详细的定义也较为复杂，可以从以下两点来辅助理解流形的概念：</p><ol type="1"><li><span class="math inline">\(n\)</span> 维流形的局部与 <span class="math inline">\(\mathbb R^n\)</span>等价，例如：曲面（二维流形）的局部是二维平面。</li><li>对流形进行网格剖分，得到的离散流形除去边缘边之外，其他边有且仅有两个面与之相邻。</li></ol><p>所以我们可以认为，在 <span class="math inline">\(\mathbb R^n\)</span>或更高维欧式空间中观测不同 <span class="math inline">\(n-1\)</span>维流形的嵌套，就是在观测不同的形状。</p><hr><p>更严谨的，对于一个向量函数，可以表达为 <span class="math inline">\(f:\mathbb {R}^n \mapsto \mathbb {R}^m\)</span>.</p><p>我们令 <span class="math inline">\(\vec x = \left( x_1,\, \dots,\,x_n \right)^T \in \mathbb R^n\)</span>， <span class="math inline">\(\vec y = \left(y_1,\, \dots,\, y_m \right)^T \in\mathbb R^m\)</span>，故：</p><p><span class="math display">\[\vec y = f(\vec x) \implies\begin{cases}y_1 = f_1(x_1, \, \dots,\, x_n) \\[2ex]y_i = f_i(x_1, \, \dots,\, x_n) \\[2ex]y_m = f_m(x_1, \, \dots,\, x_n)\end{cases}\]</span></p><p>假设 <span class="math inline">\(f\)</span>是可微的，在自变量任意一点的邻域中，我们有（一阶泰勒展开）：</p><p><span class="math display">\[\begin{cases}\Delta y_1 = \frac{\partial f_1}{\partial x_1} \Delta x_1 + \dots +\frac{\partial f_1}{\partial x_j} \Delta x_j + \dots + \frac{\partialf_1}{\partial x_n} \Delta x_n \\[2ex]\Delta y_i = \frac{\partial f_i}{\partial x_1} \Delta x_1 + \dots +\frac{\partial f_i}{\partial x_j} \Delta x_j + \dots + \frac{\partialf_i}{\partial x_n} \Delta x_n \\[2ex]\Delta y_1 = \frac{\partial f_m}{\partial x_1} \Delta x_1 + \dots +\frac{\partial f_m}{\partial x_j} \Delta x_j + \dots + \frac{\partialf_m}{\partial x_n} \Delta x_n\end{cases}\]</span></p><p>写成矩阵形式</p><p><span class="math display">\[\begin{pmatrix}\Delta y_1 \\[2ex]\dots \\[2ex]\Delta y_i \\[2ex]\dots \\[2ex]\Delta y_m\end{pmatrix}=\begin{pmatrix}\frac{\partial f_1}{\partial x_1} &amp; \dots &amp; \frac{\partialf_1}{\partial x_j} &amp; \dots &amp; \frac{\partial f_1}{\partial x_n}\\[2ex]\dots &amp; \dots &amp; \dots &amp; \dots &amp; \dots \\[2ex]\frac{\partial f_i}{\partial x_1} &amp; \dots &amp; \frac{\partialf_i}{\partial x_j} &amp; \dots &amp; \frac{\partial f_i}{\partial x_n}\\[2ex]\dots &amp; \dots &amp; \dots &amp; \dots &amp; \dots \\[2ex]\frac{\partial f_m}{\partial x_1} &amp; \dots &amp; \frac{\partialf_m}{\partial x_j} &amp; \dots &amp; \frac{\partial f_m}{\partial x_n}\end{pmatrix}\begin{pmatrix}\Delta x_1 \\[2ex]\dots \\[2ex]\Delta x_j \\[2ex]\dots \\[2ex]   \Delta x_n \\[2ex]\end{pmatrix}\]</span></p><p>中间的系数矩阵就是<span class="math inline">\(m \timesn\)</span>的雅克比（Jacobian）矩阵，简化写作： <span class="math display">\[\Delta \vec y = \mathbf J_{m\times n} \,\Delta \vec x\]</span></p><p>观察映射<span class="math inline">\(f\)</span>的雅可比矩阵：</p><ul><li><p>矩阵中第 <span class="math inline">\(i\)</span> 行 表述为第 <span class="math inline">\(i\)</span> 个映射 <span class="math inline">\(f_i: \mathbb R^n \mapsto \mathbb R\)</span>的<strong>梯度（gradient）</strong> <span class="math display">\[\nabla f_i = \left(\frac{\partial f_i}{\partial x_1},\, \dots, \,\frac{\partial f_i}{\partial x_j},\, \dots,\, \frac{\partialf_i}{\partial x_n} \right)\]</span></p></li><li><p>矩阵中第 <span class="math inline">\(j\)</span> 列 表述为映射沿<span class="math inline">\(x_j\)</span> 方向的<strong>切向量（tangentvector）</strong> <span class="math display">\[\frac{d\,(\vec y)}{d\, x_j} = \left(\frac{\partial f_1}{\partial x_j},\,\dots,\, \frac{\partial f_i}{\partial x_j},\, \dots,\, \frac{\partialf_m}{\partial x_j} \right)^T\]</span></p><p>也可以理解为一个<strong>一维流形：</strong> <span class="math inline">\(\mathbb R \mapsto \mathbb R^m\)</span></p></li></ul><p>对不同 <span class="math inline">\(n\)</span> 和 <span class="math inline">\(m\)</span>，<span class="math inline">\(\Delta\vec y = \mathbf J_{m \times n} \, \Delta \vec  x\)</span>可以表述不同含义，总体上：</p><ul><li>若 <span class="math inline">\(m &gt; n\)</span>，因变量维度比自变量维度大，那么以上公式表述了低维流形在高维空间中的嵌套，即形状。</li><li>若 <span class="math inline">\(m &lt; n\)</span>，因变量维度比自变量维度小，那么以上公式表述的是高维流形向低维空间的投影。</li><li>若 <span class="math inline">\(m = n\)</span>，则是表述的线性变换，例如旋转、缩放。</li></ul><div class="note note-info">            <p>值得注意的是，<span class="math inline">\(\vec y = f(\vec x)\)</span>在局部等价于 <span class="math inline">\(\Delta \vec y = \mathbf J_{m\times n} \, \Delta \vec{x}\)</span>，而后者可以表述线性变换，前者通过与后者局部等价，可以表述非线性变换。</p>          </div><p>特别的：</p><table><thead><tr><th style="text-align: center;"><span class="math inline">\(m\)</span></th><th style="text-align: center;"><span class="math inline">\(n\)</span></th><th style="text-align: center;">presents</th></tr></thead><tbody><tr><td style="text-align: center;">1</td><td style="text-align: center;">1</td><td style="text-align: center;">数到数的映射</td></tr><tr><td style="text-align: center;">2</td><td style="text-align: center;">1</td><td style="text-align: center;">平面上的曲线</td></tr><tr><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;">二元函数；灰度图；二维流形向一维空间的投影</td></tr><tr><td style="text-align: center;">2</td><td style="text-align: center;">2</td><td style="text-align: center;">线性变换：旋转、缩放、剪切</td></tr></tbody></table><h2 id="二维流形">二维流形</h2><p>对形状有更深的理解之后，我们再来讨论二维流形。</p><p><strong>为什么是二维流形？</strong></p><p>因为人类只能在三维空间中去观察，故能直接观察到的最复杂的形状就是二维流形在三维空间中的嵌套，故着重研究二维流形是有意义的。</p><div class="note note-info">            <p>并不是所有图形都是流形，但是非流形都可以通过局部流形的拼接表述出来，所以我们只关注流形的特性。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>研究生生活开端</title>
    <link href="/article/159/"/>
    <url>/article/159/</url>
    
    <content type="html"><![CDATA[<p>至此，我的研究生生活已经过去了半年，生活节奏比起本科时期有了一些变化，感受变化最大的就是娱乐的种类更多了，工作的占比也更多了。</p><p>对于过去的一年，从江安毕业，再搬去望江，整个过程没有什么值得纪念的。对于之后的两年研究生生活，我能感觉到会有很多困难在等着我。</p><p>现在我坐在回学校的高铁上，外面全是雾霾和光秃的枝叉，希望回到学校后能带给我一片宁静。</p>]]></content>
    
    
    <categories>
      
      <category>代码之外</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>贪心的猴子</title>
    <link href="/article/9102/"/>
    <url>/article/9102/</url>
    
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><blockquote><p>来源 <a href="https://oj.scubot.com/problem/week-1-1"><strong>problem/week-1-1</strong></a></p></blockquote><h3 id="描述">描述</h3><p>在动物园中，一群猴子排队领香蕉，每只猴子都有一个<strong>最少</strong>的香蕉需求量。</p><p>猴子很贪心，每只猴子拿香蕉时可能会拿多于自己最少需求量的香蕉。</p><p>每只猴子就算多拿香蕉，拿的香蕉数目也<strong>不会超过自身需求量的两倍</strong>，同时也<strong>不会超过剩余香蕉数量的一半</strong>。</p><p>最后一只猴子是例外，他可以把所有剩余的香蕉都拿走。</p><h2 id="section"><span id="more"></span></h2><p>如果你是动物园饲养员，负责为猴子准备香蕉，在已知<strong>猴子总数</strong>和<strong>每只猴子的最少香蕉需求量</strong>时，</p><p>至少准备多少香蕉，才能保证每只猴子拿到的香蕉都能满足自己的需求。</p><h3 id="输入">输入</h3><p>第一行：整数<span class="math inline">\(n\)</span>，表示猴子的总数，<span class="math inline">\(0\le n\le100\)</span></p><p>第二行：<span class="math inline">\(n\)</span>个整数，第<span class="math inline">\(i\)</span>​​个整数为<span class="math inline">\(e_i\)</span>，表示第<span class="math inline">\(i\)</span>只猴子的最少香蕉需求量，<span class="math inline">\(1\le e_i \le 1000\)</span></p><h3 id="输出">输出</h3><p>输出一整数，表示<strong>最少</strong>需要准备的香蕉的数量。</p><h3 id="样例">样例</h3><h4 id="输入样例1">输入样例1</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><h4 id="输出样例1">输出样例1</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></tbody></table></figure><blockquote><p>其他样例见 <a href="https://oj.scubot.com/problem/week-1-1"><strong>problem/week-1-1</strong></a></p></blockquote><h2 id="解析">解析</h2><div class="note note-info">            <p>解决问题的方法不唯一，我这里展示的一定不是最优解法。</p>          </div><h3 id="符号说明">符号说明</h3><table><thead><tr><th>符号</th><th>备注</th></tr></thead><tbody><tr><td><span class="math inline">\(i\)</span></td><td>猴子序号，从<span class="math inline">\(0\)</span>到<span class="math inline">\(n-1\)</span></td></tr><tr><td><span class="math inline">\(e_i\)</span>​</td><td>第<span class="math inline">\(i\)</span>只猴子香蕉的最小需求量</td></tr><tr><td><span class="math inline">\(E_i\)</span></td><td>第<span class="math inline">\(i\)</span>只猴子实际拿的香蕉数量</td></tr><tr><td><span class="math inline">\(R_i\)</span></td><td>该第<span class="math inline">\(i\)</span>只猴子拿香蕉时，所剩余的香蕉数量</td></tr></tbody></table><h3 id="关系表述">关系表述</h3><p>用以上定义的符号去表述问题中描述的关系</p><h4 id="关系1">关系1</h4><p>猴子拿香蕉时，香蕉剩余量必须大于等于猴子最小需求量</p><p><span class="math display">\[R_i \ge e_i\]</span></p><h4 id="关系2">关系2</h4><p>对于<span class="math inline">\(i \in [0, n-1)\)</span>​​，每只猴子实际拿的香蕉数量满足</p><p><span class="math display">\[e_i \le E_i \le \min \{2 e_i, \lfloor R_i / 2 \rfloor\}\]</span></p><h4 id="关系3">关系3</h4><p>对于<span class="math inline">\(i = n-1\)</span>，即最后一只猴子</p><p><span class="math display">\[E_i = R_i\]</span></p><h4 id="关系4">关系4</h4><p>对于<span class="math inline">\(i \in [0, n - 1)\)</span>​ 满足 <span class="math display">\[R_i =  \sum_{k = i}^{n - 1} E_k\]</span></p><h3 id="关系解析">关系解析</h3><h4 id="解析1">解析1</h4><p>对于<span class="math inline">\(i \in [0, n -1)\)</span>​，每只猴子足够贪婪，永远会选择当前最优选择</p><p>由<a href="#关系1"><strong>关系1</strong></a>和<a href="#关系2"><strong>关系2</strong></a>可知 <span class="math display">\[E_i = \min\{2e_i, \lfloor R_i / 2 \rfloor \} \ge e_i\]</span> 引入<a href="#关系4"><strong>关系4</strong></a>，将<span class="math inline">\(R_i\)</span>替换为<span class="math inline">\(E_i\)</span>的表达式 <span class="math display">\[E_i = \min\{2e_i, \lfloor \sum_{k = i}^{n - 1} E_k / 2 \rfloor \} \gee_i\]</span></p><h4 id="解析2">解析2</h4><p>由<a href="#关系1"><strong>关系1</strong></a>和<a href="#关系3"><strong>关系3</strong></a>可知 <span class="math display">\[E_{n - 1} = R_{n - 1} \ge e_{n - 1}\]</span></p><h3 id="目标分析">目标分析</h3><p>综合<a href="#解析1"><strong>解析1</strong></a>与<a href="#解析2"><strong>解析2</strong></a>可得</p><ul><li>当<span class="math inline">\(i = n - 1\)</span>时，<span class="math inline">\(E_i \ge e_i\)</span></li><li>当<span class="math inline">\(i \in [0, n - 1)\)</span>时，<span class="math inline">\(E_i = \min\{2e_i, \lfloor \sum_{k = i}^{n - 1} E_k/ 2 \rfloor \}\)</span></li></ul><p>观察可知，<span class="math inline">\(E_i\)</span>​由<span class="math inline">\(E_{n - 1}\)</span>​和<span class="math inline">\(e_i\)</span>​决定，而<span class="math inline">\(e_i\)</span>​已知，故将<span class="math inline">\(E_{n-1}\)</span>​看做未知量进行推导。</p><hr><p>对于<span class="math inline">\(i\in[0, n-1)\)</span>​​，当<span class="math inline">\(\lfloor \sum_{k = i}^{n - 1} E_k / 2 \rfloor \le2e_i\)</span>​​​​时</p><ul><li>【<strong>偶数假设</strong>】如果<span class="math inline">\(\sum_{k= i}^{n - 1}E_k\)</span>​为偶数，有<span class="math inline">\(2E_i = E_i+ \sum_{k = i +1}^{n - 1}E_k\)</span>​ 即 <span class="math inline">\(E_i= \sum_{k = i + 1}^{n - 1} E_k\)</span>​</li><li>【<strong>奇数假设</strong>】如果<span class="math inline">\(\sum_{k= i}^{n - 1}E_k\)</span>​​​为奇数，有<span class="math inline">\(2E_i = E_i+ \sum_{k = i +1}^{n - 1}E_k - 1\)</span>​​​ 即 <span class="math inline">\(E_i = \sum_{k = i + 1}^{n - 1} E_k -1\)</span>​</li></ul><p>即<span class="math inline">\(E_i\)</span>可以由<span class="math inline">\(E_k\)</span>表出，<span class="math inline">\(k\in [i + 1, n - 1]\)</span></p><p>观察奇数偶数假设</p><ul><li>当<span class="math inline">\(E_i = \sum_{k = i + 1}^{n - 1}E_k\)</span>时，<span class="math inline">\(\sum_{k = i}^{n - 1}E_k =E_i + \sum_{k = i + 1}^{n-1}E_k = 2 \sum_{k = i +1}^{n-1}E_k\)</span>，故偶数假设成立</li><li>当<span class="math inline">\(E_i = \sum_{k = i + 1}^{n - 1} E_k -1\)</span>​​时，<span class="math inline">\(\sum_{k = i}^{n - 1}E_k = E_i+ \sum_{k = i + 1}^{n-1}E_k -1= 2 \sum_{k = i + 1}^{n-1}E_k-1\)</span>​​，故奇数假设成立</li></ul><h4 id="局部最优">局部最优</h4><p>对于<span class="math inline">\(i \in [0, n -1)\)</span>，将<span class="math inline">\(E_{n-1}\)</span>和<span class="math inline">\(i\)</span>看做自变量，<span class="math inline">\(E_i\)</span>看做因变量</p><p>可得函数关系： <span class="math display">\[E_i = f(E_{n-1}, i) = \min\{2e_i, \sum_{k = i + 1}^{n-1}E_k - 1, \sum_{k= i + 1}^{n-1}E_k\} \ge e_i\]</span> 如果控制<span class="math inline">\(E_{n-1}\)</span>​​的量，使得每只猴子实际能拿的最多的香蕉的数量最少，则认为整体香蕉的消耗量最少，即<strong>局部最优等于全局最优</strong>。</p><p>即对于给定<span class="math inline">\(i\)</span>​，求解<span class="math inline">\(E_{n-1}\)</span> <span class="math display">\[{\operatorname {arg\,min} }\,f(E_{n-1}, i):=\{E_{n-1}\mid E_{n-1} \gee_{n-1}:f(E_{n-1})\geq e_i\}\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对SCU网络服务安全性的第一次探索</title>
    <link href="/article/a44f/"/>
    <url>/article/a44f/</url>
    
    <content type="html"><![CDATA[<h1 id="对川大疫情防控每日报系统的探索">对【川大疫情防控每日报系统】的探索</h1><h2 id="前言">前言</h2><p>本文中的数据皆由合理/合法途径获取，旨在课业之余找点乐趣，别无其他。</p><h2 id="api">API</h2><h3 id="百度地图api">百度地图API</h3><blockquote><p>这里指百度地图的逆地理编码服务，下文中的<code>ak</code>为scu提供的</p></blockquote><h4 id="url">URL</h4><p>[<strong>GET</strong>]https://api.map.baidu.com/reverse_geocoding/v3/</p><h4 id="query-params">Query Params</h4><table><thead><tr><th>键</th><th>值</th><th>释义</th></tr></thead><tbody><tr><td>output</td><td>json</td><td>响应数据格式</td></tr><tr><td>coordtype</td><td>wgs84ll</td><td>坐标系统</td></tr><tr><td>ak</td><td>0hYGiH3Ob5ZhV0eWzrGVXCD3bEdBCi6L</td><td>access_key，使用scu自带的</td></tr><tr><td>location</td><td>&lt;经度&gt;,&lt;纬度&gt;</td><td>经纬度（float）</td></tr></tbody></table><h4 id="response-example">Response / Example</h4><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"status"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"result"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"location"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>            <span class="hljs-attr">"lng"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">104.0790496319792</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"lat"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.641844458412959</span><br>        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"formatted_address"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川省成都市武侯区一环路南2段-11号-附25号"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"business"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"跳伞塔,磨子桥,科华北路"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"addressComponent"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>            <span class="hljs-attr">"country"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"中国"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"country_code"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"country_code_iso"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"CHN"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"country_code_iso2"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"CN"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"province"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川省"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"city"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"成都市"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"city_level"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"district"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"武侯区"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"town"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"town_code"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"adcode"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"510107"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"street"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"一环路"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"street_number"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"南2段-11号-附25号"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"direction"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"附近"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"distance"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"21"</span><br>        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"pois"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"roads"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"poiRegions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"sematic_description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"cityCode"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">75</span><br>    <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><h3 id="疫情填报数据提交">疫情填报数据提交</h3><h4 id="url-1">URL</h4><p>[<strong>POST</strong>]https://wfw.scu.edu.cn/ncov/wap/default/save</p><h4 id="data-form">Data Form</h4><blockquote><p>以下表单内容仅由我个人信息得到，不一定囊括全部内容，且仅在2021-10-12与未来的一段时间内有效</p></blockquote><table><thead><tr><th>键</th><th>类型</th><th>默认值</th><th>释义</th></tr></thead><tbody><tr><td>zgfxdq</td><td>int</td><td>"0"</td><td>是否在中高风险地区</td></tr><tr><td>mjry</td><td>int</td><td>"0"</td><td>是否接触密接人员</td></tr><tr><td>csmjry</td><td>Int</td><td>"0"</td><td>近14日内本人/共同居住者是否去过疫情发生场所</td></tr><tr><td>szxqmc</td><td>string</td><td>""</td><td>所在校区名称，从"江安校区"、"望江校区"与"华西校区"中选择</td></tr><tr><td>sfjzxgym</td><td>int</td><td>"0"</td><td>是否接种新冠疫苗，"0"或"1"</td></tr><tr><td>jzxgymrq</td><td>string</td><td>""</td><td>接种第一剂新冠疫苗日期，日期格式：%Y-%m-%d</td></tr><tr><td>sfjzdezxgym</td><td>int</td><td>"0"</td><td>是否接种第二剂新冠疫苗，"0"或"1"</td></tr><tr><td>jzdezxgymrq</td><td>string</td><td>""</td><td>接种第二剂新冠疫苗日期，日期格式：%Y-%m-%d</td></tr><tr><td>tw</td><td>int</td><td>"1"</td><td>体温范围（实际表单上的选项编号），"2"和"3"为正常</td></tr><tr><td>sfcxtz</td><td>int</td><td>"0"</td><td>是否出现发热等症状，"0"或"1"</td></tr><tr><td>sfyyjc</td><td>int</td><td>"0"</td><td>是否前往医院做过检查，如果sfcxtz为"1"需填写</td></tr><tr><td>jcjgqr</td><td>int</td><td>"0"</td><td>检查结果，如果sfyyjc为"1"需填写。"1" =&gt; 疑似感染; "2" =&gt;确认感染; "3" =&gt; 其他</td></tr><tr><td>jcjg</td><td>string</td><td>""</td><td>检查结果详细描述</td></tr><tr><td>sfjcbh</td><td>int</td><td>"0"</td><td>是否接触无症状感染或疑似感染人群，"0"或"1"</td></tr><tr><td>jcbhlx</td><td>int</td><td>"0"</td><td>接触人群类型，如果sfjcbh为"1"需填写，"1" =&gt; 疑似; "2" =&gt;确诊</td></tr><tr><td>jcbhrq</td><td>string</td><td>""</td><td>接触时间，如果sfjcbh为"1"需填写，日期格式：%Y-%m-%d</td></tr><tr><td>sfcxzysx</td><td>int</td><td>"0"</td><td>是否有疫情相关的情况，"0"或"1"</td></tr><tr><td>qksm</td><td>string</td><td>""</td><td>情况说明，如果sfcxzysx为"1"需填写</td></tr><tr><td>remark</td><td>string</td><td>""</td><td>其他信息</td></tr><tr><td>sfzx</td><td>int</td><td>"1"</td><td>是否在校</td></tr><tr><td>fxyy</td><td>string</td><td>""</td><td>返校原因，sfxz为"1"时填写</td></tr><tr><td>bzxyy</td><td>string</td><td>""</td><td>不在校原因，sfzx为"0"时填写</td></tr><tr><td>sfjcwhry</td><td>int</td><td>"0"</td><td>是否接触武汉人员</td></tr><tr><td>sfjchbry</td><td>int</td><td>"0"</td><td>是否接触河北人员</td></tr><tr><td>sfcyglq</td><td>int</td><td>"0"</td><td>是否处于观察期</td></tr><tr><td>gllx</td><td>int</td><td>"0"</td><td>观察场所（实际表单上的选项编号），如果sfcyglq为"1"需填写</td></tr><tr><td>glksrq</td><td>string</td><td>"0"</td><td>观察开始时间，日期格式：%Y-%m-%d</td></tr><tr><td>ismoved</td><td>int</td><td>"0"</td><td>所在区域是否变化</td></tr><tr><td>bztcyy</td><td>int</td><td>"0"</td><td>不在同一城市的原因（实际表单上的选项编号），ismoved为"1"时需填写</td></tr><tr><td>sftjhb</td><td>int</td><td>"0"</td><td>是否途径河北</td></tr><tr><td>sftjwh</td><td>int</td><td>"0"</td><td>是否途径武汉</td></tr><tr><td>szcs</td><td>string</td><td>""</td><td>所在城市，例："成都市"</td></tr><tr><td>szgj</td><td>string</td><td>""</td><td>所在国家，例："中国"</td></tr><tr><td>city</td><td>string</td><td>""</td><td>所在城市，例："成都市"</td></tr><tr><td>province</td><td>string</td><td>""</td><td>所在省，例："四川省"</td></tr><tr><td>area</td><td>string</td><td>""</td><td>所在地区，例："四川省 成都市 武侯区"</td></tr><tr><td>address</td><td>string</td><td>""</td><td>具体所在地点，例："四川省成都市武侯区望江路街道四川大学四川大学望江校区研究生院"</td></tr><tr><td>date</td><td>string</td><td>""</td><td>今日日期，日期格式：%Y%m%d</td></tr><tr><td>created</td><td>int</td><td>0</td><td>表单创建的时间戳</td></tr><tr><td>uid</td><td>int</td><td>0</td><td>用户唯一标识</td></tr><tr><td>id</td><td>int</td><td>0</td><td>当前表单的标识</td></tr><tr><td>geo_api_info</td><td>json/string</td><td>""</td><td>地理位置的详细信息，通过百度地图API获取</td></tr></tbody></table><h4 id="response-example-1">Response / Example</h4><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"zgfxdq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"mjry"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"csmjry"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"szxqmc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"望江校区"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfjzxgym"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jzxgymrq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2021-xx-xx"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfjzdezxgym"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jzdezxgymrq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2021-xx-xx"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"tw"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfcxtz"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfjcbh"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfcxzysx"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"qksm"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfyyjc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jcjgqr"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"remark"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"address"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川省成都市武侯区望江路街道四川大学四川大学望江校区研究生院"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"geo_api_info"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"{...}"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"area"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川省 成都市 武侯区"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"province"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川省"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"city"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"成都市"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfzx"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfjcwhry"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfjchbry"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfcyglq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"gllx"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"glksrq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jcbhlx"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jcbhrq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"bztcyy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sftjhb"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sftjwh"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"szcs"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"szgj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"bzxyy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jcjg"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"hsjcrq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"hsjcdd"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"hsjcjg"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"date"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"20211011"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"uid"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"2134xxx"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"created"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1633881623</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jcqzrq"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfjcqz"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"szsqsfybl"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfsqhzjkk"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sqhzjkkys"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfygtjzzfj"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"gtjzzfjsj"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"fxyy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"开学返校"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4365</span>xxxx<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"gwszdd"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sfyqjzgc"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jrsfqzys"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"jrsfqzfy"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="uid与id的获取"><code>uid</code>与<code>id</code>的获取</h2><p>从以上表单数据可以看出，<code>uid</code>为用户的唯一标识，我已测试过多次，对于同一用户的不同次提交，该字段未有变化。</p><p>而<code>id</code>根据我的猜测，可能是指表单创建的序号，从1开始自增的编号。</p><p>该猜测还在测试中。</p><h2 id="一份可用的geo_api_info">一份可用的<code>geo_api_info</code></h2><p>对于川大望江校区的学生，这里有一份整理好可用的<code>geo_api_info</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"complete"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"position"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"Q"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.630839301216</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"R"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">104.079966362848</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"lng"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">104.07997</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"lat"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.630839</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"location_type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ip"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Get ipLocation success.Get address success."</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"accuracy"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"isConverted"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"status"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"addressComponent"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"citycode"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"028"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"adcode"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"510107"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"businessAreas"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">{</span><br>                <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"跳伞塔"</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"510107"</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"location"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>                    <span class="hljs-attr">"Q"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.636149</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">"R"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">104.071224</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">"lng"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">104.071224</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">"lat"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.636149</span><br>                <span class="hljs-punctuation">}</span><br>            <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">{</span><br>                <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"小天竺"</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"510107"</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">"location"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>                    <span class="hljs-attr">"Q"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.639354</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">"R"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">104.068942</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">"lng"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">104.068942</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">"lat"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.639354</span><br>                <span class="hljs-punctuation">}</span><br>            <span class="hljs-punctuation">}</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"neighborhoodType"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"科教文化服务;学校;高等院校"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"neighborhood"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川大学"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"building"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"buildingType"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"street"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"科华北路"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"streetNumber"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"194号"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"country"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"中国"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"province"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川省"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"city"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"成都市"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"district"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"武侯区"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"township"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"望江路街道"</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"formattedAddress"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"四川省成都市武侯区望江路街道四川大学四川大学望江校区研究生院"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"roads"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"crosses"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"pois"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"info"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"SUCCESS"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>需要注意的是：</p><ul><li><code>province</code> =<code>geo_api_info.addressComponent.province</code></li><li><code>city</code>=<code>geo_api_info.addressComponent.city</code></li><li><code>address</code>=<code>geo_api_info.province</code>+ ' ' +<code>geo_api_info.city</code>+ ' ' +<code>geo_api_info.addressComponent.district</code></li></ul><h2 id="一个猜想">一个猜想</h2><p>对于现有的表单设计，只用了<code>uid</code>一项字段来唯一标识一名用户，而且根据我的<code>uid</code>内容，可以认为所有<code>uid</code>的内容都为较小的整形数。也就是说，也许可以暴力的遍历所有小整数，从而获取有效的<code>uid</code>。</p><h2 id="自动打卡脚本示例">自动打卡脚本示例</h2><p><code>cookies_str</code>从https://wfw.scu.edu.cn/ncov/wap/default/index获取</p><blockquote><p>以下内容仅作参考</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-comment"># handle cookies and init session</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_session</span>(<span class="hljs-params">cookies_str: <span class="hljs-built_in">str</span></span>) -&gt; requests.Session():<br>    cookies_dict = {}<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> cookies_str.split(<span class="hljs-string">';'</span>):<br>        key, value = line.split(<span class="hljs-string">'='</span>, <span class="hljs-number">1</span>)<br>        cookies_dict[key] = value<br><br>    session = requests.session()<br>    cookiesJar = requests.utils.cookiejar_from_dict(<br>        cookies_dict,<br>        cookiejar=<span class="hljs-literal">None</span>, <br>        overwrite=<span class="hljs-literal">True</span><br>    )<br>    session.cookies = cookiesJar<br>    <span class="hljs-keyword">return</span> session<br><br><br><span class="hljs-comment"># get default json with uid and id</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_default_json</span>(<span class="hljs-params">session: requests.Session</span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    url = <span class="hljs-string">'https://wfw.scu.edu.cn/ncov/wap/default/index'</span><br><br>    resp = session.get(url=url)<br><br>    <span class="hljs-keyword">if</span> resp.status_code != <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'[ERROR]'</span>, resp.status_code)<br>        exit()<br><br>    html = resp.content.decode(<span class="hljs-string">'utf-8'</span>)<br><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">'var def =(.*);!?'</span>)<br><br>    res = re.findall(pattern, html)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'[ERROR] not found'</span>)<br>        exit()<br><br>    res_json = json.loads(res[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> session, res_json<br><br><br><span class="hljs-comment"># load default geo_api_info</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_json</span>(<span class="hljs-params">res_json: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'geo_api_info.json'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> ifile:<br>        res_json[<span class="hljs-string">'geo_api_info'</span>] = json.load(ifile)<br><br>    res_json[<span class="hljs-string">'province'</span>] = res_json[<span class="hljs-string">'geo_api_info'</span>][<span class="hljs-string">'addressComponent'</span>][<span class="hljs-string">'province'</span>]<br>    res_json[<span class="hljs-string">'city'</span>] = res_json[<span class="hljs-string">'geo_api_info'</span>][<span class="hljs-string">'addressComponent'</span>][<span class="hljs-string">'city'</span>]<br>    res_json[<span class="hljs-string">'address'</span>] = res_json[<span class="hljs-string">'geo_api_info'</span>][<span class="hljs-string">'formattedAddress'</span>]<br>    res_json[<span class="hljs-string">'area'</span>] = <span class="hljs-string">' '</span>.join([<br>        res_json[<span class="hljs-string">'province'</span>],<br>        res_json[<span class="hljs-string">'city'</span>],<br>        res_json[<span class="hljs-string">'geo_api_info'</span>][<span class="hljs-string">'addressComponent'</span>][<span class="hljs-string">'district'</span>]<br>    ])<br>    res_json[<span class="hljs-string">'date'</span>] = datetime.datetime.now().strftime(<span class="hljs-string">"%Y%m%d"</span>)<br>    res_json[<span class="hljs-string">'created'</span>] = <span class="hljs-built_in">int</span>(time.time())<br>    res_json[<span class="hljs-string">'ismoved'</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> res_json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_json</span>(<span class="hljs-params">session: requests.Session, res_json: <span class="hljs-built_in">dict</span></span>):<br>    url = <span class="hljs-string">'https://wfw.scu.edu.cn/ncov/wap/default/save'</span><br>    resp = session.post(url=url, data=res_json)<br>    <span class="hljs-built_in">print</span>(resp.status_code, resp.content.decode(<span class="hljs-string">'utf-8'</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    cookies_str = <span class="hljs-string">'eai-sess=xxx; UUkey=xxx'</span><br>    session = init_session(cookies_str)<br>    session, res_json = get_default_json(session)<br>    res_json = modify_json(res_json)<br>    post_json(session, res_json)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>SCU相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快速反平方根算法</title>
    <link href="/article/39b0/"/>
    <url>/article/39b0/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是反平方根">什么是反平方根</h2><p>反平方根即平方根的倒数：</p><p><span class="math display">\[y = \frac{1} {\sqrt x}\]</span></p><p>该计算表达式在图形学中的向量正规化中经常用到，对于大规模场景的法线向量计算，如果仅使用</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> <span class="hljs-title function_">rsqrt</span><span class="hljs-params">(<span class="hljs-type">float</span> number)</span><br>{<br><span class="hljs-type">float</span> y = <span class="hljs-number">1</span> / <span class="hljs-built_in">sqrt</span>(number);<br>  <span class="hljs-keyword">return</span> y;<br>}<br></code></pre></td></tr></tbody></table></figure><p>就显得非常笨拙。</p><p>因为在计算机中，一般加法与乘法都是经过硬件优化的，计算速度会很快，求平方根则不同。</p><p>为了更快的计算一个浮点数的平方根的倒数，一个更快更奇怪的算法在《<a href="https://zh.wikipedia.org/wiki/%E9%9B%B7%E7%A5%9E%E4%B9%8B%E9%94%A4III%E7%AB%9E%E6%8A%80%E5%9C%BA">雷神之锤3</a>》中被提出（可能更早），该算法也成为了<strong>MagicNumber</strong>的典型案例。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> <span class="hljs-title function_">Q_rsqrt</span><span class="hljs-params">( <span class="hljs-type">float</span> number )</span><br>{<br><span class="hljs-type">long</span> i;<br><span class="hljs-type">float</span> x2, y;<br><span class="hljs-type">const</span> <span class="hljs-type">float</span> threehalfs = <span class="hljs-number">1.5F</span>;<br><br>x2 = number * <span class="hljs-number">0.5F</span>;<br>y  = number;<br>i  = * ( <span class="hljs-type">long</span> * ) &amp;y;                       <span class="hljs-comment">// evil floating point bit level hacking</span><br>i  = <span class="hljs-number">0x5f3759df</span> - ( i &gt;&gt; <span class="hljs-number">1</span> );               <span class="hljs-comment">// what the fuck?</span><br>y  = * ( <span class="hljs-type">float</span> * ) &amp;i;<br>y  = y * ( threehalfs - ( x2 * y * y ) );   <span class="hljs-comment">// 1st iteration</span><br><span class="hljs-comment">//y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed</span><br><br><span class="hljs-keyword">return</span> y;<br>}<br></code></pre></td></tr></tbody></table></figure><p>要理解该算法是如何工作的，我们需要掌握一些内容：</p><ol type="1"><li>浮点数在计算机内存中的存储方式</li><li>c语言中的类型转换与重解释</li><li>牛顿迭代法（求函数的近似零点）</li></ol><h2 id="ieee-754">IEEE 754</h2><p>在<a href="https://zh.wikipedia.org/wiki/IEEE_754">IEEE754</a>标准中，定义了浮点数在计算机中的存储方式：</p><p>以32位浮点数为例（在c语言中为<code>float</code>）</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Float_example.svg/2880px-Float_example.svg.png"></p><p>其中32位bit被分割成了3部分（科学计数法）：</p><ol type="1"><li><strong>Sign</strong> 符号位，0为正数，1为负数。</li><li><strong>Exponent</strong> 指数位，简写为<span class="math inline">\(E\)</span>，一共包含8位bit。</li><li><strong>Fraction</strong> 或 <strong>Mantissa</strong>尾数位，简写为<span class="math inline">\(M\)</span>，一共包含23bit。</li></ol><p>对于求反平方根的算法，符号位可以不进行讨论，因为输入的浮点数只有为正该算法才在实数域中有意义。</p><p>对于指数位<span class="math inline">\(E\)</span>（移码），可以表示-126到127（-127和128被用作特殊值处理），实际表示的2的指数应该是<span class="math inline">\(E-127\)</span>。</p><p>对于尾数位<span class="math inline">\(M\)</span>，表示的是科学计数法中，尾数的<strong>小数点后</strong>的数字，因为<strong>在二进制的科学计数法表示里，尾数的小数点前的数字必为1</strong>。</p><p>那么，根据IEEE 754的定义，一个浮点数（32位）F就可以表示为： <span class="math display">\[F = (-1)^S \cdot 2^{E - 127} \cdot (1 + 2^{-23}M)\]</span> 在本算法中，符号位可以认为恒0，即可化简为： <span class="math display">\[F = 2^{E-127}\cdot (1+2^{-23}M)\]</span>同时，如果我们将该32位看作是<code>int</code>或<code>long</code>（在c语言中二者可以看做同一类型），那其对应的整形数<span class="math inline">\(L\)</span>为： <span class="math display">\[L = 2^{23}E + M\]</span> 对于同样的32位bit，我们可以将其解释为浮点数<span class="math inline">\(F\)</span>，也可以解释为整数<span class="math inline">\(L\)</span>。那么<span class="math inline">\(F\)</span>和<span class="math inline">\(L\)</span>之间有没有数量上的关系？</p><h2 id="l与f的关系"><span class="math inline">\(L\)</span>与<span class="math inline">\(F\)</span>的关系</h2><p>对于<span class="math inline">\(F\)</span>的表达式，我们可以进行这样的运算： <span class="math display">\[\begin{align}F=&amp; 2^{E-127}\cdot(1+2^{-23}M) \\[1ex]\log_2(F)=&amp;\log_2(2^{E-127} \cdot (1+2^{-23}M)) \\[1ex]\log_2(F)=&amp;\log_2(2^{E-127}) + \log_2(1+2^{-23}M)\\[1ex]\log_2(F)=&amp;E-127 + \log_2(1+2^{-23}M)\end{align}\]</span> 观察函数<span class="math inline">\(f(x)=x\)</span>与<span class="math inline">\(g(x)=\log_2(x+1)\)</span></p><p><img src="https://imgbed.scubot.com/image/image-20211010131819724.png" alt="函数图像" style="zoom:50%;"></p><p>当<span class="math inline">\(0\le x \le 1\)</span>时，<span class="math inline">\(f(x)\approx g(x)\)</span>即可表示为<span class="math inline">\(f(x) = g(x) + \mu\)</span>，其中<span class="math inline">\(\mu\)</span>为误差。</p><p>故<span class="math inline">\(\log_2(1+2^{-23}M)\approx2^{-23}M +\mu\)</span>，即： <span class="math display">\[\begin{align}\log_2(F) =&amp; E - 127 + \log_2(1 + 2^{-23}M) \\[1ex]\log_2(F) =&amp; E - 127 + 2^{-23}M + \mu \\[1ex]\log_2(F) =&amp; 2^{-23}(2^{23}E + M) + \mu - 127\end{align}\]</span> 又因为<span class="math inline">\(L=2^{23}E + M\)</span>，得<span class="math display">\[\log_2(F) = 2^{-23}L + \mu - 127\]</span> 至此，我们得到了对于同一32位二进制串的浮点数解释<span class="math inline">\(F\)</span>与整数解释<span class="math inline">\(L\)</span>之间的<strong>近似</strong>数量关系。</p><h2 id="c语言中的类型转换与重解释">c语言中的类型转换与重解释</h2><blockquote><p>Type punning (类型双关):c++中可以使用<code>reinterpret_cast</code>实现双关</p></blockquote><p>在c语言中，如果我们需要将32位浮点数<code>float</code>转为<code>long</code>（或<code>int</code>），我们可以显示得：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> num_float = <span class="hljs-number">3.3</span>;<br><span class="hljs-type">long</span> num_long = (<span class="hljs-type">long</span>)num_float;<br></code></pre></td></tr></tbody></table></figure><p>得到的结果<code>num_long</code>为3。</p><p>但是如果我们更底层的，对于IEEE754中提到的，我想把32位浮点数，转换成<strong>32bit都相同的整形</strong>，该如何做呢？</p><p>在程序运行中，变量的数据一般是存储在内存中，在c语言里可以通过<code>&amp;</code>来获取变量的地址。而<code>(long *) 地址</code>即可使用<code>long</code>的指针指向该地址，再使用<code>*</code>获取该指针的内容，即可实现了在c语言里使用指针重解释内存中的数据类型。</p><p>即<code>Q_rsqrt</code>函数中的<code>i  = * ( long * ) &amp;y;</code>，<code>y</code>本为<code>float</code>类型，使用该方法可以将其<strong>bit不变得</strong>解释为<code>long</code>类型的<code>i</code>变量。</p><h2 id="求解反平方根的近似">求解反平方根的近似</h2><p>在求解之前，我们先回顾上面的结论： <span class="math display">\[\begin{align}\log_2(F) = 2^{-23}L + \mu - 127\end{align}\]</span> 其中<span class="math inline">\(F\)</span>为32位bit的浮点数解释，<span class="math inline">\(L\)</span>为32位bit的整形解释。而在c语言中使用指针可以实现<span class="math inline">\(F\)</span>与<span class="math inline">\(L\)</span>的转换，更重要的是，转换是极快的。</p><p>至此，我们可以明确快速平方根的算法的目的：</p><ol type="1"><li>求解有效32位浮点数的平方根的倒数</li><li>尽可能的只使用<strong>加法</strong>、<strong>乘法</strong>与<strong>位运算</strong></li><li>时间复杂度为常数</li><li>可以有一些误差（计算机存储浮点数本身就有误差）</li></ol><blockquote><p>值得注意的是，浮点数本身不支持位运算</p></blockquote><hr><p>回到一开始的问题，求解：<span class="math inline">\(y=1/\sqrtx\)</span></p><p>问题可以表示为： <span class="math display">\[F_y = 1 / \sqrt{F_x}\]</span></p><p><span class="math display">\[\begin{align}F_y =&amp; 1 / \sqrt{F_x} \\[1ex]\log_2(F_y) =&amp; \log_2(1/\sqrt{F_x}) \\[1ex]\log_2(F_y) =&amp; \log_2(F_x^{-1/2}) \\[1ex]\log_2(F_y) =&amp; -\frac{1}{2}\log_2(F_x)\end{align}\]</span></p><p>将<span class="math inline">\(\log_2(F) = 2^{23}L + \mu -127\)</span>带入上式： <span class="math display">\[\begin{align}\log_2(F_y) =&amp; -\frac{1}{2}\log_2(F_x) \\[1ex]2^{-23}L_y + \mu - 127 =&amp; -\frac{1}{2}(2^{-23}L_x + \mu - 127)\\[1ex]2^{-23}L_y =&amp; -\frac{1}{2}(2^{-23}L_x + 3\cdot(\mu - 127))\\[1ex]L_y=&amp; \frac{3}{2}\cdot2^{23}\cdot(127 - \mu) -\frac{1}{2}L_x\end{align}\]</span> 对于上式结果：<span class="math inline">\(L_y=\frac{3}{2}\cdot2^{23} \cdot (127 - \mu) - \frac{1}{2} L_x\)</span></p><blockquote><p><span class="math inline">\(F_x\)</span>表示32位bit的<span class="math inline">\(x\)</span>的浮点数表示，<span class="math inline">\(L_x\)</span>表示32位bit的<span class="math inline">\(x\)</span>的整形表示。在c语言中，二者是可以互相转换的。</p></blockquote><p><strong>前半部分</strong>：<span class="math inline">\(\frac{3}{2}\cdot 2^{23}\cdot (127-\mu) =\mathrm{0x5f3759df}\)</span>，在<span class="math inline">\(\mu=0.04505\)</span>时成立，更通用的，可以使<span class="math inline">\(\mu=0.0430\)</span>。</p><p><strong>后半部分</strong>：<span class="math inline">\(-\frac{1}{2}L_x\)</span>在c语言中可以使用位操作实现：<code>-(Lx &gt;&gt; 1)</code></p><p>故使用c语言实现该表达式为：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> Ly = <span class="hljs-number">0x5f3759df</span> - (Lx &gt;&gt; <span class="hljs-number">1</span>);<br></code></pre></td></tr></tbody></table></figure><p>即原算法实现中的内容。</p><p>通过该公式可以求出<span class="math inline">\(L_y\)</span>，再在c语言中通过<code>Fy = * (float *) &amp;Ly</code>即可求得<span class="math inline">\(F_y\)</span>。</p><h2 id="牛顿迭代">牛顿迭代</h2><p>在上述推导中，我们用到了<span class="math inline">\(\log_2(x+1)\approx x + \mu\)</span>。</p><p>一般情况下<span class="math inline">\(\mu=0.0430\)</span>，该算法实现中取了<span class="math inline">\(\mu=0.04505\)</span>。都是为了使用<span class="math inline">\(x+\mu\)</span>逼近<span class="math inline">\(\log_x(x+1)\)</span>。</p><p>虽然误差总是不可避免，为了减少这种逻辑上带来的误差，我们需要将误差尽可能的减少。</p><p><strong>牛顿迭代法</strong>是一种用来近似函数零点的方法：</p><figure><img src="https://imgbed.scubot.com/image/image-20211010141648206.png" alt="牛顿迭代"><figcaption aria-hidden="true">牛顿迭代</figcaption></figure><p>对于某复杂函数，我们无法推导出其零点的表达式，或者零点的表达式不利于计算机的计算，我们就可以使用牛顿法来近似得到零点。</p><p>牛顿法的核心思想是：<strong>切线是曲线的线性逼近</strong></p><p>对于某一可导函数，我可以取其定义域内的任意<span class="math inline">\(x\)</span>：</p><ol type="1"><li>在函数上对应<span class="math inline">\(x\)</span>的位置求一阶导数，即函数在<span class="math inline">\(x\)</span>位置的切线。</li><li>该切线与X轴最多有一个交点，如果有交点的话，我们就以该交点为<span class="math inline">\(x\)</span>重复求切线，求切线与X轴交点的这个过程。</li></ol><p><strong>每次求的切线与X轴的交点都更加逼近函数的真正零点</strong>。</p><p>根据上图，容易得到： <span class="math display">\[\begin{align}\Delta x =&amp; \frac{\Delta y}{\frac{\Delta y}{\Delta x}} \\[1ex]\Delta x =&amp; \frac{f(x)}{f^\prime(x)} \\[1ex]x_{new} =&amp; x - \frac{f(x)}{f^\prime(x)}\end{align}\]</span> 对于牛顿法求零点，我们需要知道</p><ol type="1"><li>函数的表达式</li><li>初始迭代值</li></ol><p>所以对于本算法，我们需要构造<span class="math inline">\(y\)</span>的函数，使得其零点为<span class="math inline">\(y=\frac{1}{\sqrt x}\)</span>。</p><p>经过一些变换，我们就可以写出该函数： <span class="math display">\[f(y) = \frac{1}{y^2} - x\]</span> 约束<span class="math inline">\(y&gt;0\)</span>，易得：<span class="math inline">\(f^\prime(y) = -2 \cdot y^{-3}\)</span></p><p>使用牛顿法的前提：函数表达式我们有了，初始迭代值我们也在上面求出来了<span class="math inline">\(F_y\)</span>。</p><p>那就可以开始进行牛顿迭代的推导： <span class="math display">\[\begin{align}y_{new} =&amp; y - \frac{f(y)}{f^\prime(y)} \\[1ex]y_{new} =&amp; y - \frac{y^{-2} - x}{-2 \cdot y^{-3}} \\[1ex]y_{new} =&amp; y + \frac{1}{2} (y - xy^3) \\[1ex]y_{new} =&amp; y(\frac{3}{2} - \frac{1}{2}xy^2)\end{align}\]</span> 我们可以明确上式中：<span class="math inline">\(y\)</span>是迭代的值，初识迭代值为<span class="math inline">\(F_y\)</span>，<span class="math inline">\(x\)</span>为<span class="math inline">\(y=\frac{1}{\sqrt x}\)</span>中的<span class="math inline">\(x\)</span>。</p><p>那么就很容易可以转换成c语言中的：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">Fy = Fy * (<span class="hljs-number">1.5</span> - <span class="hljs-number">0.5</span> * x * Fy * Fy);<br></code></pre></td></tr></tbody></table></figure><p>对应源代码中的：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">y  = y * ( threehalfs - ( x2 * y * y ) );<br></code></pre></td></tr></tbody></table></figure><p>在该算法过程中，进行一次迭代即可满足精度的需求。</p><p>现在我们就可以把原码进行完整的解释：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> <span class="hljs-title function_">Q_rsqrt</span><span class="hljs-params">( <span class="hljs-type">float</span> number )</span><br>{<br><span class="hljs-type">long</span> i;<br><span class="hljs-type">float</span> x2, y;<br><span class="hljs-type">const</span> <span class="hljs-type">float</span> threehalfs = <span class="hljs-number">1.5F</span>;   <span class="hljs-comment">// 牛顿迭代中的1.5</span><br><br>x2 = number * <span class="hljs-number">0.5F</span>;<br>y  = number;<br>i  = * ( <span class="hljs-type">long</span> * ) &amp;y;                      <span class="hljs-comment">// 将32bit浮点数y重新解释为32bit整形i</span><br>i  = <span class="hljs-number">0x5f3759df</span> - ( i &gt;&gt; <span class="hljs-number">1</span> );              <span class="hljs-comment">// 对i求反平方根的近似</span><br>y  = * ( <span class="hljs-type">float</span> * ) &amp;i;                      <span class="hljs-comment">// 把32bit整形i重新解释为32bit浮点数y</span><br>y  = y * ( threehalfs - ( x2 * y * y ) );  <span class="hljs-comment">// 第一次牛顿迭代</span><br><span class="hljs-comment">//y  = y * ( threehalfs - ( x2 * y * y ) );   // 第二次迭代，看起来不需要</span><br><br><span class="hljs-keyword">return</span> y;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="推广到double类型">推广到double类型</h2><p>以上的算法只针对32位浮点数<code>float</code>，对于64位浮点数<code>double</code>我们也可以应用该思想设计出快速的反平方根算法。</p><p>在<code>double</code>类型的64位bit中： 1. 符号位占1bit 2. 指数位<span class="math inline">\(E\)</span> 占11bit 3. 尾数位<span class="math inline">\(M\)</span> 占52bit</p><p>有了这些数据，我们就可以写出c语言中的函数实现：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> <span class="hljs-title function_">Q_rsqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> number)</span><br>{<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> i;<br><span class="hljs-type">double</span> x2, y;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> threehalfs = <span class="hljs-number">1.5F</span>;   <span class="hljs-comment">// 牛顿迭代中的1.5</span><br><br>x2 = number * <span class="hljs-number">0.5F</span>;<br>y  = number;<br>i  = * ( <span class="hljs-type">long</span> <span class="hljs-type">long</span> * ) &amp;y;                       <span class="hljs-comment">// 将64bit浮点数y重新解释为64bit整形i</span><br>i  = <span class="hljs-number">0x5fdd3020c49ba400</span> - ( i &gt;&gt; <span class="hljs-number">1</span> );               <span class="hljs-comment">// 对i求反平方根的近似</span><br>y  = * ( <span class="hljs-type">double</span> * ) &amp;i;                      <span class="hljs-comment">// 把64bit整形i重新解释为64bit浮点数y</span><br>y  = y * ( threehalfs - ( x2 * y * y ) );   <span class="hljs-comment">// 第一次牛顿迭代</span><br><span class="hljs-comment">//y  = y * ( threehalfs - ( x2 * y * y ) );   // 第二次迭代，看起来不需要</span><br><br><span class="hljs-keyword">return</span> y;<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>其中<code>0x5fdd3020c49ba400</code>根据<span class="math inline">\(\mu\)</span>的实际取值不同而不同。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++-架构之路</title>
    <link href="/article/12ad/"/>
    <url>/article/12ad/</url>
    
    <content type="html"><![CDATA[<p>我的c++架构之路-1</p><span id="more"></span><h1 id="异步">异步</h1><h2 id="feature">feature</h2><p>当在一个线程中，创建了一个异步操作（asynchronousoperations）时，该异步操作会返回一个<code>feature</code>对象，可以通过其访问异步操作的状态和结果等。</p><p>创建异步操作一般有三种方式：<code>std::async</code>、<code>std::packaged_task</code>和<code>std::promise</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++小技巧-Lambda表达式</title>
    <link href="/article/808a/"/>
    <url>/article/808a/</url>
    
    <content type="html"><![CDATA[<p>由于最近项目中用到了C++ Lambda表达式的相关内容，在这里记录一下。</p><span id="more"></span><h2 id="什么是lambda表达式">什么是Lambda表达式</h2><p>我自己理解的是Lambda表达式就是不需要复杂逻辑的匿名函数，在很多高级语言中都有。</p><p>比如Python中：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>new_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-string">'new'</span> + <span class="hljs-built_in">str</span>(x), my_list))<br></code></pre></td></tr></tbody></table></figure><p>就可以在map中使用Lambda表达式使得程序更加简洁。</p><h2 id="c的lambda表达式">C++的Lambda表达式</h2><p>C++11提供了Lambda表达式的功能，完整声明的格式如下： </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">[capture_list] (params_list) <span class="hljs-keyword">mutable</span> exception -&gt; return_type { function_body }<br></code></pre></td></tr></tbody></table></figure><div class="note note-success">            <p>各项定义如下： -<code>capture_list</code>：捕获列表，用于捕获外部变量 -<code>params_list</code>：形参列表 -<code>mutable</code>：是否可以修改捕获的外部变量 -<code>exception</code>：异常设定 - <code>return_type</code>：返回类型 -<code>function_body</code>：函数体</p>          </div><p></p><p>这6部分中，除了<code>capture_list</code>和<code>function_body</code>，其他4部分都是可选的。</p><p>常见的情况有以下三种： -<code>[capture_list](params_list) -&gt; return_type { function_body }</code>- <code>[capture_list](params_list) { function_body }</code> &gt;省略返回类型，编译器可以根据规则推断出Lambda表达式的返回类型。 &gt;即如果Lambda表达式中出现return，则根据return的类型确定， &gt;如果没有return，则返回类型为void。 &gt; <strong>在项目中最常用</strong>- <code>[capture_list] { function_body }</code></p><h2 id="捕获外部变量-进阶说明">捕获外部变量-进阶说明</h2><p>在C++中，函数参数的传递方式有三种：值传递、引用传递和指针传递。</p><p>Lambda表达式的外部变量捕获方式有三种：值捕获、引用捕获和隐式捕获。</p><h3 id="值捕获">1.值捕获</h3><p>在<code>capture_list</code>中直接传入变量值，<span style="color: #519D9E; ">在Lambda表达式构建时，外部变量将通过值拷贝的方式传入，如果后面外部变量被修改，也不会影响Lambda表达式中的值</span></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> func = [val] { cout &lt;&lt; val &lt;&lt; endl; };<br>    val = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">func</span>(); <span class="hljs-comment">// 输出 0</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="引用捕获">2.引用捕获</h3><p>在外部变量名前加<code>&amp;</code>，使用引用捕获的变量，将会在Lambda表达式中与外部变量绑定。在表达式构造结束，该外部变量变化之后再调用Lambda表达式，这时会使用最新的外部变量对象。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> func = [&amp;val] { cout &lt;&lt; val &lt;&lt; endl; };<br>    val = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">func</span>(); <span class="hljs-comment">// 输出 1</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="隐式捕获">3.隐式捕获</h3><p>除了在<code>capture_list</code>中指定外界变量名之外，还可以用隐式捕获的办法，即让Lambda表达式自行推断需要哪些外部变量。隐式捕获具体有两种：- <code>[=]</code> 表示以值捕获的方式捕获外界变量 </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> func = [=] { cout &lt;&lt; val &lt;&lt; endl; };<br>    val = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">func</span>(); <span class="hljs-comment">// 输出 0</span><br>}<br></code></pre></td></tr></tbody></table></figure> -<code>[&amp;]</code> 表示以引用捕获的方式捕获外界变量 <figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> func = [&amp;] { cout &lt;&lt; val &lt;&lt; endl; };<br>    val = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">func</span>(); <span class="hljs-comment">// 输出 1</span><br>}<br></code></pre></td></tr></tbody></table></figure><p></p><h3 id="混合捕获">4.混合捕获</h3><p>C++11中的Lambda表达式支持将以上三种捕获方式混用，常见的情况如下：</p><table><thead><tr><th>捕获形式</th><th>说明</th></tr></thead><tbody><tr><td><code>[]</code></td><td>不捕获外部变量</td></tr><tr><td><code>[a, b, ...]</code></td><td>全部以值捕获捕捉</td></tr><tr><td><code>[this]</code></td><td>捕获<code>this</code>指针</td></tr><tr><td><code>[=]</code></td><td>值捕获所有外部变量</td></tr><tr><td><code>[&amp;]</code></td><td>引用捕获所有外部变量</td></tr><tr><td><code>[=, &amp;a]</code></td><td>变量<code>a</code>使用引用捕获，其他使用值捕获</td></tr><tr><td><code>[&amp;, a]</code></td><td>变量<code>a</code>使用值捕获，其他使用引用捕获</td></tr></tbody></table><h3 id="捕获外部变量并修改">捕获外部变量并修改</h3><p>当外部参数采用<strong>值捕获</strong>时，在<code>function_body</code>函数体内部无法修改捕获的外部变量值，会提示<code>read-only</code>。这时需要添加<code>mutable</code>关键字。 </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> func = [val]() <span class="hljs-keyword">mutable</span> { cout &lt;&lt; ++val &lt;&lt; endl; };<br>    <span class="hljs-built_in">func</span>(); <span class="hljs-comment">// 输出 1</span><br>    cout &lt;&lt; val &lt;&lt; endl; <span class="hljs-comment">// 输出 0</span><br>}<br></code></pre></td></tr></tbody></table></figure> <div class="note note-info">            <p>如果使用<strong>引用捕获</strong>，则不需要添加<code>mutable</code>关键字，在Lambda表达式中更改的内容会直接影响到外部变量。</p>          </div><p></p><h2 id="lambda表达式参数params_list的限制">Lambda表达式参数<code>params_list</code>的限制</h2><p>Lambda表达式的参数和普通函数的参数类似，不过有一些限制：</p><ol type="1"><li>参数列表中不能有默认参数</li><li>不支持可变参数，即用<code>...</code>表示的参数，不定个数。</li><li>所有参数必须有参数名</li></ol><h2 id="其他例子">其他例子</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-keyword">auto</span> funcA = [](<span class="hljs-type">int</span> x) -&gt; function&lt;<span class="hljs-built_in">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; { <span class="hljs-keyword">return</span> [=](<span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z) { <span class="hljs-built_in">return</span> (x + y) * z; }; };<br><br>    cout &lt;&lt; <span class="hljs-built_in">funcA</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>) &lt;&lt; endl; <span class="hljs-comment">// 输出 48      (2 + 4) * 8 = 48</span><br><br>    <span class="hljs-keyword">auto</span> funcB = [](<span class="hljs-type">const</span> function&lt;<span class="hljs-built_in">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt;&amp; func, <span class="hljs-type">int</span> valA, <span class="hljs-type">int</span> valB) { <span class="hljs-keyword">return</span> -<span class="hljs-built_in">func</span>(valA, valB); };<br><br>    cout &lt;&lt; <span class="hljs-built_in">funcB</span>(<span class="hljs-built_in">funcA</span>(<span class="hljs-number">3</span>), <span class="hljs-number">6</span>, <span class="hljs-number">9</span>) &lt;&lt; endl;  <span class="hljs-comment">// 输出 -81    -(2 + 6) * 9</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qqbot插件-闪照转发</title>
    <link href="/article/51135/"/>
    <url>/article/51135/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>该QQ机器人使用<a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a>和<a href="https://github.com/nonebot/nonebot">nonebot</a>框架。</p>          </div><p>利用改框架，可以实现破解闪照并转发到指定qq号的功能</p><span id="more"></span><h2 id="原理">原理</h2><p>qq的特殊消息都可以表示为CQ码(纪念原来的酷Q)，CQ码文档可以参考<a href="https://docs.go-cqhttp.org/guide/achieve.html">go-cqhttp文档</a>。</p><p>我们需要的闪照的CQ码是这样的格式： </p><figure class="highlight mel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">[CQ:<span class="hljs-keyword">image</span>,type=flash,<span class="hljs-keyword">file</span>=xxxx.<span class="hljs-keyword">image</span>]<br></code></pre></td></tr></tbody></table></figure>去掉<code>type=flash,</code>即可表示为正常的图片。<p></p><p>所以反闪照插件的功能思路就是：</p><ol type="1"><li>利用正则表达式：<code>\[CQ:image,type=flash,file=.*?\]</code>捕获Bot接收到的所有闪照CQ码</li><li>解析出发送者，所在群号以及CQ码的全部信息</li><li>将CQ码中的<code>type=flash,</code>去掉，再私聊转发给预设的qq号即可</li></ol><div class="note note-danger">            <p><code>NoneBot2</code>中提供了<code>on_regex</code>装饰器，可以直接正则监视所有满足条件的消息，</p><p>而NoneBot1并未提供类似<code>on_regex</code>的正则匹配装饰器，所以需要用<code>on_message</code>监听所有消息，再对消息进行正则过滤。</p><p>为了减少计算压力，只监听群聊中的消息即可。</p>          </div><h2 id="源码">源码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> nonebot <span class="hljs-keyword">import</span> get_bot<br><br>target_user = <span class="hljs-number">765892480</span><br><br>pattens = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r"\[CQ:image,type=flash,file=.*?\]"</span>)<br><br>bot = get_bot()<br><br><span class="hljs-meta">@bot.on_message(<span class="hljs-params"><span class="hljs-string">"group"</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">AntiFlashImage</span>(<span class="hljs-params">event</span>):<br>    raw_info = (<span class="hljs-keyword">await</span> bot.get_msg(message_id=event.message_id))<br>    raw_message = raw_info[<span class="hljs-string">"raw_message"</span>]<br>    <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(pattens, raw_message):<br>        image_ = raw_message.replace(<span class="hljs-string">'type=flash,'</span>, <span class="hljs-string">''</span>)<br>        new_message = (<br>            <span class="hljs-string">f"在群(<span class="hljs-subst">{raw_info[<span class="hljs-string">'group_id'</span>]}</span>)中捕获闪照\n"</span><br>            <span class="hljs-string">f"发送者：<span class="hljs-subst">{raw_info[<span class="hljs-string">'sender'</span>][<span class="hljs-string">'nickname'</span>]}</span>(<span class="hljs-subst">{raw_info[<span class="hljs-string">'sender'</span>][<span class="hljs-string">'user_id'</span>]}</span>)\n"</span><br>            <span class="hljs-string">f"<span class="hljs-subst">{image_}</span>"</span><br>        )<br>        <span class="hljs-keyword">await</span> bot.send_private_msg(user_id=target_user, message=new_message)<br><br></code></pre></td></tr></tbody></table></figure><h2 id="效果图">效果图</h2><blockquote><p>群聊发送闪图</p></blockquote><p><img src="https://imgbed.scubot.com/1617721464951.png"></p><blockquote><p>Bot私聊转发原图</p></blockquote><p><img src="https://imgbed.scubot.com/1617721489042.png"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qqbot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维记录</title>
    <link href="/article/7b14/"/>
    <url>/article/7b14/</url>
    
    <content type="html"><![CDATA[<p>用来记录我操作ubuntu系/windows服务器的一些需要注意的点<span id="more"></span></p><h2 id="版本">版本</h2><p>我一直用的是ubuntu的服务器，更关心服务器版本。</p><p>ubuntu目前稳定版为LTS(Long-Term-Support)，每两年发布一次，且永久免费。</p><p>国内不同服务器厂商提供的ubuntu云服务器不尽相同：</p><ul><li>[三丰云] 只提供 14.04LTS和16.04LTS</li><li>[青云] 与 [阿里云] 都提供 18.04LTS</li><li>[腾讯云] 提供20.04LTS</li></ul><h3 id="升级版本">升级版本</h3><p>根据ssh登录服务器后的提示，使用指令<code>do-release-upgrade</code>即可升级版本</p><h2 id="apt相关">apt相关</h2><h3 id="使用apt还是apt-get">使用<code>apt</code>还是<code>apt-get</code>？</h3><p>泛泛来讲<code>apt</code>是<code>apt-get</code>的封装，对用户更加友好，也能显示更多的安装信息。以下的指令我都以<code>apt</code>为准。</p><h3 id="更新与换源">更新与换源</h3><p>初次使用root登陆服务器之后先：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update -y &amp;&amp; apt upgrade -y <span class="hljs-comment"># 更新服务器软件包</span><br></code></pre></td></tr></tbody></table></figure><p>一般大厂会在云服务器预置自家的apt镜像，如果没有的话可以自己更换apt的源：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak <span class="hljs-comment"># 备份</span><br><br>vim /etc/apt/sources.list <span class="hljs-comment"># 编辑源 </span><br></code></pre></td></tr></tbody></table></figure><p>删掉原来的内容，添加进以下内容，我这里用阿里源(18.04LTS)：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></tbody></table></figure><p>保存退出之后再更新一下包管理器即可：<code>apt update</code></p><p><strong>注意</strong></p><p>不同操作系统版本对应的源不一定相同，可能换源之后会遇到有些软件包安装不了的情况，可以考虑换成初始的源，安装之后再换回来。</p><h3 id="基础软件包">基础软件包</h3><ul><li>gcc编译器以及一些基础的通用程序安装：<code>apt install build-essential</code></li><li>通用软件包：<code>apt install software-properties-common</code></li></ul><h2 id="添加用户">添加用户</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> adduser &lt;name&gt;<br><br><span class="hljs-built_in">sudo</span> usermod -aG <span class="hljs-built_in">sudo</span> &lt;name&gt; <span class="hljs-comment"># 赋予sudo权限</span><br><br>su &lt;name&gt; <span class="hljs-comment"># 切换用户</span><br></code></pre></td></tr></tbody></table></figure><h2 id="git相关">Git相关</h2><p>下载好git之后，设置ssh-key</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">"email"</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></tbody></table></figure><p>如果<code>git clone</code>失败，考虑在<code>~/.ssh/config</code>中添加</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">HostkeyAlgorithms</span> +ssh-rsa<br>PubkeyAcceptedAlgorithms +ssh-rsa<br></code></pre></td></tr></tbody></table></figure><h2 id="python相关">Python相关</h2><h3 id="升级版本-1">升级版本</h3><p>一般服务器自带的python版本是3.5或者3.6，如果要用python写东西，建议使用高版本。</p><blockquote><p>3.6版本新出了一种语法：f-string，写起来很方便</p></blockquote><p>手动升级版本：</p><ol type="1"><li><p>安装依赖</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update -y &amp;&amp; apt install -y build-essential zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev liblzma-dev libffi-dev libc6-dev<br></code></pre></td></tr></tbody></table></figure><p></p></li><li><p>去官网：https://www.python.org/downloads/source/找到最新的稳定版(Stable Releases)为3.8.7，使用wget下载</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget <span class="hljs-string">'https://www.python.org/ftp/python/3.8.7/Python-3.8.7.tgz'</span> <br><br>tar zxvf Python-3.8.7.tgz  <span class="hljs-comment"># 解压</span><br></code></pre></td></tr></tbody></table></figure><p></p></li><li><p>编译源码</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Python-3.8.7 <br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /usr/local/python3  <span class="hljs-comment"># 建立安装目录</span><br><br><span class="hljs-comment"># --enable-optimizations 会自动安装pip3以及优化配置，建议加上</span><br>./configure --prefix=/usr/local/python3 --enable-optimizations<br><br>make<br><span class="hljs-built_in">sudo</span> make install <span class="hljs-comment"># 编译</span><br></code></pre></td></tr></tbody></table></figure><p></p></li><li><p>更新软连接</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除旧连接</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /usr/bin/python3<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /usr/bin/pip3<br><br><span class="hljs-comment"># 添加新连接</span><br><span class="hljs-comment"># 注意这里 python3.8根据实际情况更改，可能是3.7 / 3.9 xxx</span><br><span class="hljs-comment">#添加python3的软链接</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/python3.8 /usr/bin/python3<br><span class="hljs-comment">#添加 pip3 的软链接</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/pip3.8 /usr/bin/pip3<br></code></pre></td></tr></tbody></table></figure><p></p></li><li><p>检测版本</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -V<br><br>pip3 -V<br></code></pre></td></tr></tbody></table></figure><p></p></li></ol><h3 id="anaconda">Anaconda</h3><div class="note note-info">            <p>仅对windows操作系统</p>          </div><ul><li>下载安装anaconda之后，手动添加环境变量：<code>[...]/anaconda3/Scripts/</code></li><li>安装<a href="https://slproweb.com/products/Win32OpenSSL.html">OpenSSL</a></li><li><code>conda env create -n "name" -f "yaml"</code> or<code>conda env create -n "name" python=3.9</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCU教务处爬虫记录</title>
    <link href="/article/1497/"/>
    <url>/article/1497/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>记录爬取<a href="http://zhjw.scu.edu.cn/">scu教务处</a>的事项。</p><span id="more"></span><h2 id="模拟登陆">模拟登陆</h2><p>使用<code>requests.session()</code>保存爬虫状态</p><p>首先需要进行登录：</p><p>前往登录界面，F12打开network，输入错误的登录信息可以查看网络请求记录。</p><p><img src="https://imgbed.scubot.com/scu_spider-1.png"></p><p>真正有用的登录请求信息已经标出。</p><p>只需要对照着<code>General</code>中的<code>Request Method</code>(POST)、<code>Request Headers</code>和<code>Form Data</code></p><p>使用<code>requests.session</code>进行请求即可。</p><p><strong>注意</strong></p><ol type="1"><li><code>Form Data</code>中的<code>_spring_security_remember_me</code>参数是装了基兄的scu插件才能看到，加上这个参数可以增加session的保存时间，不需要每次爬取信息都要登录一遍。</li><li><code>Form Data</code>中的<code>j_password</code>不是明文密码，而是<code>MD5</code>加密后的密码。</li><li><code>Request Headers</code>一定要打对，<code>Cookie</code>参数可以忽略。</li><li>验证码可以先用<code>GET</code>方法获取，再<code>POST</code>登陆。</li></ol><h2 id="爬取姓名头像">爬取姓名&amp;头像</h2><h2 id="爬取课表">爬取课表</h2><h2 id="参考代码">参考代码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JWCSpider</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username, password</span>):<br>        <span class="hljs-variable language_">self</span>.username = username<br>        <span class="hljs-variable language_">self</span>.password = <span class="hljs-variable language_">self</span>.__md5preFix(password)<br>        <span class="hljs-variable language_">self</span>.session = requests.session()<br>        <span class="hljs-variable language_">self</span>.headers = {<br>            <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,<br>            <span class="hljs-string">'Accept-Encoding'</span>: <span class="hljs-string">'gzip, deflate'</span>,<br>            <span class="hljs-string">'Accept-Language'</span>: <span class="hljs-string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,<br>            <span class="hljs-string">'Connection'</span>: <span class="hljs-string">'keep-alive'</span>,<br>            <span class="hljs-string">'Host'</span>: <span class="hljs-string">'zhjw.scu.edu.cn'</span>,<br>            <span class="hljs-string">'Referer'</span>: <span class="hljs-string">'http://zhjw.scu.edu.cn/login'</span>,<br>            <span class="hljs-string">'Upgrade-Insecure-Requests'</span>: <span class="hljs-string">'1'</span>,<br>            <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Mobile Safari/537.36'</span>,<br>            <span class="hljs-string">'Origin'</span>:<span class="hljs-string">'http://zhjw.scu.edu.cn'</span>,<br>        }<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__md5preFix</span>(<span class="hljs-params">self, password: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        ins_md5 = hashlib.md5()<br>        ins_md5.update(password.encode(<span class="hljs-string">'utf-8'</span>))<br>        <span class="hljs-keyword">return</span> ins_md5.hexdigest()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get_captcha</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">'http://zhjw.scu.edu.cn/img/captcha.jpg'</span><br>        captcha_img = <span class="hljs-variable language_">self</span>.session.get(url).content<br>        img = Image.<span class="hljs-built_in">open</span>(BytesIO(captcha_img))<br>        img = img.convert(<span class="hljs-string">'L'</span>)<br>        img.save(<span class="hljs-string">'captcha.jpg'</span>)<br>        captcha = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">'验证码：'</span>))<br>        <span class="hljs-keyword">return</span> captcha<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__tofile</span>(<span class="hljs-params">self, content: <span class="hljs-built_in">str</span>, filename: <span class="hljs-built_in">str</span> = <span class="hljs-string">'format.html'</span></span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> ofile:<br>            ofile.write(content)<br><br>    <span class="hljs-comment"># 登录教务处</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login_in</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        url = <span class="hljs-string">'http://zhjw.scu.edu.cn/j_spring_security_check'</span><br>        data = {<br>            <span class="hljs-string">'j_username'</span>: <span class="hljs-variable language_">self</span>.username,<br>            <span class="hljs-string">'j_password'</span>: <span class="hljs-variable language_">self</span>.password,<br>            <span class="hljs-string">'j_captcha'</span>: <span class="hljs-variable language_">self</span>.__get_captcha()<br>        }<br>        <span class="hljs-keyword">try</span>:<br>            response = <span class="hljs-variable language_">self</span>.session.post(url, data = data, headers=<span class="hljs-variable language_">self</span>.headers)<br>        <span class="hljs-keyword">except</span> ConnectionError:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">'error'</span>, <span class="hljs-string">'网络连接登录错误'</span>)<br>        <span class="hljs-keyword">except</span> TimeoutError:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">'error'</span>, <span class="hljs-string">'访问超时登录错误'</span>)<br><br>        isError  = re.findall(<span class="hljs-string">r'errorCode='</span>, response.content.decode(<span class="hljs-string">'utf-8'</span>))<br>        <span class="hljs-keyword">if</span> isError:                             <span class="hljs-comment"># 判断账号密码是否正确</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">'error'</span>, <span class="hljs-string">'账号或者密码错误'</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">'ok'</span>, <span class="hljs-string">'登录成功'</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_planCompletion</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">'http://zhjw.scu.edu.cn/student/integratedQuery/planCompletion/index'</span><br>        <span class="hljs-comment"># response = self.session.get(url, headers=self.headers)</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Accept'</span>] = <span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Referer'</span>] = <span class="hljs-string">'http://zhjw.scu.edu.cn/student/integratedQuery/course/courseSchdule/index'</span><br>        response = <span class="hljs-variable language_">self</span>.session.get(url, headers=<span class="hljs-variable language_">self</span>.headers)<br>        <span class="hljs-comment"># print(re.text)</span><br>        <span class="hljs-variable language_">self</span>.__tofile(response.text)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_courseTable</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">'http://zhjw.scu.edu.cn/student/courseSelect/thisSemesterCurriculum/ajaxStudentSchedule/curr/callback'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Accept'</span>] = <span class="hljs-string">'*/*'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Referer'</span>] = <span class="hljs-string">'http://zhjw.scu.edu.cn/student/courseSelect/thisSemesterCurriculum/index'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'X-Requested-With'</span>] = <span class="hljs-string">'XMLHttpRequest'</span><br>        response = <span class="hljs-variable language_">self</span>.session.get(url, headers=<span class="hljs-variable language_">self</span>.headers)<br>        <span class="hljs-comment"># print(re.text)</span><br>        <span class="hljs-variable language_">self</span>.__tofile(response.text, <span class="hljs-string">"coursetable.json"</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_courseSection</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">"http://zhjw.scu.edu.cn/ajax/getSectionAndTime"</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">"Accept"</span>] = <span class="hljs-string">"application/json, text/javascript, */*; q=0.01"</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">"Referer"</span>] = <span class="hljs-string">"http://zhjw.scu.edu.cn/student/courseSelect/thisSemesterCurriculum/index"</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'X-Requested-With'</span>] = <span class="hljs-string">'XMLHttpRequest'</span><br>        response = <span class="hljs-variable language_">self</span>.session.post(url, headers=<span class="hljs-variable language_">self</span>.headers, data={<span class="hljs-string">"planNumber"</span>:<span class="hljs-string">""</span>, <span class="hljs-string">"ff"</span>: <span class="hljs-string">"f"</span>})<br>        <span class="hljs-variable language_">self</span>.__tofile(response.text, <span class="hljs-string">"format.json"</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_studentPic</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">'http://zhjw.scu.edu.cn/main/queryStudent/img?715.0'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Accept'</span>] = <span class="hljs-string">'image/avif,image/webp,image/apng,image/*,*/*;q=0.8'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Referer'</span>] = <span class="hljs-string">'http://zhjw.scu.edu.cn/student/courseSelect/thisSemesterCurriculum/index'</span><br>        stdPic = <span class="hljs-variable language_">self</span>.session.get(url, headers=<span class="hljs-variable language_">self</span>.headers).content<br>        img = Image.<span class="hljs-built_in">open</span>(BytesIO(stdPic))<br>        img.save(<span class="hljs-string">'student.jpg'</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">'http://zhjw.scu.edu.cn/student/rollManagement/rollInfo/index'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Accept'</span>] = <span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span><br>        <span class="hljs-variable language_">self</span>.headers[<span class="hljs-string">'Referer'</span>] = <span class="hljs-string">'http://zhjw.scu.edu.cn/'</span><br>        response = <span class="hljs-variable language_">self</span>.session.get(url, headers=<span class="hljs-variable language_">self</span>.headers)<br>        res = re.findall(<span class="hljs-string">r'title=".*的照片'</span>, response.content.decode(<span class="hljs-string">'utf-8'</span>))<br>        <span class="hljs-built_in">print</span>(res[<span class="hljs-number">0</span>][<span class="hljs-number">7</span>:].replace(<span class="hljs-string">'的照片'</span>, <span class="hljs-string">''</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    check = JWCSpider(<span class="hljs-string">'studentid'</span>, <span class="hljs-string">'password'</span>)<br>    <span class="hljs-built_in">print</span>(check.login_in())<br>    check.get_studentPic()<br>    check.get_courseSection()<br>   <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建私人云盘</title>
    <link href="/article/b055/"/>
    <url>/article/b055/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>一步一步从购买服务器开始，记录搭建私人云盘的过程。我是用的是<code>Ubuntu 20.04.1 LTS 64bit</code>与OwnCloud搭建的。</p><span id="more"></span><h2 id="购买服务器">购买服务器</h2><p>国内的服务器带宽都不高，阿里云的轻量应用可以有5M带宽，但是云盘只有40G不支持扩容。腾讯云不支持优惠续费，所以我直接购买了<a href="https://www.qingcloud.com/">青云</a>的单核2G2M的服务器，云盘50G可以扩容，买了一年，用来搭建我的云盘。</p><h2 id="选用owncloud">选用OwnCloud</h2><p><a href="https://owncloud.com/">OwnCloud</a>是领先的开源文件共享和云协作平台，功能和DropBox类似。owncloud可以支持共享文件与跨设备访问等。</p><h2 id="在ubuntu上部署owncloud">在Ubuntu上部署OwnCloud</h2><blockquote><p>如果是Ubuntu18版本的直接参考https://www.linuxidc.com/Linux/2020-03/162651.htm，下面的内容主要是针对Ubutun20版本</p></blockquote><h3 id="安装环境">安装环境</h3><ol type="1"><li><p>更新系统软件包<code>sudo apt update -y &amp;&amp; sudo apt upgrade -y</code></p></li><li><p>因为OwnCloud是用PHP构建的，所以要安装MariaDB和PHP</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">### 安装MySql(mariadb)</span><br><span class="hljs-built_in">sudo</span> apt install mariadb-server  mariadb-client<br><span class="hljs-comment">### 安装php</span><br><span class="hljs-built_in">sudo</span> apt install software-properties-common<br><span class="hljs-built_in">sudo</span> add-apt-repository ppa:ondrej/php <span class="hljs-comment"># 添加php源</span><br><span class="hljs-comment"># 安装php模块，因为OwnCloud支持的php版本范围为7.2~7.5，Ubuntu18可以直接安装7.2版本，Ubuntu20就安装7.4即可</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install php7.4 php7.4-fpm php7.4-curl php7.4-gd php7.4-zip php7.4-dom php7.4-intl php7.4-mbstring php7.4-xml libapache2-mod-php7.4 php7.4-pgsql php7.4-sqlite3 php7.4-mysql<br></code></pre></td></tr></tbody></table></figure><p></p><p>验证安装</p><p>输入<code>php -v</code>，验证：</p><p><img src="https://imgbed.scubot.com/owncloud-1.png"></p><p>输入<code>sudo systemctl status mariadb</code>，验证：</p><p><img src="https://imgbed.scubot.com/owncloud-2.png"></p></li><li><p>安装网络服务系统Apache：<code>sudo apt install apache2</code>，输入<code>sudo dpkg -l apache2</code>验证安装：</p><p><img src="https://imgbed.scubot.com/owncloud-3.png"></p></li></ol><h3 id="配置环境">配置环境</h3><ol type="1"><li><p>开启Apache服务</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装apache的时候默认是开启的</span><br><span class="hljs-built_in">sudo</span> systemctl start apache2<br></code></pre></td></tr></tbody></table></figure><p></p><p>开启服务器的http80端口，即可访问http://serverip看到Apache的页面。</p></li><li><p>默认情况下MariaDB是不安全的，需要执行其他步骤来强化MariaDB服务器：</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql_secure_installation<br></code></pre></td></tr></tbody></table></figure><p></p><p>在提示输入root密码时按回车，在询问是否更改root密码时输入Y，之后设置根密码，设置根密码后一路回车。</p></li><li><p>建立OwnCloud数据库</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql -u root -p<br></code></pre></td></tr></tbody></table></figure><p></p><p>输入根密码，进入SQL命令行</p><p></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE &lt;数据库名&gt;;<br>CREATE USER '&lt;用户名&gt;'@'localhost' IDENTIFIED BY '&lt;数据库密码&gt;';<br>GRANT ALL ON &lt;数据库名称&gt;.* TO '&lt;数据库用户名&gt;'@'localhost' WITH GRANT OPTION;<br>FLUSH PRIVILEGES;<br>EXIT;<br></code></pre></td></tr></tbody></table></figure><p></p><p><img src="https://imgbed.scubot.com/owncloud-4.png"></p></li><li><p>下载&amp;解压<a href="https://download.owncloud.org/community/">OwnCloud压缩包</a></p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 我写博客时最新版本是10.6.0</span><br><span class="hljs-built_in">sudo</span> wget https://download.owncloud.org/community/owncloud-10.6.0.zip<br><span class="hljs-built_in">sudo</span> apt install upzip -y<br><span class="hljs-comment"># 解压到/var/www/路径  可以根据自己需求更改，更改路径之后 配置文件中的/var/www都需要对应更改</span><br><span class="hljs-built_in">sudo</span> unzip owncloud-10.6.0.zip -d /var/www/<br></code></pre></td></tr></tbody></table></figure><p></p></li><li><p>为OwnCloud配置Apache服务</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/apache2/conf-available/owncloud.conf <span class="hljs-comment"># 编辑apache配置文件</span><br></code></pre></td></tr></tbody></table></figure><p></p><p>写入以下内容：</p><p></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Alias</span> / <span class="hljs-string">"/var/www/owncloud/"</span><br><br><span class="hljs-section">&lt;Directory /var/www/owncloud/&gt;</span><br>  <span class="hljs-attribute">Options</span> +FollowSymlinks<br>  <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span><br><br> <span class="hljs-section">&lt;IfModule mod_dav.c&gt;</span><br>  <span class="hljs-attribute">Dav</span> <span class="hljs-literal">off</span><br> <span class="hljs-section">&lt;/IfModule&gt;</span><br><br> <span class="hljs-attribute">SetEnv</span> HOME /var/www/owncloud<br> <span class="hljs-attribute">SetEnv</span> HTTP_HOME /var/www/owncloud<br><br><span class="hljs-section">&lt;/Directory&gt;</span><br></code></pre></td></tr></tbody></table></figure><p></p><p>启用Apache的模块和配置：</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> a2enconf owncloud<br><span class="hljs-built_in">sudo</span> a2enmod rewrite<br><span class="hljs-built_in">sudo</span> a2enmod headers<br><span class="hljs-built_in">sudo</span> a2enmod <span class="hljs-built_in">env</span><br><span class="hljs-built_in">sudo</span> a2enmod <span class="hljs-built_in">dir</span><br><span class="hljs-built_in">sudo</span> a2enmod mime<br></code></pre></td></tr></tbody></table></figure><p></p><p>最后再重启Apache服务</p><p></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart apache2<br></code></pre></td></tr></tbody></table></figure><p></p><p><img src="https://imgbed.scubot.com/owncloud-5.png"></p></li></ol><h3 id="在网站上完成安装">在网站上完成安装</h3><p>在前往网站安装之前，需要现在服务器里做好权限的管理：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/owncloud<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> data<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> apps-external<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R www-data:www-data data<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R www-data:www-data apps-external <span class="hljs-comment"># 修改权限</span><br></code></pre></td></tr></tbody></table></figure><p>完成以上步骤之后，访问http://serverip/owncloud页面，选择MariaDB作为数据库，填入之前设置好的数据库名称，数据库用户名称，数据库密码就可以。</p><p><img src="https://imgbed.scubot.com/owncloud-6.png"></p><p>完成安装之后就可以进到云端了。</p><p><img src="https://imgbed.scubot.com/owncloud-7.png"></p><h2 id="配置https">配置https</h2><blockquote><p>需要一个备案过的域名，我是用了csgowiki.top的子域名cloud.csgowiki.top来配置的。</p></blockquote><h3 id="申请ssl证书">申请SSL证书</h3><p>在域名服务商那里(阿里云)就可以申请免费的证书，阿里云可以申请一年的。</p><p><img src="https://imgbed.scubot.com/owncloud-8.png"></p><p>选择Apache服务器类型，下载证书压缩包。</p><p>解压之后可以获得三个文件：<code>xxx_public.crt</code>、<code>xxx.key</code>和<code>xxx_chain.crt</code></p><h3 id="上传ssl证书">上传SSL证书</h3><ol type="1"><li>创建文件夹：<code>sudo mkdir /etc/apache2/cert</code></li><li>将三个证书文件都上传到新建的文件夹下</li></ol><h3 id="修改apache配置">修改Apache配置</h3><ol type="1"><li><p>设置监听443端口：<code>vim /etc/apache2/ports.conf</code>，应该如图所示，如果相同就不用修改。</p><p><img src="https://imgbed.scubot.com/owncloud-9.png"></p></li><li><p>配置apache参数：<code>sudo vim /etc/apache2/sites-enabled/000-default.conf</code></p><p>对应修改：</p><p></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:443</span>&gt;</span><br>    <span class="hljs-attribute">SSLEngine</span> <span class="hljs-literal">on</span> # 开启SSL<br>    <span class="hljs-attribute">SSLProtocol</span> <span class="hljs-literal">all</span> -SSLv2 -SSLv3<br>    <span class="hljs-attribute">SSLCipherSuite</span> HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM<br>    <span class="hljs-attribute">SSLHonorCipherOrder</span> <span class="hljs-literal">on</span><br><br>    <span class="hljs-attribute">SSLCertificateFile</span> cert/xxx_public.crt     # public文件路径<br>    <span class="hljs-attribute">SSLCertificateKeyFile</span> cert/xxx.key         # key文件路径<br>    <span class="hljs-attribute">SSLCertificateChainFile</span> cert/xxx_chain.crt # chain文件路径<br><br>    <span class="hljs-attribute">ServerAdmin</span> webmaster@localhost<br>    <span class="hljs-attribute">DocumentRoot</span> /var/www/html<br>    <span class="hljs-attribute">ServerName</span> www.xxx.com   # 你的域名<br><br>    <span class="hljs-attribute">ErrorLog</span> <span class="hljs-variable">${APACHE_LOG_DIR}</span>/error.log<br>    <span class="hljs-attribute">CustomLog</span> <span class="hljs-variable">${APACHE_LOG_DIR}</span>/access.log combined<br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br><span class="hljs-attribute">RewriteEngine</span> <span class="hljs-literal">on</span> # 重定向引擎开启，将<span class="hljs-number">80</span>端口服务重定向到<span class="hljs-number">443</span><br><span class="hljs-attribute">RewriteCond</span>   <span class="hljs-variable">%{HTTPS}</span> !=<span class="hljs-literal">on</span><br><span class="hljs-attribute">RewriteRule</span>   ^(.*)  https://<span class="hljs-variable">%{SERVER_NAME}</span>$<span class="hljs-number">1</span><span class="hljs-meta"> [L,R=301]</span><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></tbody></table></figure><p></p></li><li><p>开启ssl模块：<code>sudo a2enmod ssl</code></p></li><li><p>重启apache服务：<code>sudo systemctl restart apache2</code></p></li></ol><p>配置结束后就可以通过域名直接https访问网站了。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学-纹理</title>
    <link href="/article/ee3e/"/>
    <url>/article/ee3e/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>纹理映射是着色部分的内容，包括了抗混叠等技术。</p><span id="more"></span><h2 id="重心坐标-barycentric-coordinates">重心坐标 BarycentricCoordinates</h2><p>重心坐标是定义在三角形上的，表示为<span class="math inline">\((\alpha, \beta, \gamma)\)</span>，满足：</p><p><span class="math display">\[(x, y) = \alpha A + \beta B + \gamma C \\ \alpha + \beta + \gamma = 1\]</span> 当点在三角形内时，满足： <span class="math display">\[\alpha &gt; 0 \wedge \beta &gt; 0 \wedge \gamma &gt; 0\]</span> 重心坐标可以通过面积比求出，如图</p><p><img src="https://imgbed.scubot.com/CG-5-1.png" style="zoom:50%;"></p><p>除了用面积算，还可以直接通过笛卡尔坐标系下的坐标进行计算</p><p><img src="https://imgbed.scubot.com/CG-5-2.png" style="zoom:50%;"></p><h3 id="使用重心坐标进行插值">使用重心坐标进行插值</h3><p>对需要插值的对象也用重心坐标的形式表示</p><p>重心坐标不能保证投影变换后坐标不变，所以对于深度信息等需要现在三维空间中插值，再投影到屏幕空间。</p><h2 id="纹理映射">纹理映射</h2><p>对于光栅化之后的点<code>(u,v)</code>进行纹理映射：<code>texture.sample(u,v)</code>，采样得到的值可以替代<em>Blinn-Phong</em>反射模型中漫反射光照中的<span class="math inline">\(K_d\)</span>参数，用来表示物体表面本来的颜色。</p><p>在纹理采样过程中会遇到一些问题：</p><h3 id="纹理放大">纹理放大</h3>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSGO-RealTimeMap开发记录</title>
    <link href="/article/c038/"/>
    <url>/article/c038/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>CSGO-RealTimeMap是一个致力于将CSGO服务器内的信息实时显示到网页上的一个无数据库项目，灵感来源自Minecraft的插件dynmap。</p><p>插件分为两部分：游戏服务器的sourcemod插件和服务器本地的网站。</p><p>项目开源地址：<a href="https://github.com/hx-w/CSGO-RealTimeMap">GitHub</a>。</p><p>开发日期：2020-12-3至2021-01-01。</p><span id="more"></span><h3 id="技术栈">技术栈</h3><ul><li><p><strong>flask</strong> 做网页显示。</p></li><li><p><strong>websocket</strong> 实现前端与数据的同步。</p></li><li><p><strong>sourcemod</strong> 实现游戏内数据向网站的同步。</p></li></ul><p>最初版演示见<a href="https://www.bilibili.com/video/BV1mt4y1a7YG/">B站视频</a>。</p><h2 id="功能目标">功能目标</h2><ul><li>易于部署&amp;维护的插件/网站结构</li><li>网页上平滑的玩家移动</li><li>丰富的图标显示：玩家朝向、所持武器、所属阵营等</li><li>详细的服务器内信息：玩家在线时间、击杀情况等</li><li>在线聊天系统</li></ul><h2 id="开发记录">开发记录</h2><h4 id="section">2020-12-5</h4><p><strong>feature</strong></p><ol type="1"><li><p>更新了道具效果的显示：</p><figure><img src="https://imgbed.scubot.com/RTM-1.jpg" alt="道具效果"><figcaption aria-hidden="true">道具效果</figcaption></figure></li><li><p>更多的关键帧，现在关键帧增加到了10，网页上人物移动的显示效果更加流畅</p></li></ol><p><strong>bug</strong></p><ol type="1"><li>内存不释放，怀疑是道具的记录引起的</li><li>程序运行日志未删除</li></ol><h4 id="section-1">2020-12-6</h4><p><strong>bug fix&amp; feature</strong> 1.解决内存不释放的问题，采用garbage collector主动释放内存。 &gt;python中的dict删除某个元素之后并不会直接释放内存，需要用<code>gc.collect()</code>来主动释放2. 实现服务器到网页的聊天信息显示(server2web) 3.实现网页到服务器的聊天信息显示(web2server) <img src="https://imgbed.scubot.com/RTM-2.jpg" alt="聊天信息"></p><p><strong>bug</strong> 1. 人物移动在网页上显示越来越滞后</p><h4 id="section-2">2020-12-7</h4><p><strong>feature</strong> 1. 增加诱饵弹的道具显示效果 2.重构网站的消息机制，构造消息队列<code>MessageQueue</code>用于系统化的处理从服务器到网站的数据3. 关键帧减少为5，否则会有明显数据滞后问题</p><blockquote><p>游戏服务器向网站发消息</p></blockquote><figure><img src="https://imgbed.scubot.com/RTM-4.png" alt="server2web"><figcaption aria-hidden="true">server2web</figcaption></figure><blockquote><p>网站向服务器发消息</p></blockquote><figure><img src="https://imgbed.scubot.com/RTM-3.png" alt="web2server"><figcaption aria-hidden="true">web2server</figcaption></figure><blockquote><p><code>MessageQueue</code>结构</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageQueue</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, qMapSz=<span class="hljs-number">1</span>, qPlayerMoveSz=<span class="hljs-number">100</span>, qUtilitySz=<span class="hljs-number">10</span>, q2ServerMsgSz=<span class="hljs-number">10</span>, q2WebMsgSz=<span class="hljs-number">5</span></span>):<br>        <span class="hljs-string">'''</span><br><span class="hljs-string">        qMap: [mapname]</span><br><span class="hljs-string">        qPlayersMove: [[posX, posY, name, steam3id, clientid]]</span><br><span class="hljs-string">        qUtility: [utid, uttype, posX, posY]</span><br><span class="hljs-string">        q2WebMsg: [ip/name, msg]</span><br><span class="hljs-string">        q2ServerMsg: [ip, msg]</span><br><span class="hljs-string">        '''</span><br>        <span class="hljs-variable language_">self</span>.qMsg = {<br>            <span class="hljs-string">"qMap"</span>: queue.Queue(maxsize=qMapSz),<br>            <span class="hljs-string">"qPlayersMove"</span>: queue.Queue(maxsize=qPlayerMoveSz),<br>            <span class="hljs-string">"qUtility"</span>: queue.Queue(maxsize=qUtilitySz),<br>            <span class="hljs-string">"q2WebMsg"</span>: queue.Queue(maxsize=q2WebMsgSz),<br>            <span class="hljs-string">"q2ServerMsg"</span>: queue.Queue(maxsize=q2ServerMsgSz),<br>        }<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">qPut</span>(<span class="hljs-params">self, qName: <span class="hljs-built_in">str</span>, value: <span class="hljs-built_in">list</span>=[]</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.qMsg[qName].full(): <span class="hljs-variable language_">self</span>.qMsg[qName].get_nowait()<br>            <span class="hljs-variable language_">self</span>.qMsg[qName].put_nowait(value)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">"Queue({}) Put Error!"</span>.<span class="hljs-built_in">format</span>(qName))<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">qGetAllMsg_noWait</span>(<span class="hljs-params">self, qExcept=[]</span>):<br>        allMsg = {}<br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.qMsg.items():<br>            <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> qExcept: <span class="hljs-keyword">continue</span><br>            allMsg[key] = [] <span class="hljs-keyword">if</span> value.empty() <span class="hljs-keyword">else</span> value.get_nowait()<br>        <span class="hljs-keyword">return</span> allMsg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">qGet_noWait</span>(<span class="hljs-params">self, qName: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># success, Msg</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-literal">False</span>, []) <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.qMsg[qName].empty() <span class="hljs-keyword">else</span> (<span class="hljs-literal">True</span>, <span class="hljs-variable language_">self</span>.qMsg[qName].get_nowait())<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">"Queue({}) Get Error!"</span>.<span class="hljs-built_in">format</span>(qName))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">qClearAll</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.qMsg.keys():<br>            <span class="hljs-variable language_">self</span>.qMsg[key] = queue.Queue()<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSGO</tag>
      
      <tag>sourcemod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学-实时渲染管线</title>
    <link href="/article/1fe/"/>
    <url>/article/1fe/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>记录描述计算机图形学中 <strong>实时渲染管线</strong> (Real-timeRendering Pipeline)的内容。</p><span id="more"></span><h2 id="渲染流水线">渲染流水线</h2><p><img src="https://imgbed.scubot.com/CG-4-1.png"></p><p>整个流程都是在硬件(显卡)中实现的。</p><p>整理流程可以认为包括三大部分：几何图形处理(顶点和三角形变换)，光栅化和Fragment处理。</p><blockquote><p>Fragments可以理解为像素，如果做了MSAA，那么多个Fragments会组成一个像素。</p></blockquote><p>将我们记录的计算机图形学中的渲染流程对应到流水线上：</p><h3 id="mvp变换">MVP变换</h3><p><img src="https://imgbed.scubot.com/CG-4-2.png"></p><p>在<code>Vertex Processing</code>过程中完成。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学-着色</title>
    <link href="/article/313c/"/>
    <url>/article/313c/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>本文章用来记录计算机图形学中与 <strong>着色(shading)</strong>相关的知识。</p><span id="more"></span><h2 id="着色的定义">着色的定义</h2><p>在绘画过程中引入<strong>明暗</strong>或<strong>颜色</strong>的不同。</p><blockquote><p>"The darkening or coloring of an illustration or diagram withparallel lines or a block of color."</p><p>—Merriam-Webster Dictionary</p></blockquote><p>在计算机图形学中，可以理解为：对不同的物体应用不同材质的过程。</p><h2 id="基础着色模型">基础着色模型</h2><h3 id="blinn-phong光照模型blinn-phong-reflectance-model"><em>Blinn-Phong</em>光照模型—<em>Blinn-Phong</em>Reflectance Model</h3><p><em>Blinn-Phong</em>光照模型认为图像中体现在物体上的光分为三部分：</p><ul><li><strong>高光</strong>(Specular highlights)</li><li><strong>漫反射</strong>(Diffuse reflection)</li><li><strong>环境光</strong>(Ambient lighting)</li></ul><p><img src="https://imgbed.scubot.com/CG-3-1.png" style="zoom:50%;"></p><p>对物体表面的每一个点抽象出以下属性：</p><ul><li>观察方向 <span class="math inline">\(\vec v\)</span></li><li>该点(局部平面)的法线向量 <span class="math inline">\(\vecn\)</span></li><li>光照方向 <span class="math inline">\(\vec l\)</span></li><li>该点(平面)的参数：颜色、反光系数等</li></ul><p><strong>着色操作只考虑物体局部的显示，不将阴影或其他物体考虑在内，即shading</strong><span class="math inline">\(\not =\)</span><strong>shadow</strong>。</p><p>下面介绍<em>Blinn-Phong</em>模型中光照的三个部分。</p><h4 id="漫反射-diffuse-reflection">漫反射 Diffuse reflection</h4><p>对于漫反射考虑以下因素的影响：</p><ol type="1"><li><p>着色点上光的接收</p><p>光是一种能量形式，着色点周围单位面积接受到的光能量越大，显示的就应该越亮。</p><p>根据上述分析引出 <em>Lambert's</em>余弦定理：着色点接受到的光照的强度与光照方向和平面法线方向的余弦成正比。</p><p><img src="https://imgbed.scubot.com/CG-3-2.png"></p></li><li><p>光能量的衰弱</p><p>假设点光源在某一时刻发出的光照能量在三维空间中以球壳形式传播且没有能量损耗，那么根据能量守恒，任意时刻球壳上的光的能量总和都应该相等。</p><p>根据球面积公式<span class="math inline">\(S=4\piR^2\)</span>，着色点距离光源<span class="math inline">\(r\)</span>，着色点收到的光能量为<span class="math inline">\(I\)</span>，那么<span class="math inline">\(I\propto 1/r^2\)</span>，即光照强度与离光源的距离呈现<strong>平方反比</strong> 关系。</p><blockquote><p>这里将光能与光强做等价处理并不严谨，不过鉴于<em>Blinn-Phong</em>本身就是个简化模型，就不多考虑其中的问题。</p></blockquote></li></ol><p>根据上面两点可以写出着色点的漫反射光照强度表达式：</p><p><span class="math display">\[L_d = k_d(I/r^2)\max(0, \vec n \cdot \vec l)\]</span></p><p>其中：<span class="math inline">\(L_d\)</span>为着色点的漫反射光照强度，<span class="math inline">\(k_d\)</span>为漫反射参数(颜色等)，<span class="math inline">\(I\)</span> 为光源处光照强度，<span class="math inline">\(r\)</span> 为着色点到光源处距离。</p><blockquote><p>解释：</p><ol type="1"><li><span class="math inline">\(\vec n \cdot \vec l\)</span>如果为负数，则认为该点不被照亮(不考虑折射等)。</li><li><span class="math inline">\(k_d\)</span>表示为单个小数时表示物体的光反射率，影响物体的亮暗程度；如果将<span class="math inline">\(k_d\)</span>表示为向量即可表示物体对不同颜色的反射率，影响物体的颜色。</li><li><span class="math inline">\(L_d\)</span>的表达式中没有观察方向<span class="math inline">\(\vecv\)</span>的参与，因为模型中假设了某点的漫反射总是均匀的，不管从哪个角度观察都能看到同样的漫反射效果，故与<span class="math inline">\(\vec v\)</span>无关。</li><li>表示方向的向量：<span class="math inline">\(\vec n\)</span>，<span class="math inline">\(\vec v\)</span>和<span class="math inline">\(\vecl\)</span>都是单位向量。</li></ol></blockquote><p>漫反射示例：</p><p><img src="https://imgbed.scubot.com/CG-3-3.png"></p><h4 id="高光-specular-highlights">高光 Specular highlights</h4><p>假设光照在物体的局部平面发生镜面反射，镜面反射的光线方向是<span class="math inline">\(\vec R\)</span>，那么如果观察方向<span class="math inline">\(\vec v\)</span>与<span class="math inline">\(\vecR\)</span>接近时会观测到高光。</p><p><img src="https://imgbed.scubot.com/CG-3-4.png" style="zoom:50%;"></p><p><span class="math inline">\(\vecR\)</span>的计算比较麻烦，<em>Blinn-Phong</em>模型中引入<strong>半程向量</strong>(halfvector)来解决这个问题。</p><p>如果<span class="math inline">\(\vec v\)</span>与<span class="math inline">\(\vec R\)</span>很接近，那么<span class="math inline">\(\vec n\)</span>与<span class="math inline">\(\vecl\)</span>和<span class="math inline">\(\vecv\)</span>的角平分线的方向向量很接近，定义半程向量<span class="math inline">\(\vec h\)</span>为<span class="math inline">\(\vecl\)</span>和<span class="math inline">\(\vecv\)</span>的角平分线方向的单位向量：<span class="math inline">\(\vec h =\rm{bisector}(\vec v, \vec l) = \frac{\vec v + \vec l}{\mid \mid \vec v+ \vec l \mid \mid}\)</span></p><blockquote><p>推导<span class="math inline">\(\vec R=(X_R, Y_R, Z_R)\)</span>：<span class="math display">\[\begin{align*}\frac{\vec R + \vec l}{\mid \mid \vec R + \vec l \mid \mid} &amp;= \vecn \\[2ex]\begin{pmatrix}\frac{X_l + X_R}{\sqrt{(X_l + X_R)^2 + (Y_l + Y_R)^2 + (Z_l + Z_R)^2}}\\ \frac{Y_l + Y_R}{\sqrt{(X_l + X_R)^2 + (Y_l + Y_R)^2 + (Z_l +Z_R)^2}} \\ \frac{Z_l + Z_R}{\sqrt{(X_l + X_R)^2 + (Y_l + Y_R)^2 + (Z_l+ Z_R)^2}}\end{pmatrix} ^\top&amp;= (X_n, Y_n, Z_n)\end{align*}\]</span> 可以列出三个等式，求三个分量，计算量太大不继续算了。</p></blockquote><p><img src="https://imgbed.scubot.com/CG-3-5.png" style="zoom:50%;"></p><p>可以写出着色点的高光亮度表达式： <span class="math display">\[\begin{align*}L_s &amp;= k_s(I/r^2) \max (0, \cos \alpha) ^ p \\ &amp;= k_s(I/r^2)\max(0, \vec n \cdot \vec h)\end{align*}\]</span> 其中<span class="math inline">\(L_s\)</span>为着色点的高光亮度，<span class="math inline">\(k_s\)</span>为高光反射系数， <span class="math inline">\(p\)</span>表示高光敏感度。</p><blockquote><p>解释：</p><ol type="1"><li><p><em>Blinn-Phong</em>光照模型中使用<span class="math inline">\(\vec n\)</span>与<span class="math inline">\(\vech\)</span>来表示高光角度，<em>Phong</em>光照模型中使用<span class="math inline">\(\vec R\)</span>与<span class="math inline">\(\vecv\)</span>来表示高光角度。</p></li><li><p>用指数<span class="math inline">\(p\)</span>来表示可以产生高光的角度区间(敏感程度)，<span class="math inline">\(p\)</span>越大，能看到高光的角度就越小：</p><p><img src="https://imgbed.scubot.com/CG-3-6.png"></p></li></ol></blockquote><p>漫反射+高光示例：</p><p><img src="https://imgbed.scubot.com/CG-3-7.png"></p><h4 id="环境光-ambient-lighting">环境光 Ambient lighting</h4><p>真实的环境光照很复杂，<em>Blinn-Phong</em>模型做了一个大胆的假设：所有着色点的环境光照均相同：<span class="math display">\[L_a = k_a I_a\]</span> 其中：<span class="math inline">\(L_a\)</span>为着色点环境光的光照强度，<span class="math inline">\(k_a\)</span>是环境光反射系数， <span class="math inline">\(I_a\)</span>为环境光强度常数。</p><blockquote><p>解释：</p><ol type="1"><li>在这个模型中环境光与观测方向和光照方向均无关。</li><li>可以将环境光理解成物体本来的颜色，使得不是所有地方都是黑色的。</li><li>精确地计算需要利用到环境光照的知识(不在本文章)。</li></ol></blockquote><h4 id="模型效果">模型效果</h4><p>将以上三种光照效果加在一起，就可以得到某一着色点的光照强度： <span class="math display">\[\begin{align*}L &amp;= L_a + L_d + L_s \\&amp;= k_a I_a + k_d(I/r^2 )\max(0, \vec n \cdot \vec l) + k_s (I /r^2)\max(0, \vec n \cdot \vec h) ^ p\end{align*}\]</span> 效果：</p><p><img src="https://imgbed.scubot.com/CG-3-8.png"></p><h2 id="着色频率">着色频率</h2><p>三种不同的着色方式：</p><ol type="1"><li><p><strong>Flatshading</strong>：以一个三角形为单位，三角形内部颜色不变化，只针对三角形一个点做着色处理就可以对三角形中所有点应用。(逐三角形)</p><p><img src="https://imgbed.scubot.com/CG-3-9.png"></p></li><li><p><strong>Gouraudshading</strong>：对三角形三个顶点求出其法线向量，并算出三个顶点的着色情况，再在三角形内部对三个顶点的颜色做插值。(逐顶点)</p><blockquote><p>关于顶点的发现向量计算：<a href="#顶点法线向量">顶点法线向量</a></p></blockquote><p><img src="https://imgbed.scubot.com/CG-3-10.png"></p></li><li><p><strong>Phongshading</strong>：对三角形三个顶点求出其法线向量，对三角形内部每个点插值出对应的法线，对每一个像素进行着色。(逐像素)</p><blockquote><p><strong>Phongshading</strong>是一种着色频率，与<em>Blinn-Phong</em>着色模型不是一个概念。</p><p>关于像素的法线插值：<a href="#像素法线插值">像素法线插值</a></p></blockquote><p><img src="https://imgbed.scubot.com/CG-3-11.png"></p></li></ol><p>当模型足够复杂(顶点数量足够多时)，Flat shading的效果不一定比Phongshading(计算量大)差。而当模型过于复杂时，顶点数量多余屏幕像素数量，则Flatshading的计算量比Phongshading还要大，具体采取什么样的着色频率要根据实际情况考虑。</p><p><img src="https://imgbed.scubot.com/CG-3-12.png"></p><h3 id="顶点法线向量">顶点法线向量</h3><p>任何一个顶点都与周围若干个三角形所关联，可以简单的认为该点的法线向量是周围三角形的法线向量的平均：</p><p><img src="https://imgbed.scubot.com/CG-3-13.png"> <span class="math display">\[\vec N_v = \frac {\sum_i \vec N_i}{ \mid \mid \sum_i \vec N_i \mid \mid}\]</span></p><blockquote><p>改进：认为每个三角形面积越大权重越大，取得法线的加权平均，效果更好。</p></blockquote><h3 id="像素法线插值">像素法线插值</h3><p>使用<strong>重心坐标</strong>(Barycentricinterpolation)插值，后归一化每个向量。详细的插值方法见后续。</p><p><img src="https://imgbed.scubot.com/CG-3-14.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署一台Minecraft服务器</title>
    <link href="/article/101e/"/>
    <url>/article/101e/</url>
    
    <content type="html"><![CDATA[<h2 id="以往经历">以往经历</h2><p>我之前搭过两台Minecraft的服务器，一台是阿里云的1核2G内存5M带宽(9.5元/月)，一台是百度云的2核4G3M(30+元/月)，都是学生机比较便宜，百度云那台的基础价格是18元/月只有1M带宽，我是升了配置，记不清一共多少钱了。</p><p>阿里云那台用作创造的实验服务器还是可以的，百度云那台配置高一点，但是用作正常地图的生存(使用MCDR和CarpetMod)还是有点吃力，三个人时tps经常不满20，而且百度云的客服真的很烦人:(反正不想再用百度云了。</p><p>这几天又有想法再部署一台空岛服务器，想用这篇博客把服务器的部署流程记录下来，希望能为别人提供一些帮助。</p><span id="more"></span><blockquote><p>空岛对服务器性能要求不高，且有一定趣味性。如果想要其他类型的玩法直接更改存档和对应插件即可。</p></blockquote><h2 id="服务器选购">服务器选购</h2><p>Minecraft的服务器很吃性能(CPU，内存和带宽都很重要)，选购服务器时就要谨慎一些。</p><p>我没打算组实体机(没钱+没精力)，所以还是选择大厂的学生服务器来部署。根据我查到的信息以及我部署CSGO和Minecraft服务器的一些经验：阿里云提供5M带宽但是只有1核2G，百度云之前也提到了，学生机标配是2核4G1M还需要自己去升配带宽，其他还看了美团云，滴滴云，华为云以及腾讯云的学生机规格，最后还是选择腾讯云的2核4G3M。</p><blockquote><p>点击可查看<a href="https://cloud.tencent.com/act/campus?utm_source=qcloud&amp;utm_medium=head&amp;utm_campaign=campus">购买页面</a>：</p></blockquote><p><img src="https://imgbed.scubot.com/server_mc-1.png"></p><p>选了上海地区的服务器，还是用Ubuntu做系统</p><p><img src="https://imgbed.scubot.com/server_mc-2.png"></p><p>购买服务器后第一件事应该是重置密码，这里默认的用户名为<code>ubuntu</code></p><p><img src="https://imgbed.scubot.com/server_mc-3.png"></p><h2 id="服务器环境搭建">服务器环境搭建</h2><p>有了服务器之后需要登录到上去，我选择使用Finalshell的ssh连接到服务器。</p><blockquote><p>Finalshell可以实时监控服务器性能，但是页面上的操作有时会有卡顿，看自己取舍，可以选择xshell等ssh工具</p></blockquote><p>接下来就是要安装需求和依赖：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 升级apt-get</span><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get upgrade<br><br><span class="hljs-comment"># 安装python3的pip功能</span><br><span class="hljs-built_in">sudo</span> apt-get install python3-pip<br><br><span class="hljs-comment"># 安装java环境</span><br><span class="hljs-built_in">sudo</span> apt-get install default-jre<br><br><span class="hljs-comment"># 安装后台管理软件</span><br><span class="hljs-built_in">sudo</span> apt-get install screen<br></code></pre></td></tr></tbody></table></figure><h2 id="整理游戏服务器文件包">整理游戏服务器文件包</h2><p>Minecraft的服务端有很多种，我选择用<a href="https://github.com/Fallen-Breath/MCDReforged">MCDReforged</a>搭配<a href="https://github.com/gnembon/fabric-carpet">FabricCarpet</a>来使用，服务器版本选择1.16.3。</p><p><strong>地图文件</strong></p><p>选择之前hsds的<a href="https://www.curseforge.com/minecraft/worlds/skyblock-4?__cf_chl_captcha_tk__=c09714b33f19723923aecc3313aa5507dfb1bed8-1606356067-0-AT5ZMtqpmH2R6d3sC-XFDeIUuncdodC0ivUPpBNmFMF7eICy76s5wuCrZaV-XL-vVfV4BxNw-7v3ZYlx47ofjxriKW_BARssUsfyuUiUrQX6Qo2dOBQqv0cr26s3bHhCUDDCvxUHZ_3rk1swTnBb71ctggqFA3bTXRBc1VfZGARNDZIfRZ-mANe4dt4PphO--viVwkO7YyVYIIS2ayxmAvPSgfMEeeps7LCB0DqlyjgQdbhhgGo3hKY3v8xvqWSiK0JwF4rC0Fg1gbWb9chTiTs5ohC-3edUe_WfYZd5Rsedqd-twXXFdEB1kiXpYMd9dJAH5VfNJacR9pWTBcnx5GdW_T7bHk5sCVOyUnpA0CKnzaPwwS6E11hq3oQW74azmWAA6sIdqUhYPxbBopvd6RB3BbLDRPdb4YKD8xYg9a1G1zjlozn8pEzSTLHNLPZPfxFnAw1CErHavmPBQBZchwwSHckrqblPJ6atEhsXtW2LjP1zAXN8SM7Cn9Vf4QCNfRyqX_o98caADc6tECngKlVdEr8DwtnBvcqbUbC-BJ-inTHH6PQIHLNWcMdYv2YtmkFxDyaUFv59rSeNcy3InrIwGaWj8gXbOV1zKUgX58Y9IBFgblwr1Y-73mcOKRk4Jw">空岛地图</a>，搭配我写的+我找的一些资源包，包括<a href="/static/mc/连锁挖矿.zip">连锁挖矿</a>和<a href="/static/mc/Ld_datapack.zip">特殊合成</a>。</p><blockquote><p>种子：244038804808138753</p></blockquote><p><strong>整合MCDR</strong></p><p>下载最新的MCDR，将地图文件覆盖到<code>MCDReforged/server/world</code>。</p><p>然后更改<code>MCDReforged/server/server.properties</code>文件，用来更改服务器的设置。我将人数上限设为10，设离线模式，非正版玩家也可以连接。</p><p>参考：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#Minecraft server properties</span><br><span class="hljs-attr">enable-jmx-monitoring</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">rcon.port</span>=<span class="hljs-string">25575</span><br><span class="hljs-attr">level-seed</span>=<span class="hljs-string"></span><br><span class="hljs-attr">enable-command-block</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">gamemode</span>=<span class="hljs-string">survival</span><br><span class="hljs-attr">enable-query</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">generator-settings</span>=<span class="hljs-string"></span><br><span class="hljs-attr">level-name</span>=<span class="hljs-string">JC-Farm</span><br><span class="hljs-attr">motd</span>=<span class="hljs-string">JC Oldman Group</span><br><span class="hljs-attr">query.port</span>=<span class="hljs-string">25565</span><br><span class="hljs-attr">keepBackupHours</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">pvp</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">generate-structures</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">difficulty</span>=<span class="hljs-string">hard</span><br><span class="hljs-attr">network-compression-threshold</span>=<span class="hljs-string">256</span><br><span class="hljs-attr">max-tick-time</span>=<span class="hljs-string">100000</span><br><span class="hljs-attr">max-players</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">use-native-transport</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">enable-status</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">online-mode</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">allow-flight</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">broadcast-rcon-to-ops</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">view-distance</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">max-build-height</span>=<span class="hljs-string">256</span><br><span class="hljs-attr">server-ip</span>=<span class="hljs-string"></span><br><span class="hljs-attr">allow-nether</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">server-port</span>=<span class="hljs-string">25565</span><br><span class="hljs-attr">autoBackup</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">sync-chunk-writes</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">enable-rcon</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">op-permission-level</span>=<span class="hljs-string">4</span><br><span class="hljs-attr">prevent-proxy-connections</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">resource-pack</span>=<span class="hljs-string"></span><br><span class="hljs-attr">entity-broadcast-range-percentage</span>=<span class="hljs-string">100</span><br><span class="hljs-attr">player-idle-timeout</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">rcon.password</span>=<span class="hljs-string"></span><br><span class="hljs-attr">force-gamemode</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">rate-limit</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">autoBackupMins</span>=<span class="hljs-string">180</span><br><span class="hljs-attr">hardcore</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">white-list</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">broadcast-console-to-ops</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spawn-npcs</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spawn-animals</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">snooper-enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">function-permission-level</span>=<span class="hljs-string">2</span><br><span class="hljs-attr">level-type</span>=<span class="hljs-string">default</span><br><span class="hljs-attr">spawn-monsters</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">enforce-whitelist</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spawn-protection</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">resource-pack-sha1</span>=<span class="hljs-string"></span><br><span class="hljs-attr">max-world-size</span>=<span class="hljs-string">29999984</span><br></code></pre></td></tr></tbody></table></figure><p>MCDR上装了这几个插件，其中<code>QuickAnswer.py</code>是我魔改之后的版本。</p><p><img src="https://imgbed.scubot.com/server_mc-4.png"></p><h2 id="部署服务器">部署服务器</h2><ol type="1"><li><p>将<code>MCDReforged</code>文件夹上传至服务器上(时间有一点长)</p></li><li><p>安装MCDR的依赖，在<code>MCDRefored/</code>下输入<code>pip3 install -r requirements</code>与<code>pip3 install psutil</code></p></li><li><p>执行<code>python3 MCDRefored.py</code>试运行服务端</p><p><img src="https://imgbed.scubot.com/server_mc-5.png"></p><p>可以看到运行成功，服务器内情况正常：</p><p><img src="https://imgbed.scubot.com/server_mc-6.png"></p><p>服务器资源占用也很低</p><p><img src="https://imgbed.scubot.com/server_mc-7.png"></p><p>空载时服务器负荷并不大</p><p><img src="https://imgbed.scubot.com/server_mc-8.png"></p></li><li><p>改用<code>screen</code>后端挂载服务端：</p><ul><li><p><code>screen -S mc</code> 创建mc窗口</p></li><li><p><code>python3 MCDReforged.py</code>启动服务器</p></li><li><p><code>Ctrl A D</code>将窗口挂载</p><blockquote><p><code>screen -ls</code>可以查看窗口列表</p><p><code>screen -S &lt;name&gt; -X quit</code> 可以删除某个窗口</p></blockquote></li></ul></li></ol><h2 id="mcdr插件编写">MCDR插件编写</h2><p>MCDR以python为开发语言，开发文档见：https://github.com/Fallen-Breath/MCDReforged/blob/master/doc/plugin.md</p><p>以切换玩家观察者/生存模式的插件为例：</p><blockquote><p>CameraMode.py</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_load</span>(<span class="hljs-params">server, old</span>):<br>    server.add_help_message(<span class="hljs-string">'.c'</span>, <span class="hljs-string">'切换观察者模式'</span>)<br>    server.add_help_message(<span class="hljs-string">'.s'</span>, <span class="hljs-string">'切换生存模式'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_info</span>(<span class="hljs-params">server, info</span>):<br>    <span class="hljs-keyword">if</span> info.content.startswith(<span class="hljs-string">".c"</span>) <span class="hljs-keyword">and</span> info.is_player == <span class="hljs-literal">True</span>:<br>        server.execute(<span class="hljs-string">"gamemode spectator "</span> + info.player)<br>    <span class="hljs-keyword">elif</span> info.content.startswith(<span class="hljs-string">".s"</span>) <span class="hljs-keyword">and</span> info.is_player == <span class="hljs-literal">True</span>:<br>        server.execute(<span class="hljs-string">"gamemode survival "</span> + info.player)<br></code></pre></td></tr></tbody></table></figure><p>使用<code>.c和.s</code>在观察者和生存模式间切换，很简洁。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学-抗混叠</title>
    <link href="/article/7fa2/"/>
    <url>/article/7fa2/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>本文致力于记录有关计算机图形学中抗混叠/反走样(anti-aliasing)的相关知识<span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</p><span id="more"></span><h2 id="混叠的产生">混叠的产生</h2><p>计算机图形学的光栅化就是屏幕对二维图像的采样，是一个连续到离散变化的过程。</p><p>在采样的过程中会产生错误的现象(Artifacts)：</p><ul><li><p>锯齿(Jaggies)——空间采样<img src="https://imgbed.scubot.com/CG-2-1.png" style="zoom:50%;"></p></li><li><p>摩尔纹(Moire Pattern)——空间采样</p><p><img src="https://imgbed.scubot.com/CG-2-2.png" style="zoom:50%;"></p></li><li><p>货轮效应(Wagon Wheel Illusion)——时间采样</p><p><img src="https://imgbed.scubot.com/CG-2-3.png" style="zoom:50%;"></p></li></ul><p><strong>当采样的频率跟不上信号变化的频率时，就会产生Artifacts，也可以称作Aliasing-混叠/走样</strong></p><h3 id="傅里叶级数展开">傅里叶级数展开</h3><p>任何的周期函数，都可以写成一系列正弦和余弦函数的线性组合与一个常数项的和。<span class="math display">\[f(x)=A_0/2 + \sum_{n=1}^{+\infty} A_n\cdot \sin(2\pi nx /P + \phi_n)\]</span> <span class="math inline">\(f(x)\)</span>是周期为<span class="math inline">\(P\)</span>的周期函数。</p><p>效果图：</p><p><img src="https://imgbed.scubot.com/CG-2-4.png"></p><blockquote><p>关于傅里叶级数更多的是介绍可以参考<a href="https://wzbtech.com/tech/fourier1.html">这篇文章</a>，后续会补充傅里叶级数展开到傅里叶变换的过渡内容。</p></blockquote><h3 id="傅里叶变换与逆变换">傅里叶变换与逆变换</h3><p>傅里叶变换(Fourier transform)可以将信号从空域/时域(Spatialdomain)转化到频域(Frequencydomain)，傅里叶逆变换可以将这个过程反过来。</p><p><img src="https://imgbed.scubot.com/CG-2-5.png"></p><p>时域到频域变换的更直观的理解：</p><p><img src="https://imgbed.scubot.com/CG-2-6.png"></p><p>未完待续...</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脚本化备份hexo项目&amp;部署博客</title>
    <link href="/article/d553/"/>
    <url>/article/d553/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>我习惯了用typora写markdown文件，前几天写博客时突然文件内容全部丢失，找到的最近的备份还是半个小时之前的内容，还是觉得很遗憾。</p><p>由于hexo部署博客内容是先在本地将markdown渲染成html再传到github上部署，所以github上是没有博客的原稿markdown内容的。</p><p>为了方便移植本地环境，也为了防止文件丢失的事情再次发生，我写了一个shell脚本用来帮助我备份整个hexo项目。</p><span id="more"></span><h2 id="使用备份分支">使用备份分支</h2><p>hexo会将本地编译好的<code>public/</code>等文件内容传到对应的github库上，默认使用master分支，且hexo项目里只有<code>.deploy_git/</code>文件夹，并不包含<code>.git/</code>文件夹，无法直接用git管理版本，所以我就在博客对应的github仓库里新建了一个hexo分支用来备份整个hexo项目内容。</p><ol type="1"><li><p>在github上的<code>&lt;username&gt;.github.io</code>仓库内新建<code>hexo</code>分支</p><p><img src="https://imgbed.scubot.com/hexo_backup-1.png"></p><blockquote><p>如果你使用了<code>hexo-blog-encrypt</code>等博文加密插件，可能不希望某些文章内容被公开，那么你可以选择新建一个私有的github库用来备份hexo项目</p></blockquote></li><li><p>在本地其他目录下输入指令<code>git clone -b hexo https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</code>用来将新的分支clone到本地</p></li><li><p>clone到本地后，将<code>&lt;username&gt;.github.io/</code>文件夹下的<code>.git/</code>文件复制到<strong>你的hexo项目的根目录下</strong>，clone到本地的文件夹就可以删掉了</p></li><li><p>将所用主题的<code>.git</code>文件删除，即<code>hexo/themes/&lt;your_theme&gt;/.git/</code></p><blockquote><p>社区的主题项目通常也是用git管理，hexo项目的.git与主题的.git嵌套会出问题</p></blockquote></li><li><p>在hexo项目下创建并切换新分支<code>hexo</code>：<code>git checkout -b hexo</code></p></li><li><p>创建并更改<code>.gitignore</code>文件，忽略hexo自动生成的文件与_config.yml配置文件(可能有秘钥等信息)，内容参考：</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br>_config<span class="hljs-number">.</span>yml<br></code></pre></td></tr></tbody></table></figure></li><li><p>将本地hexo项目强行推送到远端<code>hexo分支</code>：<code>git push origin hexo --force</code></p></li></ol><p>完成上述几步操作之后即可查看github上<code>hexo</code>分支是否同步了本地的项目，如果操作正确应该是没问题的。</p><h2 id="脚本化备份与部署">脚本化备份与部署</h2><p>经过上面的操作，我们就可以每次部署博客时先备份项目。为了操作简便，我写了一个简单地shell脚本用来帮助我备份和部署博客项目，代码在文章末尾。</p><h3 id="注意事项">注意事项</h3><p>因为是shell脚本，所以需要gitbash或linux环境。我在本地测试时gitbash和ubuntu(子系统)都可以。</p><p>可以将脚本命名为<code>update.sh</code>放在hexo项目的根目录下。</p><p>使用脚本时需要确保<strong>当前目录是hexo的根目录</strong>，通过<code>./update.sh</code>运行脚本。</p><h3 id="脚本参数">脚本参数</h3><ul><li>无参数：先备份hexo项目，再部署博客，备份项目时提交信息为"[Backup&amp; Depoly] &lt;日期: 时间&gt;"。</li><li><code>-a</code>或<code>--all</code>：先备份hexo项目，再部署博客，备份项目的提交信息如果没有<code>-m</code>指定，那么会自动生成为"[Backup&amp; Deploy] &lt;日期: 时间&gt;"。</li><li><code>-b</code>或<code>--backup</code>：只进行备份hexo项目的功能，如果没有指定提交信息，则自动生成"[Backup]&lt;日期: 时间&gt;"。</li><li><code>-d</code>或<code>--deploy</code>：只部署博客。</li><li><code>-m</code>或<code>--message</code>：后接参数表示提交信息，用于指定备份hexo项目时的提交信息。</li></ul><h3 id="脚本内容">脚本内容</h3><blockquote><p><a href="/static/update.sh">update.sh</a></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash">OP_BACKUP=<span class="hljs-literal">false</span><br>OP_DEPLOY=<span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-keyword">while</span> [ -n <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ]<br><span class="hljs-keyword">do</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> <span class="hljs-keyword">in</span><br>-b|--backup)<br>OP_BACKUP=<span class="hljs-literal">true</span><br>;;<br>-d|--deploy)<br>OP_DEPLOY=<span class="hljs-literal">true</span><br>;;<br>-a|--all)<br>OP_DEPLOY=<span class="hljs-literal">true</span><br>OP_BACKUP=<span class="hljs-literal">true</span><br>;;<br>-m|--message)<br>MSG=<span class="hljs-variable">$2</span><br><span class="hljs-built_in">shift</span> 2<br>;;<br>*)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"illegal option"</span><br><span class="hljs-built_in">exit</span> 1<br>;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-built_in">shift</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$OP_BACKUP</span>"</span> = <span class="hljs-literal">false</span> -a <span class="hljs-string">"<span class="hljs-variable">$OP_DEPLOY</span>"</span> = <span class="hljs-literal">false</span> ] ; <span class="hljs-keyword">then</span><br>OP_BACKUP=<span class="hljs-literal">true</span><br>OP_DEPLOY=<span class="hljs-literal">true</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">"<span class="hljs-variable">$MSG</span>"</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$OP_BACKUP</span>"</span> = <span class="hljs-literal">true</span> -a <span class="hljs-string">"<span class="hljs-variable">$OP_DEPLOY</span>"</span> = <span class="hljs-literal">true</span> ]; <span class="hljs-keyword">then</span><br>MSG=<span class="hljs-string">"[Backup &amp; Deploy] <span class="hljs-subst">$(date <span class="hljs-string">"+%Y-%m-%d %H:%M:%S"</span>)</span>"</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">"<span class="hljs-variable">$OP_BACKUP</span>"</span> = <span class="hljs-literal">true</span> -a <span class="hljs-string">"<span class="hljs-variable">$OP_DEPLOY</span>"</span> = <span class="hljs-literal">false</span> ]; <span class="hljs-keyword">then</span><br>MSG=<span class="hljs-string">"[Backup only] <span class="hljs-subst">$(date <span class="hljs-string">"+%Y-%m-%d %H:%M:%S"</span>)</span>"</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># run </span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$OP_BACKUP</span>"</span> = <span class="hljs-literal">true</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-comment"># 备份hexo项目</span><br>git checkout hexo<br>git add .<br>git commit -m <span class="hljs-string">"<span class="hljs-variable">$MSG</span>"</span><br>git push origin hexo<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$OP_DEPLOY</span>"</span> = <span class="hljs-literal">true</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-comment"># 部署博客内容</span><br>hexo clean<br>hexo d -g<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学-变换</title>
    <link href="/article/bfe1/"/>
    <url>/article/bfe1/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>用来记录计算机图形学中关于变换的相关知识，内容并不详尽，只记录了我认为比较重要的内容。</p><span id="more"></span><h2 id="齐次坐标与仿射变换">齐次坐标与仿射变换</h2><p>对二维空间中的向量<span class="math inline">\((x, y)\)</span>加入第三维的值 <span class="math inline">\(w\)</span>，即可表示齐次坐标(需要归一化，同除以<span class="math inline">\(w\)</span>)：</p><ul><li>二维空间中的点 = <span class="math inline">\((x, y,1)^\top\)</span></li><li>二维空间中的向量 = <span class="math inline">\((x, y,0)^\top\)</span></li></ul><p>可以满足以下的操作：</p><ul><li>向量 + 向量 = 向量</li><li>点 - 点 = 向量</li><li>点 + 向量 = 点</li><li>点 + 点 = 两点的中点</li></ul><p><strong>用齐次坐标表示二维仿射变换</strong></p><blockquote><p>仿射变换 = 线性变换(缩放/镜像/旋转等) + 平移(非线性变换) <span class="math display">\[\begin{pmatrix}x^\prime \\ y^\prime \\ 1\end{pmatrix}=\begin{pmatrix}a &amp; b &amp; t_x \\ c &amp; d &amp; t_y \\ 0 &amp; 0 &amp; 1\end{pmatrix}\cdot\begin{pmatrix}x \\ y \\ 1\end{pmatrix}\]</span></p></blockquote><p><strong>表示先进行线性变换，再平移</strong></p><p>其中三种重要的变换为：</p><ul><li><p>缩放 <span class="math display">\[S(s_x, s_y) =\begin{pmatrix}s_x &amp; 0 &amp; 0 \\ 0 &amp; s_y &amp; 0 \\ 0 &amp; 0 &amp; 1\end{pmatrix}\]</span></p></li><li><p>旋转(以原点为旋转中心逆时针) <span class="math display">\[R(\alpha) =\begin{pmatrix}\cos \alpha &amp; -\sin \alpha &amp; 0 \\ \sin \alpha &amp; \cos \alpha&amp; 0 \\ 0 &amp; 0 &amp; 1\end{pmatrix}\]</span> <strong>其中<span class="math inline">\(R(\alpha) ^ \top =R(\alpha)^{-1}\)</span>是正交矩阵</strong></p><blockquote><p>可以这样理解：</p><p><span class="math inline">\(R(\alpha)^{-1}\)</span>表示旋转<span class="math inline">\(\alpha\)</span>的逆变换，即旋转<span class="math inline">\(-\alpha\)</span>角度，可以表示为 <span class="math display">\[R(\alpha)^{-1} = R(-\alpha) =\begin{pmatrix}\cos (-\alpha) &amp; -\sin (-\alpha) \\\sin (-\alpha) &amp; \cos (-\alpha)\end{pmatrix} =\begin{pmatrix}\cos \alpha &amp; \sin \alpha \\-\sin \alpha &amp; \cos \alpha\end{pmatrix} =R(\alpha) ^ \top\]</span></p></blockquote></li><li><p>平移</p><p><span class="math display">\[T(t_x, t_y) =\begin{pmatrix}1 &amp; 0 &amp; t_x \\ 0 &amp; 1 &amp; t_y \\ 0 &amp; 0 &amp; 1\end{pmatrix}\]</span></p></li></ul><h2 id="变换的组合">变换的组合</h2><p>先平移后旋转：</p><p><img src="https://imgbed.scubot.com/CG-1-1.png"></p><p>先旋转后平移：</p><p><img src="https://imgbed.scubot.com/CG-1-2.png"></p><p>因为矩阵乘法不满足交换律，多种变换组合起来时<strong>从右向左运算</strong></p><p><img src="https://imgbed.scubot.com/CG-1-3.png"></p><p>因为矩阵满足结合律，n个变换矩阵可以先做乘法，最后组合起来时维数不变。</p><h2 id="变换的分解">变换的分解</h2><p>因为旋转矩阵默认绕原点旋转，如果我们需要表示一个绕任意点旋转的变换，则需要用到矩阵的分解。</p><p><img src="https://imgbed.scubot.com/CG-1-4.png"></p><p>表示为： <span class="math display">\[T(c) \cdot R(\alpha) \cdot T(-c)\]</span></p><h2 id="三维变换中的旋转">三维变换中的旋转</h2><p>沿三个坐标轴旋转：</p><p><img src="https://imgbed.scubot.com/CG-1-5.png"></p><blockquote><p>需要注意的是<span class="math inline">\(R_y(\alpha)\)</span>中<span class="math inline">\(\sin\alpha\)</span>的正负比较特殊，是因为在右手坐标系下，Z轴 <span class="math inline">\(\times\)</span> X轴 = Y轴，而不是X轴 <span class="math inline">\(\times\)</span> Z轴。</p></blockquote><p>对于任意三维旋转，使用欧拉角来表示： <span class="math display">\[R_{xyz}(\alpha, \beta, \gamma) = R_x(\alpha)R_y(\beta)R_z(\gamma)\]</span> 对应的角度分别叫做：roll，pitch，yaw</p><p><strong>沿着任意方向轴旋转(过原点)</strong></p><p>方向向量为<span class="math inline">\(\vec n\)</span>，单位矩阵<span class="math inline">\(I\)</span> <span class="math display">\[R(\vec n, \alpha) = \cos(\alpha)I + (1 - \cos(\alpha))\vec n \vec n^\top+ \sin(\alpha)\begin{pmatrix}0 &amp; -\vec n_z &amp; \vec n_y \\ \vec n_z &amp; 0 &amp; -\vec n_x \\-\vec n_y &amp; \vec n_x &amp; 0\end{pmatrix}\]</span> <strong>四元数</strong></p><p>用于解决万向节死锁，有利于旋转与旋转之间的角度差值。</p><h2 id="观测变换-viewing-trans">观测变换 Viewing trans</h2><p>包括<strong>模型变换</strong>、<strong>视图/相机变换</strong>以及<strong>投影变换</strong>。</p><blockquote><p>也称作MVP(Model-View-Projection)变换</p></blockquote><h3 id="模型变换-model-trans">模型变换 Model trans</h3><p>用于定义物体与物体之间的位置关系。</p><h3 id="视图相机变换-viewcamera-trans">视图/相机变换 View/Cameratrans</h3><p>定义相机的位置：</p><ul><li>相机的位置(Position)：<span class="math inline">\(\vece\)</span></li><li>相机朝向(Look-at/gaze direction)：<span class="math inline">\(\vecg\)</span></li><li>相机向上方向(Up direction)：<span class="math inline">\(\vect\)</span></li></ul><blockquote><p>下面为了表示方便，用 <span class="math inline">\(x_g\)</span> 来表示<span class="math inline">\(\vec g\)</span> 在X轴的分量，其他同理。</p></blockquote><p>将相机的位置固定(标准位置)：<strong>相机放在原点，朝Z轴负方向看，上方为Y轴</strong></p><p><span class="math inline">\(M_{view}\)</span>计算：</p><ol type="1"><li><p>将<span class="math inline">\(\vec e\)</span>平移到原点 <span class="math display">\[T_{view} =\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; -x_e \\0 &amp; 1 &amp; 0 &amp; -y_e \\0 &amp; 0 &amp; 1 &amp; -z_e \\0 &amp; 0 &amp; 0 &amp; 1\end{pmatrix}\]</span></p></li><li><p>将<span class="math inline">\(\vec g\)</span>旋转到-Z，将<span class="math inline">\(\vec t\)</span>旋转到Y，将<span class="math inline">\(\vec g \times \vec t\)</span>旋转到X</p><p>该旋转矩阵定义为 <span class="math inline">\(R_{view}\)</span> ，<span class="math inline">\(R_{view}\)</span>不好直接求值，可以利用旋转的正交矩阵特性： <span class="math inline">\(R_{view}^{-1} = R_{view}^\top\)</span></p><p>求得： <span class="math display">\[R_{view}^{-1} =\begin{pmatrix}x_{\hat g \times \hat t} &amp; x_t &amp; x_{-g} \\y_{\hat g \times \hat t} &amp; y_t &amp; y_{-g} \\z_{\hat g \times \hat t} &amp; z_t &amp; z_{-g}\end{pmatrix}\]</span></p><p>可以验证: <span class="math display">\[R_{view}^{-1} \cdot \begin{pmatrix}1\\0\\0\end{pmatrix} =\begin{pmatrix}x_{\hat g \times \hat t} \\ y_{\hat g \times \hat t} \\z_{\hat g \times \hat t} \end{pmatrix}\]</span> 即可将X轴的单位向量变换成 <span class="math inline">\(\hat g\times \hat t\)</span>的方向。</p><p>也可以理解成 <span class="math inline">\(R_{view}^{- 1}\)</span>的三个列向量分别是在就坐标系下表示的新坐标系的基向量。</p><p>由于正交矩阵的性质： <span class="math display">\[R_{view} = (R_{view}^{-1})^\top =\begin{pmatrix}x_{\hat g \times \hat t} &amp; y_{\hat g \times \hat t} &amp; z_{\hat g\times \hat t} &amp; 0 \\x_t &amp; y_t &amp; z_t &amp; 0 \\x_g &amp; y_g &amp; z_g &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{pmatrix}\]</span> 所以视图变换的矩阵可以表示为：</p></li></ol><p><span class="math display">\[M_{view}=R_{view}T_{view}\]</span></p><blockquote><p>注意是先平移再旋转。</p></blockquote><h3 id="投影变换-projection-trans">投影变换 Projection trans</h3><p>在计算机图形学中，投影是从三维空间向二维空间的变换(不可逆，因为缺失了一个维度的信息)</p><p>一般认为投影变换有两种：<strong>正交投影(Orthographicprojection)</strong>和<strong>透视投影(Perspectiveprojection)</strong></p><p>有以下性质：</p><ul><li>正交投影不会改变三维空间中的平行关系，透视投影有可能改变平行关系。</li><li>正交投影可以认为是相机离成像平面无限远时的透视投影。</li></ul><p><img src="https://imgbed.scubot.com/CG-1-6.png"></p><h4 id="正交投影-orthographic-projection">正交投影 Orthographicprojection</h4><p>简单可以理解为将Z轴去除掉，就可以得到一个二维的平面</p><p><img src="https://imgbed.scubot.com/CG-1-7.png"></p><p>在计算机图形学中，更标准的做法是将物体的 <strong>轴对齐包围盒(AxisAlign Bounding Box，简称AABB)</strong> 变换到<strong>标准立方体(Canonical Cube，即<span class="math inline">\([-1,1]^3\)</span>)</strong>，具体经过两步：</p><p><img src="https://imgbed.scubot.com/CG-1-8.png"> &gt;AABB变量定义： &gt; - X轴的最小值<span class="math inline">\(l\)</span>(left)，X轴的最大值<span class="math inline">\(r\)</span>(right) &gt; - Y轴的最小值<span class="math inline">\(b\)</span>(bottom)，Y轴的最大值<span class="math inline">\(t\)</span>(top) &gt; - Z轴的最小值<span class="math inline">\(f\)</span>(far)，Z轴的最大值<span class="math inline">\(n\)</span>(near) 1. 将AABB的中心平移至原点 2.将AABB缩放至标准立方体(边长为2)</p><p>即可得出： <span class="math display">\[M_{ortho} =\begin{pmatrix}\frac{2}{r - l} &amp; 0 &amp; 0 &amp; 0 \\0 &amp; \frac{2}{t - b} &amp; 0 &amp; 0 \\0 &amp; 0 &amp; \frac{2}{n - f} &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 1\end{pmatrix}\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; -\frac{r + l}{2} \\0 &amp; 1 &amp; 0 &amp; -\frac{t + b}{2} \\0 &amp; 0 &amp; 1 &amp; -\frac{n + f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{pmatrix}\]</span></p><p>暂时不考虑旋转，且映射到标准立方体的过程中会导致物体被拉伸或缩放，后续还会进行视口变换。</p><h4 id="透视投影-perspective-projection">透视投影 Perspectiveprojection</h4><p>透视投影的成像空间是一个 <strong>视锥(Frustum)</strong>我习惯叫六面台体，而正交投影的成像空间是长方体。</p><p>而正交投影我们已经能理解并推导出变换矩阵，那就可以将透视投影的成像空间(六面台体)变化成正交投影的成像空间(长方体)，再进行正交投影，这样不就是一次透视投影吗。</p><blockquote><p>考虑人在远处可以看到更多的物体，但最后成像必然都是与近处物体在同一二维平面(视网膜)上，且远处物体会变小(被压缩了)，相当于人眼进行透视投影的时候也是将远处的空间压缩到与近处相同，即长方体成像空间。所以将透视投影分成两步：压缩成像空间和正交投影是合理的。</p></blockquote><p><img src="https://imgbed.scubot.com/CG-1-9.png"></p><p>现在关注如何<strong>压缩/变换成像空间</strong>，在计算机图形学中可以做以下假设：</p><ol type="1"><li>最近平面(成像平面)上的所有点经过透视投影<strong>不变</strong>。</li><li>最远平面上的所有点的Z值在变换成像空间后 <strong>不变</strong>。</li><li>最远平面上的中心点的坐标在变换成像空间后<strong>不变</strong>。</li></ol><p>可以将变换成像空间定义为矩阵：<span class="math inline">\(M_{p\too}\)</span></p><p>从X轴负方向看Y-Z平面：</p><p><img src="https://imgbed.scubot.com/CG-1-10.png"></p><p>从原点(相机)出发，近平面的点 <span class="math inline">\((x^\prime,y^\prime, z^\prime)\)</span> 与成像空间内任意一点 <span class="math inline">\((x, y, z)\)</span> 在同一直线上，在经过<span class="math inline">\(M_{p\too}\)</span>变换后这两个点应该x和y都相同。即 <span class="math inline">\(M_{p\to o}\)</span> 应该使： <span class="math display">\[\begin{cases}y^\prime = \frac{n}{z} y \\[2ex]x^\prime = \frac{n}{z} x\end{cases}\]</span>因为只假设了远近两平面的点的Z坐标不变，而成像空间内其他的点(即上述的坐标<span class="math inline">\((x, y, z)\)</span>)的Z坐标不知道应该怎么变化，所以对以上的变化规则可写成表达式： <span class="math display">\[M_{p \to o}^{(4\times 4)}\begin{pmatrix} x\\y\\z\\1\end{pmatrix}=\begin{pmatrix}nx/z \\ ny/z \\ \rm{unknown} \\ 1\end{pmatrix}\overset {\times z}{=}\begin{pmatrix}nx \\ ny \\ \rm{unknown} \\ z\end{pmatrix}\]</span></p><blockquote><p>这里利用了齐次坐标的性质，齐次坐标使用时需要归一化，最后一项永远会是1</p></blockquote><p>可以分析得：</p><p><span class="math display">\[M_{p \to o} = \begin{pmatrix} n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\ ? &amp; ? &amp; ? &amp; ? \\ 0 &amp; 0&amp; 1 &amp; 0\end{pmatrix}\]</span></p><p>同时，根据我们之前的假设，最近平面上的点 <span class="math inline">\((x, y, n, 1)\)</span> 变化前后是不变的，可得：</p><p><span class="math display">\[M_{p\to o}^{(4\times 4)} \begin{pmatrix} x \\ y \\ n \\ 1 \end{pmatrix}=\begin{pmatrix} n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\ A &amp; B &amp; C &amp; D \\ 0 &amp; 0&amp; 1 &amp; 0\end{pmatrix}\begin{pmatrix} x \\ y \\ n \\ 1 \end{pmatrix}==\begin{pmatrix} nx \\ ny \\ n^2 \\ n \end{pmatrix}\]</span></p><blockquote><p>其中ABCD为未知量</p></blockquote><p>针对<span class="math inline">\(M_{p\to o}^{(4\times4)}\)</span>的第三个行向量 <span class="math inline">\((A, B, C,D)\)</span> 可以列出： <span class="math display">\[(A, B, C, D)\begin{pmatrix} x \\ y \\ n \\ 1 \end{pmatrix} == n^2\]</span> 分析可得，<span class="math inline">\(n^2\)</span>是一个常量，与AABB有关，与取的任意点<span class="math inline">\((x, y, z, 1)\)</span> 无关，所以 <span class="math inline">\(A = 0\)</span> 且 <span class="math inline">\(B =0\)</span> ， <span class="math inline">\(C\)</span> 和 <span class="math inline">\(D\)</span> 不好判断，即可列出等式： <span class="math display">\[Cn + B = n^2\]</span> 同理，最远平面上的所有点<span class="math inline">\((x, y, f,1)\)</span>变化前后Z轴上的值不变，即可列出： <span class="math display">\[Cf+B=f^2\]</span></p><blockquote><p>省略了过程：</p><p><span class="math display">\[M_{p\to o}^{(4\times 4)} \begin{pmatrix} x \\ y \\ f \\ 1 \end{pmatrix}=\begin{pmatrix} n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; C &amp; D \\ 0 &amp; 0&amp; 1 &amp; 0\end{pmatrix}\begin{pmatrix} x \\ y \\ f \\ 1 \end{pmatrix}==\begin{pmatrix} nx \\ ny \\ f^2 \\ f \end{pmatrix}\]</span></p></blockquote><p>列方程可解： <span class="math display">\[\begin{cases}Cn + B = n^2 \\[2ex]Cf + B = f^2\end{cases} \Longrightarrow\begin{cases}C = n + f \\[2ex]D = -nf\end{cases}\]</span></p><p>可得： <span class="math display">\[M_{p\to o} = \begin{pmatrix} n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; n + f &amp;  -nf \\ 0 &amp;0 &amp; 1 &amp; 0\end{pmatrix}\]</span> 综上可得，投影变换可以写为：</p><p><span class="math display">\[M_{persp} = M_{ortho}M_{p \to o} = \begin{pmatrix}\frac{2}{r - l} &amp; 0 &amp; 0 &amp; -\frac{r + l}{2} \\0 &amp; \frac{2}{t - b} &amp; 0 &amp; -\frac{t + b}{2} \\0 &amp; 0 &amp; \frac{2}{n - f} &amp; -\frac{n + f}{2} \\0 &amp; 0 &amp; 0 &amp; 1\end{pmatrix}\begin{pmatrix}n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\0 &amp; 0 &amp; n + f &amp;  -nf\\ 0 &amp; 0 &amp; 1 &amp; 0\end{pmatrix}\]</span></p><p><strong>思考</strong>：成像空间中的任意一点经过 <span class="math inline">\(M_{p \to o}\)</span> 变换后Z轴的分量如何变化？</p><p>对于任意一点 <span class="math inline">\((x,y ,z,1)\)</span>，经过变换：</p><p><span class="math display">\[\begin{pmatrix} n &amp; 0 &amp; 0 &amp; 0 \\0 &amp; n &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; n + f &amp;  -nf \\ 0 &amp;0 &amp; 1 &amp; 0\end{pmatrix}\begin{pmatrix}x \\ y \\ z \\ 1\end{pmatrix}=\begin{pmatrix}nx \\ ny\\ (n + f)z - nf \\ z\end{pmatrix}=\begin{pmatrix}nx /z \\ ny/z \\ n + f - nf/z \\ 1\end{pmatrix}\]</span></p><blockquote><p>关于n和f的意义是Z轴上的坐标，此时 <span class="math inline">\(f &lt;n\)</span> ，下面的函数中可以看做是近远平面到相机的距离，此时 <span class="math inline">\(n &lt; f\)</span>，此种改变并不会影响上述推导。</p></blockquote><p>设 <span class="math inline">\(f(z) = -nf /z  +n + f\)</span>是变换前后Z轴分量的映射关系，可以看出是关于z的反比例函数的变形，可以验证<span class="math inline">\(f(n)=n\)</span> ， <span class="math inline">\(f(f)=f\)</span> ，故可以画出函数图像：</p><p><img src="https://imgbed.scubot.com/CG-1-11.png"></p><p>可以看出当 <span class="math inline">\(n &lt; z &lt; f\)</span>时，<span class="math inline">\(f(z) &lt; g(z)\)</span>，故<strong>在进行压缩成像空间时，六面台体内的点被挤向了远处</strong>。</p><blockquote><p>我个人对这种现象的看法是：在六面台体的成像空间中，单位空间的信息量是相同的，在经过<span class="math inline">\(M_{p \to o}\)</span>变换后六面台体的后部被挤压导致形成的长方体成像空间中的单位空间信息密度更大，所以整体上空间中的点更靠后集中。</p></blockquote><h2 id="总结">总结</h2><p>本篇记录了计算机图形学中关于坐标变换的部分内容，主要参考了<a href="https://www.bilibili.com/video/BV1X7411F744">GAMES101</a></p><p>我文章里的内容并不全面，可能后续会补充内容。</p>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sourcemod插件开发记录</title>
    <link href="/article/14fd/"/>
    <url>/article/14fd/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>sourcemod是基于source引擎的插件系统，广泛用于l4d2，csgo等使用source引擎的游戏中，可以用来处理游戏事件和玩家的行为等。</p><p>sourcemod采用sourcepawn编写，sourcepawn是一种轻量级编译语言，编译器由<a href="https://www.sourcemod.net/downloads.php?branch=stable">sourcemod官方下载页面</a>给出，包含linux/windows/macos全平台版本。</p><p>sourcepawn的语法类似于c/c++与java的融合，也有部分独特的关键字，不过需要注意的是sourcepawn是一种标准的面向过程的语言，对结构体的支持并不完善，sourcemod提供了source引擎的多种事件和api用于方便插件的编写。</p><span id="more"></span><h2 id="技巧总结">技巧总结</h2><p>关于更详细的插件编写教程可以参考<a href="https://www.sourcemod.net/">sourcemod官网</a>或<a href="https://www.bilibili.com/video/BV1Pb411E7W6">b站教学</a>，这里只总结一些我在开发过程中用到的一些技巧以及值得注意的事情。</p><h3 id="热插拔">热插拔</h3><p>理论上，sourcemod的<code>sm plugins load &lt;plugin&gt;</code>和<code>sm plugins unload &lt;plugin&gt;</code>指令可以在游戏内(控制台)加载/卸载某个插件，但我在实践中并不能有效果，大部分情况下需要<strong>重启服务器</strong>或<strong>更换地图</strong>才能刷新插件列表，可能是sourcemod的bug也可能是我有些地方没有配置好。</p><h3 id="menu菜单逻辑">menu菜单逻辑</h3><p>sourcemod可以实现在游戏中加载菜单，玩家可以通过数字键去选中菜单中的某一项进入下一步操作。<strong>menu本身就是一个FSM有限状态机</strong>，插件中menu对每个玩家的状态都有记录并保持其逻辑的正确性，接下来我简要说明编写menu需要注意的地方。</p><h4 id="创建menu">创建menu</h4><p>menu的创建需要一个handle用来保存菜单实例，通过sourcemod提供的<code>CreateMenu(MenuCallBack)</code>进行创建，返回值即为handle，<code>MenuCallBack</code>为回调函数，用来处理玩家选中菜单中某项需要执行的逻辑。</p><p>需要注意的是menu所列的选项大部分可以通过<code>AddMenuItem(handle, &lt;id&gt;, &lt;message&gt;)</code>来被开发者自定义，还有三种选项是menu自带的，可以通过这样来设置：</p><ol type="1"><li><code>SetMenuPagination(handle, &lt;int&gt;)</code>设置菜单中翻页按钮的位置</li><li><code>SetMenuExitButton(handle, &lt;bool&gt;)</code>设置是否开启菜单的退出按钮</li><li><code>SetMenuExitBackButton(handle, &lt;bool&gt;)</code>设置是否开启菜单的返回上一级父菜单按钮(需要再回调函数中额外处理)</li></ol><p>最后设置完可以使用<code>DisplayMenu(handle, client, MENU_TIME_FOREVER)</code>将菜单显示(永久)。</p><h4 id="回调函数menucallback">回调函数MenuCallBack</h4><p>menu回调函数定义为<code>public MenuCallBack(Handle:menuhandle, MenuAction:action, client, Position)</code>，其中函数名字可以自定义，与创建menu时注册的回调函数保持一致即可。其中四个参数：</p><ol type="1"><li><code>Handle:menuhandle</code>为创建menu时的handle，可以理解为menu的实例</li><li><code>MenuAction:action</code>中action是枚举类的实例，记录了玩家触发菜单回调函数所执行的操作种类</li><li><code>client</code>玩家索引</li><li><code>Position</code>玩家触发菜单中的选项位置</li></ol><p>需要注意的是，如果设置了返回上一级父菜单的按钮，需要在回调函数中判断<code>Position</code>是否为<code>-6</code>，如果是，则表示选中了返回父菜单，即可执行重建父菜单的逻辑。</p><p>默认情况下用户选中某个菜单按钮之后菜单执行完任务就会消失，就算设置了<code>MENU_TIME_FOREVER</code>也是这样，如果需要用户选择完菜单仍保持显示，则需要在<code>action==MenuAction_Select</code>条件下设置<code>DisplayMenuAtItem(menuhandle, client, GetMenuSelectionPosition(), MENU_TIME_FOREVER)</code>来实现。</p><p>例：(hltv.sp中的某个菜单回调函数)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultMenuCallBack</span><span class="hljs-params">(Handle:menuhandle, MenuAction:action, client, Position)</span> {<br>    <span class="hljs-keyword">if</span> (action == MenuAction_Select) {<br>        decl String:Item[STRLENGTH];<br>        GetMenuItem(menuhandle, Position, Item, sizeof(Item));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> StringToInt(Item);<br>        queryProRecord(client, idx);<br><br>        DisplayMenuAtItem(menuhandle, client, GetMenuSelectionPosition(), MENU_TIME_FOREVER);<br>    }<br>    <span class="hljs-keyword">if</span> (Position == -<span class="hljs-number">6</span>) {<br>        setMainMenu(client);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="httphttps请求实现">Http/Https请求实现</h3><p>sourcemod社区里有对应的扩展：<a href="https://forums.alliedmods.net/showthread.php?t=146019">System2</a>，按要求配置好环境即可在sourcemod中使用网络请求的功能。</p><p>我比较常用的是http的GET和POST方法，GET一半用于获取网络api的数据到插件本地，POST一般用于将插件本地的数据发送到网站api，不过本质上两种方法没有严格的区分，习惯而已。</p><h4 id="get">GET</h4><p>按照教程通过<code>new System2HTTPRequest(HttpCallBack, &lt;str: url&gt;, &lt;param1&gt;, &lt;param2&gt; ...)</code>，因为GET请求中可以将请求的内容直接体现在url里，所以可以直接在url里使用占位符，在其后补上对应的变量，数量不固定。</p><h4 id="post">POST</h4><p>与GET相同，只不过在新建请求实例的时候只有两个参数，url是固定的值不带变量，需要额外通过<code>httpRequest.SetData("param1=%s&amp;param2=%s", param1, param2)</code>来设置变量，参数用<strong>&amp;</strong>分隔。</p><h4 id="额外数据">额外数据</h4><p>通常情况下，插件发送网络请求都与某个玩家的操作有关，所以需要在新建请求的时候记录玩家的id，可以通过<code>httpRequest.Any = client</code>记录到请求中，在回调函数里通过<code>int client = request.Any</code>即可获取之前保存的内容。</p><h4 id="json数据解析">Json数据解析</h4><p>sourcemod有一个很好用的json解析库，需要手动添加：<a href="https://github.com/clugg/sm-json">sm-json</a>，文档里很详细的说明了sourcemod里json的用法，很适合解析和保存网络请求拿到的数据。</p><h2 id="我的开发">我的开发</h2><p>前段时间在为<a href="www.csgowiki.top">CSGOWiki</a>开发一些服务器插件，其中大部分我已经公开到<a href="https://github.com/hx-w/CSGOWiki-Plugins">我的仓库</a>中了，欢迎指教。</p><h2 id="一些有用的链接">一些有用的链接</h2><ul><li>sourcemod社区：https://forums.alliedmods.net/index.php</li><li>sourcemod官网：https://www.sourcemod.net/</li><li>sourcemod Api文档：https://sm.alliedmods.net/new-api/</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSGO</tag>
      
      <tag>sourcemod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CYK算法实现</title>
    <link href="/article/7120/"/>
    <url>/article/7120/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>在计算机科学领域，CYK算法（也称为Cocke–Younger–Kasami算法）是一种用来对上下文无关文法（CFG，ContextFree Grammar）进行语法分析（parsing）的算法。该算法最早由John Cocke,Daniel Younger and Tadao Kasami分别独立提出，其中JohnCocke还是1987年度的图灵奖得主。CYK算法是基于动态规划思想设计的一种自底向上语法分析算法。</p><span id="more"></span><h2 id="乔姆斯基范式">乔姆斯基范式</h2><p>CNF(Chomsky Normal Form)是一种这样的语法标准： 如果一个CFG <span class="math inline">\(\epsilon-free\)</span>，而且它的规则只有如下两种形式:</p><ul><li><span class="math inline">\(A \rightarrow B C\)</span></li><li><span class="math inline">\(A \rightarrow a\)</span></li></ul><p>那么这个CFG就是CNF形式的，可见CNF语法都是二分叉的。任何语法都可以转化成一个弱等价的CNF形式，具体方法如下：</p><ul><li>Step 1: Convert <span class="math inline">\(A \rightarrowBc\)</span> to <span class="math inline">\(A\rightarrow BC, C\rightarrowc\)</span></li><li>Step 2: Convert <span class="math inline">\(A \rightarrowBCD\)</span> to <span class="math inline">\(A \rightarrow BX, X\rightarrow CD\)</span></li></ul><h2 id="cyk算法">CYK算法</h2><p>CYK算法处理的语法必须是CNF形式的，所以如果输入的是任意文法，那么需要按照前面的步骤把CFG转换成CNF形式。</p><p>CYK算法是用来判断一个字符串是否属于某个CNF语法，故设输入的字符串w长度为n。</p><p>接下来我们需要用程序填一个动态规划的状态转移表，这里我们叫这个表parsetable。</p><p>parse table的规模为<span class="math inline">\((n + 1) \timesn\)</span></p><p>我们定义<span class="math inline">\(PT[n + 1][n]\)</span>表示parsetable，且<span class="math inline">\(PT[n,:]\)</span>依次存储字符串w中的每一个符号(<span class="math inline">\(a_1, a_2, \dots, a_n\)</span>)。</p><p><span class="math display">\[\begin{pmatrix}&amp;   &amp;\dots &amp; \\&amp; \vdots &amp;  \ddots &amp; \\a_1 &amp; a_2 &amp; \dots &amp;a_n\end{pmatrix}\]</span></p><p>我们设根据给定CNF，即G能推导出w中第i到第j个字符的串的集合为<span class="math inline">\(x_{i,j}\)</span>。</p><p>为了填写这个表，我们一行一行，自下而上地处理。每一行对应一种长度的子串。最下面一行对应长度为1的子串，倒数第二行对应长度为2的子串，以此类推。最上面一行就对应长度为n的子串，即w本身。计算该表的任何一个表项的方法如下：</p><ol type="1"><li>对于最下面一行的元素，即<span class="math inline">\(x_{i,i}\)</span>，是使得<span class="math inline">\(A \rightarrowa_i\)</span>是G的产生式的变元A的<strong>集合</strong>。</li><li>对于不在最下面一行的元素，我们需要找到符合以下条件的变元A的集合：<ol type="1"><li>整数k满足<span class="math inline">\(i \leq k &lt; j\)</span></li><li><span class="math inline">\(B \in X_{i,k}\)</span></li><li><span class="math inline">\(C \in X_{k+1, j}\)</span></li><li><span class="math inline">\(A \rightarrowBC\)</span>是G的产生式</li></ol></li></ol><p>根据这样的方法，我们可以填出一个下三角矩阵。</p><p>例如：</p><p>CNF文法G的产生式：</p><p><span class="math display">\[S \rightarrow AB|BC \\A \rightarrow BA|a \\B \rightarrow CC|b \\C \rightarrow AB|a\]</span> 对L(G)测试字符串<span class="math inline">\(w =baaba\)</span>的成员性构造Parse Table如下：</p><p><span class="math display">\[\begin{pmatrix}x_{1,5}=\{S, A,C\} &amp; &amp; &amp; &amp; \\&amp; x_{2,5}=\{S, A, C\} &amp; &amp; &amp; \\&amp; x_{2,4}=\{B\} &amp; x_{3,5}=\{B\} &amp; &amp; \\x_{1,2} = \{S, A\} &amp; x_{2,3}=\{B\} &amp; x_{3,4}=\{S, C\} &amp;x_{4,5}=\{S, A\} &amp;\\x_{1,1} = \{B\} &amp; x_{2,2} = \{A, C\} &amp; x_{3,3} =\{A, C\} &amp;x_{4,4}=\{B \} &amp; x_{5,5}=\{A,C\} \\a_1 = b &amp; a_2 = a &amp; a_3 = a &amp; a_4 = b &amp; a_5 = a\end{pmatrix}\]</span></p><p>最终得到<span class="math inline">\(x_{1,5}\)</span>集合之后，判断起始变元<span class="math inline">\(S\)</span>是否属于<span class="math inline">\(x_{1,5}\)</span>。如果是，则w可被G接受，反之不接受。</p><h2 id="程序展示">程序展示</h2><blockquote><p>CNF.cfg</p></blockquote><figure class="highlight coq"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">S -&gt; AB<br>A -&gt; BC | <span class="hljs-type">a</span><br>B -&gt; AC | <span class="hljs-type">b</span> <br>C -&gt; a | <span class="hljs-type">b</span> <br></code></pre></td></tr></tbody></table></figure><blockquote><p>CYK_algo.py</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env/python 3.6.5</span><br><span class="hljs-comment">#-*- coding: utf-8 -*-</span><br><span class="hljs-string">'''</span><br><span class="hljs-string">Python 3.6.5</span><br><span class="hljs-string">installed module:</span><br><span class="hljs-string">    - tkinter</span><br><span class="hljs-string">'''</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> ttk<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CNF</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.__rules = {}<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>(<span class="hljs-params">self, filename</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> inFile:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> inFile.readlines():<br>                line = re.sub(<span class="hljs-string">'[\n\t ]'</span>, <span class="hljs-string">''</span>, line)<br>                rec_begin = line[:line.find(<span class="hljs-string">'-'</span>)]<br>                <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> line[line.find(<span class="hljs-string">'&gt;'</span>) + <span class="hljs-number">1</span>:].split(<span class="hljs-string">'|'</span>):<br>                    <span class="hljs-keyword">if</span> element <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._CNF__rules:<br>                        <span class="hljs-variable language_">self</span>.__rules[element].append(rec_begin)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-variable language_">self</span>._CNF__rules[element] = [rec_begin]<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_inf</span>(<span class="hljs-params">self, tar</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(tar, <span class="hljs-built_in">list</span>) == <span class="hljs-literal">False</span>: exit()<br>        inf_set = []<br>        <span class="hljs-keyword">for</span> tarEle <span class="hljs-keyword">in</span> tar:<br>            inf_set.extend(<span class="hljs-variable language_">self</span>.__rules.get(tarEle, []))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(inf_set))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CYK</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filename</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(filename, <span class="hljs-built_in">str</span>) == <span class="hljs-literal">False</span>: exit()<br>        <span class="hljs-variable language_">self</span>.__<span class="hljs-built_in">str</span> = <span class="hljs-string">''</span><br>        <span class="hljs-variable language_">self</span>.__srtlen = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.__canvas = [] <br>        <span class="hljs-variable language_">self</span>.__myCNF = CNF() <br>        <span class="hljs-variable language_">self</span>.__myCNF.read_file(filename) <br><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_str</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>._CYK__str = <span class="hljs-built_in">input</span>(<span class="hljs-string">'input string:\n'</span>).strip() <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>._CYK__str) == <span class="hljs-number">0</span>: exit()<br>        <span class="hljs-variable language_">self</span>._CYK__srtlen = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>._CYK__str)<br>        <span class="hljs-comment"># MaxRow == MaxCol + 1 </span><br>        <span class="hljs-variable language_">self</span>._CYK__canvas = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">list</span>([] <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen)) <span class="hljs-keyword">for</span> tmp <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">iter</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen):<br>            <span class="hljs-variable language_">self</span>._CYK__canvas[<span class="hljs-variable language_">self</span>._CYK__srtlen][<span class="hljs-built_in">iter</span>].append(<span class="hljs-variable language_">self</span>._CYK__str[<span class="hljs-built_in">iter</span>])<br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">CYK_process</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># for lowest level</span><br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen):<br>            <span class="hljs-variable language_">self</span>._CYK__canvas[<span class="hljs-variable language_">self</span>._CYK__srtlen - <span class="hljs-number">1</span>][col].extend(<span class="hljs-variable language_">self</span>._CYK__myCNF.get_inf(<span class="hljs-variable language_">self</span>._CYK__canvas[<span class="hljs-variable language_">self</span>._CYK__srtlen][col]))<br>        <span class="hljs-comment"># for upper level</span><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row + <span class="hljs-number">1</span>):<br>                mid_set = <span class="hljs-built_in">set</span>()<br>                idx_i, idx_j = col + <span class="hljs-number">1</span>, col - row + <span class="hljs-variable language_">self</span>._CYK__srtlen               <br>                <span class="hljs-keyword">for</span> mid_k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(idx_i, idx_j):<br>                    fir_row, fir_col = idx_i - mid_k - <span class="hljs-number">1</span> + <span class="hljs-variable language_">self</span>._CYK__srtlen, idx_i - <span class="hljs-number">1</span><br>                    sec_row, sec_col = mid_k - idx_j + <span class="hljs-variable language_">self</span>._CYK__srtlen, mid_k<br>                    mid_set |= <span class="hljs-built_in">set</span>(obj[<span class="hljs-number">0</span>] + obj[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-variable language_">self</span>._CYK__canvas[fir_row][fir_col], <span class="hljs-variable language_">self</span>._CYK__canvas[sec_row][sec_col]))<br>                <span class="hljs-variable language_">self</span>._CYK__canvas[row][col].extend(<span class="hljs-variable language_">self</span>._CYK__myCNF.get_inf(<span class="hljs-built_in">list</span>(mid_set)))<br>        <span class="hljs-comment"># get answer</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">'S'</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>._CYK__canvas[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">'%s can be accepted.'</span> % <span class="hljs-variable language_">self</span>._CYK__str)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">'%s can not be accepted.'</span> % <span class="hljs-variable language_">self</span>._CYK__str)<br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GUI_show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">exc</span>(<span class="hljs-params">line, step, row</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(line, <span class="hljs-built_in">list</span>) == <span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(line[<span class="hljs-number">0</span>], <span class="hljs-built_in">list</span>) == <span class="hljs-literal">False</span>: exit()<br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(line)):<br>                line[col] = <span class="hljs-built_in">str</span>(<span class="hljs-string">'{'</span> + <span class="hljs-string">'%s, '</span> * (<span class="hljs-built_in">len</span>(line[col]) - <span class="hljs-number">1</span>) + <span class="hljs-string">'%s'</span> * (<span class="hljs-built_in">len</span>(line[col]) &gt; <span class="hljs-number">0</span>) + <span class="hljs-string">'}'</span>) % (<span class="hljs-built_in">tuple</span>(line[col]))<br>                <span class="hljs-keyword">if</span> col &lt;= row: line[col] = <span class="hljs-string">'X%d,%d = '</span> % (col + <span class="hljs-number">1</span>, step + col + <span class="hljs-number">1</span>) + line[col]<br>            <span class="hljs-keyword">return</span> (line)<br><br>        <span class="hljs-comment"># default</span><br>        window = tkinter.Tk()<br>        window.geometry(<span class="hljs-string">'800x400'</span>)<br>        window.title(<span class="hljs-string">'CYK algorithm'</span>)<br>        table = ttk.Treeview(window, height = <span class="hljs-number">10</span>, show = <span class="hljs-string">'headings'</span>)<br>        table[<span class="hljs-string">'columns'</span>] = (<span class="hljs-built_in">list</span>(elem <span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen)))<br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen):<br>            table.column(<span class="hljs-built_in">str</span>(col), width = <span class="hljs-number">100</span>)<br>        <span class="hljs-comment"># y&amp;x scrollbar</span><br>        yscrollbar = tkinter.Scrollbar(window, orient = tkinter.VERTICAL, command = table.yview)<br>        table.configure(yscrollcommand = yscrollbar.<span class="hljs-built_in">set</span>)<br>        yscrollbar.pack(side = tkinter.RIGHT, fill = tkinter.Y)<br><br>        xscrollbar = tkinter.Scrollbar(window, orient = tkinter.HORIZONTAL, command = table.xview)<br>        table.configure(xscrollcommand = xscrollbar.<span class="hljs-built_in">set</span>)<br>        xscrollbar.pack(side = tkinter.TOP, fill = tkinter.X)<br>        <span class="hljs-comment"># insert information</span><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>._CYK__srtlen):<br>            table.insert(<span class="hljs-string">''</span>, row, values = exc(<span class="hljs-variable language_">self</span>._CYK__canvas[row], <span class="hljs-variable language_">self</span>._CYK__srtlen - row - <span class="hljs-number">1</span>, row))<br>        table.insert(<span class="hljs-string">''</span>, <span class="hljs-variable language_">self</span>._CYK__srtlen, values = (<span class="hljs-variable language_">self</span>._CYK__canvas[<span class="hljs-variable language_">self</span>._CYK__srtlen]))<br><br>        <span class="hljs-comment"># end</span><br>        table.pack(side = tkinter.TOP, expand = <span class="hljs-number">1</span>, fill = tkinter.BOTH)<br>        window.mainloop()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    myCYK = CYK(<span class="hljs-string">'./CNF.cfg'</span>)<br>    myCYK.get_str()<br>    myCYK.CYK_process()<br>    myCYK.GUI_show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br><br></code></pre></td></tr></tbody></table></figure><p>实验效果：</p><figure><img src="https://imgbed.scubot.com/CYK-CYK_1.png" alt="commandline"><figcaption aria-hidden="true">commandline</figcaption></figure><figure><img src="https://imgbed.scubot.com/CYK-CYK_2.png" alt="GUI"><figcaption aria-hidden="true">GUI</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解奇偶校验</title>
    <link href="/article/5630/"/>
    <url>/article/5630/</url>
    
    <content type="html"><![CDATA[<h2 id="问题a">问题A</h2><h3 id="题目">题目</h3><p>考虑这样一个小问题：</p><blockquote><p>我们现在一共有n个人， <span class="math inline">\(n \in \BbbN^\ast\)</span> 。所有人排成一队站好后给每个人编号，从前向后依次为 <span class="math inline">\(P_0P_1\dots P_{n-1}\)</span> 。</p><p>每个人的头上都戴有一顶帽子，帽子只有黑白两种颜色，且除颜色外无其他差别。每个人所戴帽子的颜色是完全随机的。</p><p>这时每个人只能看到在自己前面的所有人的帽子颜色，但是看不到自己的帽子是什么颜色。</p><p>例如， <span class="math inline">\(P_1\)</span> 能看到 <span class="math inline">\(P_0\)</span> 帽子的颜色， <span class="math inline">\(P_2\)</span> 能看到 <span class="math inline">\(P_1\)</span> 和 <span class="math inline">\(P_0\)</span> 帽子得颜色， <span class="math inline">\(P_{n - 1}\)</span>能看到除了自己外所有人帽子的颜色，而 <span class="math inline">\(P_0\)</span> 什么都看不到。</p><p>现在要求从 <span class="math inline">\(P_{n - 1}\)</span>开始，依次向前报出自己所戴帽子的颜色。</p><p>为了方便，我们定义n个人中报对自己帽子颜色的人数为 <span class="math inline">\(R_n\)</span> 。</p><p>问：</p><p>这n个人应该采取什么样的策略才能使 <span class="math inline">\(R_n\)</span> 最大呢， <span class="math inline">\(R_n\)</span> 的数学期望是多少？</p></blockquote><span id="more"></span><h3 id="思考">思考</h3><p>首先我们先来考虑，是否存在这样的一种策略，使得 <span class="math inline">\(R_n \equiv n\)</span> 。</p><p>只要我们稍作思考，就知道这样的策略是不存在的。</p><p>我们以信息论中的比特作为信息量的单位，如果要使 <span class="math inline">\(R_n \equiv n\)</span>，则整个n个人的系统需要能表达关于不同人帽子颜色的n个比特的信息。然而，对于整个系统而言，<span class="math inline">\(P_{n-1}\)</span>的帽子的颜色始终是无法被这n个人观测到的，所以 <span class="math inline">\(R_n \not \equiv n\)</span> 。直观上，因为 <span class="math inline">\(P_{n -1}\)</span>是第一个报自己帽子颜色的，而根据其能观测到的信息，<span class="math inline">\(P_{n-1}\)</span>是无法推测出自己帽子颜色的，故无论采用什么样的策略，至少 <span class="math inline">\(P_{n-1}\)</span>都无法保证一定能报对自己帽子的颜色。</p><p>那么能不能保证 <span class="math inline">\(R_n \geq n - 1\)</span>呢？</p><p>理论上是有的，因为刚刚已经提到过了，整个系统最多可以准确表达 <span class="math inline">\(n - 1\)</span> 个比特的信息，故总有种策略可以保证<span class="math inline">\(R_n = n-1\)</span>，加上剩下一个比特不能准确表达的信息，故可以认为 <span class="math inline">\(R_n \geq n - 1\)</span> 。</p><h3 id="解决方法">解决方法</h3><p>可以采用这样的一种策略，n个人约定好，如果 <span class="math inline">\(P_{n-1}\)</span> 看到的前 <span class="math inline">\(n - 1\)</span>个人的帽子颜色中白色的个数为奇数，则 <span class="math inline">\(P_{n -1}\)</span> 报白色，如果前 <span class="math inline">\(n - 1\)</span>个人的帽子颜色中白色的个数为偶数，则 <span class="math inline">\(P_{n -1}\)</span> 报黑色。</p><p>这样 <span class="math inline">\(P_{n - 1}\)</span> 报完之后，<span class="math inline">\(P_{n -2}\)</span> 可以根据其能看到的 <span class="math inline">\(n - 2\)</span> 顶帽子颜色和 <span class="math inline">\(P_{n - 1}\)</span>所报的内容推理出自己帽子是什么颜色。</p><p>以此类推，<span class="math inline">\(P_0 \dots P_{n -2}\)</span>都能准确报出自己帽子的颜色，<span class="math inline">\(P_{n- 1}\)</span>根据这样的策略报出的颜色有可能恰好是自己帽子的颜色，故<span class="math inline">\(R_n \geq n - 1\)</span>。</p><p>期望：<span class="math inline">\(\bar{R_n} = n - 0.5\)</span>。</p><h2 id="问题b">问题B</h2><h3 id="题目-1">题目</h3><p>题目的内容与<a href="#问题A">问题A</a>几乎一致，只是现在帽子有 <span class="math inline">\(2^k\)</span> 种不同颜色，<span class="math inline">\(k \in \Bbb N ^ \ast\)</span>。</p><p>那么在这样的条件下，如何使得 <span class="math inline">\(R_n\)</span>最大，期望是多少？</p><h3 id="思考-1">思考</h3><p>其实这个问题和之前的问题没有本质区别，我们只要把题目中 <span class="math inline">\(\lceil\)</span> 帽子的颜色 <span class="math inline">\(\rfloor\)</span>这个量做一些抽象处理就很容易解决。</p><p>我们以问题A为例，帽子只有黑白两种颜色。我们可以定义<strong>黑帽子</strong>为<strong>0</strong>，<strong>白帽子</strong>为<strong>1</strong>，这样问题A的解决方案就可以解释成，前<span class="math inline">\(n - 1\)</span>位上<strong>1(白帽子)</strong>的个数为奇数，则 <span class="math inline">\(P_{n-1}\)</span>报<strong>1(白色)</strong>，如果是偶数则报<strong>0(黑色)</strong>。</p><p>我们稍微缓一下就可以反应过来，这其实就是个<strong>奇偶校验</strong>中的<strong>奇校验</strong>问题。如果<strong>1</strong>的个数为偶数报<strong>1</strong>则是<strong>偶校验</strong>。</p><p>所以根据这样的思路，奇数偶数只能反映两种状态，所以我们用二进制的形式表示帽子的颜色。如果有<span class="math inline">\(2^k\)</span> 种不同的颜色，我们就用 <span class="math inline">\(k\)</span>位二进制编码来表示。比如我们有四种颜色如下：</p><table><thead><tr><th style="text-align: center;">颜色</th><th style="text-align: center;">编码</th></tr></thead><tbody><tr><td style="text-align: center;">白色</td><td style="text-align: center;"><strong>00</strong></td></tr><tr><td style="text-align: center;">黑色</td><td style="text-align: center;"><strong>01</strong></td></tr><tr><td style="text-align: center;">红色</td><td style="text-align: center;"><strong>10</strong></td></tr><tr><td style="text-align: center;">绿色</td><td style="text-align: center;"><strong>11</strong></td></tr></tbody></table><p>那么在 <span class="math inline">\(k\)</span>位每一位上都进行问题A那样的奇偶校验，就可以完成报颜色问题的解答。</p><h3 id="解决方法-1">解决方法</h3><p>我们现在有 <span class="math inline">\(n\)</span> 个人， <span class="math inline">\(2^k\)</span>种帽子，那么我们根据上面表格那种形式，可以对 <span class="math inline">\(2^k\)</span> 种颜色进行长度为 <span class="math inline">\(k\)</span> 的二进制编码。</p><p>而 <span class="math inline">\(P_{n-1}\)</span> 要做的就是计算前面<span class="math inline">\(n-1\)</span>个人每个人帽子颜色编码的每一位的奇偶校验值，然后组成 <span class="math inline">\(k\)</span> 位的编码作为自己要报的内容。前面 <span class="math inline">\(n-1\)</span> 个人报颜色的方式和问题A相似。</p><p>故我们能保证 <span class="math inline">\(R_n \geq n - 1\)</span>，且期望 <span class="math inline">\(\bar{R_n} = n - 0.5\)</span> 。</p><h2 id="问题延伸">问题延伸</h2><p>以上两个问题都是用来描述奇偶校验的内容的，但是从奇偶校验出发，我们还能得到更多的信息。</p><h3 id="异或运算">异或运算</h3><p>异或运算： <span class="math inline">\(\oplus\)</span></p><p>这是定义在布尔代数上的操作符，满足以下运算规则：</p><table><thead><tr><th style="text-align: center;">表达式</th><th style="text-align: center;">值</th></tr></thead><tbody><tr><td style="text-align: center;"><span class="math inline">\(0 \oplus0\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td></tr><tr><td style="text-align: center;"><span class="math inline">\(0 \oplus1\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td></tr><tr><td style="text-align: center;"><span class="math inline">\(1 \oplus0\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td></tr><tr><td style="text-align: center;"><span class="math inline">\(1 \oplus1\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td></tr></tbody></table><p>可以这么理解，只要两个运算数相同，那么结果就是0，如果两个运算数不同，结果就是1。</p><h3 id="应用在奇偶校验">应用在奇偶校验</h3><p>说道奇偶校验的时候我们可能会有疑惑，为什么非要关注编码中<span class="math inline">\(1\)</span>的个数是奇数偶数呢，关注<span class="math inline">\(0\)</span>的个数不也一样有同样的效果吗。</p><p>这里其实是为了方便计算，因为一串编码中按位进行异或运算，结果是<span class="math inline">\(1\)</span>就表示编码中<span class="math inline">\(1\)</span>的个数是奇数。因为两个<span class="math inline">\(1\)</span>做异或结果是<span class="math inline">\(0\)</span>，而<span class="math inline">\(0\)</span>在奇偶校验位中正好表示偶数个<span class="math inline">\(1\)</span>，所以异或的运算性质正好可以帮助计算编码中<span class="math inline">\(1\)</span>的个数的奇偶性。</p><p>应用在我们上面的问题A中，经过把帽子颜色抽象成二进制编码<span class="math inline">\(0\)</span>和<span class="math inline">\(1\)</span>后，每一个人就代表了一个二进制编码，由于帽子颜色只有两种，所以每个人代表的编码只有一位。所以最后一个人他报的内容可以通过异或前<span class="math inline">\(n - 1\)</span>个人的编码得到，即：</p><p><span class="math display">\[P_{n-1} = P_0 \oplus P_1 \oplus P_2 \oplus \dots \oplus P_{n-2} =\bigoplus_{i = 0} ^ {n-2} P_i\]</span></p><hr><p>而抛开问题A不谈，这里介绍异或运算的另一个性质：</p><p>考虑一列数</p><p><span class="math display">\[a_1,a_2,\dots,a_n\]</span></p><p>令</p><p><span class="math display">\[p = a_1 \oplus a_2 \oplus \dots \oplus a_n = \bigoplus_{i = 1} ^n a_i\]</span></p><p>可知</p><p><span class="math display">\[a_k = p \oplus \bigoplus_{i = 1\dots n, i \not =k}a_i\]</span></p><p>这就意味着，在<span class="math inline">\(p\)</span>与<span class="math inline">\(a_1 \dots a_n\)</span>这<span class="math inline">\((n + 1)\)</span>个数中，任意<span class="math inline">\(n\)</span>个数可以推得其余的一个。</p><hr><p>知道上面的性质之后，我们再回到问题A上，现在我们有了<span class="math inline">\(P_{n-1}\)</span>，而前<span class="math inline">\(n -1\)</span>个人要做的事情也可以通过上面的结论表示，其中第<span class="math inline">\(m\)</span>个人<span class="math inline">\((0 \leqm \leq n - 2 )\)</span>要做的运算可以表示为</p><p><span class="math display">\[P_m = P_{n - 1} \oplus \bigoplus_{i = 0 \dots n-2, i \not= m} P_i\]</span></p><p>而衍生的问题B就是对每一位都做同样的操作即可。</p><h3 id="另一种应用">另一种应用</h3><p>其实前面讲的那个异或的性质就是一种硬盘储存结构$ $ 独立磁盘冗余阵列$$<strong>RAID5</strong>的基本算法。</p><p>下面是关于RAID5的一部分介绍：</p><figure><img src="https://imgbed.scubot.com/odd_even-RAID5.png" alt="RAID5"><figcaption aria-hidden="true">RAID5</figcaption></figure><figure><img src="https://imgbed.scubot.com/odd_even-RAID5-2.png" alt="RAID5"><figcaption aria-hidden="true">RAID5</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牵丝傀儡戏</title>
    <link href="/article/42f8/"/>
    <url>/article/42f8/</url>
    
    <content type="html"><![CDATA[<h2 id="原文">原文</h2><p>时蝉鸣切切，已过隅中。余一无品小吏，奉命受遣，欲寻一奇异人招至府中为官人所乐。</p><p>行于道，会乡间神鸦社鼓起，既稍进，遇一市集，外延琐物旧货陈，中围绫罗匹缎置。复前行，至集中内，乃一红台，上有歌妓扶抱琵琶，奏曲揉腔蹈足，声曲轻快灵巧，舞姿绰约弄人。下有停足如余而观者里三外三，莫不魂飞神散。</p><span id="more"></span><p>既末，人声嘈嘈而铜币声寥寥。余近而视之，歌妓神色淡漠。</p><p>便言：“曲轻而无意，舞柔而不精，故可得众人之停足而不得几人之心服，身无长技，敛财于此者何为？”</p><p>答曰：“家有老母，年六十，翳眼跛足，已日薄西山，且长兄坐法系狱，小女无才，几日未归，只得在此卖弄姿色以持生计，俗技不入大人贵眼，惭愧至极。”</p><p>余闻而思之，问：“姓何名何？“</p><p>“小女闫氏。”</p><p>噪蝉且息，周人且无，清风四起。</p><p>只闻：“常观俗技者，皆无赖市曹，鲜有官人之临，敢问为之奈何？”</p><p>余凝噎一语：“为官所来。”</p><p>值风戾愈烈，似没微声，相视竟无语，遂去不顾。</p><p>出市集，红日西斜，心神沉沉，忽闻一店家小生吆喝路人入店品酒：“今有闫氏舞女愿为客观饮酒作兴，貌美纯色，声舞兼并”。余忍而径走，异于俗心之流。</p><p>今行何为，今欲何为，而初心亦何为？自可引此歌妓入府作曲献舞，虽火候稍欠，然可就差事，不为上司所缴。可忆余初举秀才时，心怀鸿鹄之志，而今落至一为官人奢淫奔波之小吏，锱铢财禄，比细较之。此歌妓为其老母捐舍清节，卖弄姿色。其身虽浊，但心岂不清于吾等苟活赴势之辈？心火正燃，愁容益增。</p><p>广寒中归，是二更人定。何知竟游于一田间小舍，归也不成，去也不甘，不如请留这野人家。念定，稍进，只望一晃影见于田路幽深处。既见之，便闻之：</p><blockquote><p><strong>仓皇民间</strong></p><p><strong>傀术作法</strong></p><p><strong>牵丝既系</strong></p><p><strong>万事合辙</strong></p></blockquote><p>影愈淡，形愈显，而形愈彰。</p><p>“自仓傀千万之世，万物惑心，皆忘其本，名争利逐，暗盈明亏，他人趋炎附势，怎独汝一人偷得闲淡于此。”</p><p>“是心有所惑。”</p><p>“惑人，惑物，亦惑...... ”</p><p>“惑心。”</p><p>其影全散，只见一白首老翁，面容精微，褐衣竹屐，身负一人形包袋。道一声：”从我来。”，便径而推舍门入，余回神片刻，亦入。</p><p>室中虽有银光倾洒，老翁亦燃一灯烛。光映四壁，余定而视之，惊愕万分，竟有人形模具吊于天顶，凡八具。老翁道：“吾幼时，不学无术，无以立业。”，且言且轻置其所负包袋，取之，亦一模具。“而生性孤僻不与外人来往，独好与这人偶为友，便以丝系之，于其夜卧长谈，久之，控技愈精，便自习牵丝傀儡术，常外出小演以给足家用。”</p><p>问曰：“室中另有他人？”</p><p>“吾妻且丧三日，犬子只读功名书不习谦德法，已自食因果 ”</p><p>余惊异，道：“可有小女？”</p><p>余音罢了，老翁额上骤见千丝愁意，俄而微舒。余领而不语。</p><p>老翁便言：“今汝我相逢，比为因缘所定，不如请丑现一牵丝戏以祭夜。”</p><p>“善矣，意舞几具？”</p><p>老翁正备精丝器械，答：“今月底而不清，夜凝而不静，定有魑魅夜行，应以阳克阴，九为上阳，当舞全九具，驱鬼而净心。”</p><p>刹时，随惊锣一响，飞丝绕梁。时四退而五进，又六分而三合。夜风破窗吹壁，壁影烛苗愈狂。含影藏形，阴阳相济，似屋外田间，九龙相争，玄黄其血，战野无疆。</p><p>影快，丝乱，心狂。是狂益狂，益狂加狂，至血沸意迷。</p><p><span class="math inline">\(\cdots\)</span></p><p>突闻牵丝断而啸风止，鹰长击而夜猫泣。烛花未熄，室中伏地人形者九具，老翁解丝吹烛。</p><p>“现牵丝已断，万事无忧。”</p><p>余惊心稍定，亦大番彻悟。</p><p>“世俗之丝已断，本初之心既归，当守今日净念，且望后世奔流。愿求此牵丝之术而普众生。”</p><p>老翁听罢长叹：“此术吾以一生悟之，不可传矣，其当入土随吾。”</p><p>余闻之起身，已晨曦微亮。只道一声：“昨夜之狂，毕生难忘。既见闫叟，心也无疆。”，扬袖而去。</p><h2 id="写在后面">写在后面</h2><p>文章最终定稿于2016-10-17，上文与终稿结尾处有略微不同。</p>]]></content>
    
    
    <categories>
      
      <category>代码之外</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>日常随笔-1</title>
    <link href="/article/3253/"/>
    <url>/article/3253/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2d0445704d86c14e5fe34f50904a68bbff4abf2da6f4040b5abd734f46c30699">c6301b720cd3f35d9ab61e975d1f12b0053132a24be455b87b58824665961e221dcd19ec25cb932532de0d42f5aab937c1db95d5522ac97ad593d2727f5ce18e2a17fcce336488fc45814af5ea3ed208c810a80243ddd0bca2fdbff8fac470078a82ce21f38b80d1a0e43dd3057b9ca5f147cf749f3f103408aa8598c6d855ae90551e3988ed30d6a4bbe38576f49154c1846ddf83bd9c48358d854059fea494576317366945780eaade758a8446c2d5560ec9c3a174b502676dea873ebbdda4be45fa791b7cfba10613031ace8ac7eb55857ac1d493aeb0ec533b01be64f63f8c90f5d9d5b423d463771e72940053c87f7c7e32d1277821eec33dd85164e0c57ebd312d0ca6b86042b252899ec16540615b99262e30a4874435779ad6dd64345c8fc740248d4a9237465cb862efca5553803963d95fa8e031114de2dee8afd9a906cacaf655249ba571e7ac5d277a998a2d5b3724528f0f7239200e4f09181dc536d8ba0c1c7db06b56e7cafe2c5ef510d0a93f63530d5b3edb67953a6296f1e642564353d5836c569979befeec0f9f261df2dafeeb148fc1589c3af28107f1ce227e9677a30bb6ed574ea1e868a9a8839f994e56115f4bd05efd90838e8c9bd25b12648c4abb82ada29c65cbcd873e75aedfc097a4093683f384caaa4f65086e582dcb2b254b2d089c851c03c19d12c069c3d3f1217d80a3c2f577564656b008c6ef02ed5ee5a8214125759e65a592a4759c2f158acbc6e0a14fa8b2a2dcdd6a2cfd33305617815f57fdbf6f0fde729096e2ecb7b91e0bfe549fdbdfd32ebf731f94f467e6c9c5421869d043d539958cb3eba149c5b63a7910c1e9eec70fe513cde39ef3b315b42c9b8f6df802e9acf199f8c2fe8ba22822da10ea7994f03fa38bac9bf744f33e2d5c21858b50a982a509ef86232a993f42fce46cd11dca70a444e0397c287644aea767ee5a71896e1d53516b682b413bd6a8d65153ccb9db7dda21b0b4d4e2af75705dc14be62babc81f1bc2c2b94f9ecae408c5e209a69f7218e6c5fc3b027278081aa40ec8550e61aa3cf12f35e34584bd8e8fa114aac8eb95a9b0bb99dc32b26178e362468fe89b1ea4cfa7eab175a2d93ea67bf48f3c9eb45c45a5b5d7047eb1d694b95eb900acdad88ff8d1c89d481eeb2eccfc9093462ca89809069179437364cc622b18bf57e27c36491a3bf2eaa2a92d5cef1fc0f960c5d37a65954a87855e592c5d83431ad6637cc1c80e4211f7b79c326095019ffda2373cf03cb9f54bfb6874669037970f613615d32cc33db8dac72de51389047369fe45247175b9c20f6efd3da80346b31b3642157839b089ac5efde642934d875d5f22b1f90e82d6fe75ebddce9a290697421583dcace88c994623add4901c43b564464db932faeb6498dabe79a79be12c15090039480ba2fb721d4a66d5d9c22dd1e026a65daa21871c5231735ad08a1d67109e7ec37f85ba6e77c20a475bcfa16029fbefff105a9e487000adee1a73b90f2678fafc906c81c8bcc8d80556e22c43a8c526d6e9dc9c0e6421efea4a82a236cadbb5bda13992699d4a257e9214c2b13146e4ae3d3634c79e7d4e530052d0e3b9d3c4749b611571f0f1d3f4d0cbb11f7c498d7401b993f03b5b4e2a9f9f1a1a44ccf1e538c94527261598a843bff7645cce09ef55f829fb2b01a1af0ba4da8b996b84b38b25f85f4d88882bcfd9f4550dede65816b6347559bf2a40a81d1d845bfb2a1827d96a70f36f00a1257bb4595ec01e1bbe971b6e646f2fac4114c15f18824a9da5968ceae9bcef603e6d7e7c9f36386ced2d7dad5cc1c10b02f5960cb7552b5ce5758b4960e4155968cff56d1a3ddfeb98da58a7c3db55de839e87d4c5444e1766e4addd14dd181d840a276b325ac97e9e0edc627b87e59c1169ec01f8ab5c91c4ce1af373edb14298bd105ad56ced4d93571e0c9cde81b35355174aa238fad22c50adb3c16fa9b9cc5d669228885635c33240290815fbbc1a71e17ee9c9cbdf8e6fd5f51e58d14d427abf25ca39898a33dc031ba405e0c0afc7b4fd16dc0ecf768b68e43c14beb3687ce0e31854b13583476b03a538a47a391ebb5e550c36f58a69d06c41f2d487da9fdc49f9265c53df56ef77c6938c85718f2f01b836d9046a1de6b9897cfd6aaa7578a560e94b19bd4e612bbdee79e9234a5031442cae82a387c26691b9be1396bc5135701c79c00a0a2e287c576fbf322472c8ab7754a02ccc1eae1e281eb71598f2b31b51262cd098b3aca336df39bc5911f5cb3e25caa5d539df108c85aa7671570d6779f58c939e19275eefba04c51557f8c19271d7a99dd63df2069f6c2a5b0ef4218dd3fb1eceacee6091ae60b66ac7a643fc5917a0435f1b0f7d4508a1ce834226a16e72c6b87bc5c511d28455ea4e7ee0076d08927cf8d14ea9f6ab643e6367038558c711d9269127a38c7f41264a1f3ad3a239add9b8b53410d586e3efd9e90261ba8577ec949363c0e43e9d1f72d85cb3c91d3b47297d98748297ec16e9113085f317e8dfb0324ccad22f4666dd7e5bd1595c2894e3ec6354e90367aeeb5285b16cdc159e844571a5a5880a85f3b5efa81c5de5e5fbc83dc7772ca33af624ac97b0250b370d6828fef42d08fba989287c86dffb1d6820cd0ab37d5133bfeba0dec4bbb933ae0aed35fc281261d585f7960d6d11dfd6b7cf53191a8c04ac5fdd9d66be49522f737cfe5b56189af770ee7d9d9807c3044f502fb845</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入对应的密码进行浏览</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>代码之外</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2017-2018个人年终总结</title>
    <link href="/article/3e75/"/>
    <url>/article/3e75/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="50a1a369020e2199a57e544e5b53e83c653656db15ffea316cd98a9e0a785e80"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入对应的密码进行浏览</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>代码之外</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简单疏散模型(2019美赛)</title>
    <link href="/article/61319/"/>
    <url>/article/61319/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>这一切要从<strong>2019MCM/ICM</strong>(<a class="btn" href="https://www.comap.com/undergraduate/contests/mcm/contests/2019/problems/" title="题目下载地址">题目下载地址</a>)开始说起，我们小组拿到题目之后经过讨论选择了D题。这其实也是我个人的意向，因为今年的题目普遍需要生物和金融方面的知识，而我们组除了我是计科专业的，其他两位都是做理论物理方向，而今年的题目普遍没有物理发挥的余地，所以我尽量去找一些适合计科的题目。但B题C题给我的第一感觉就是只有我一个人写程序做数据处理肯定搞不定，所以我和小组都将目标放在了我有点思路的D题上。</p><p>D题说的是模拟卢浮宫中发生恐怖袭击的人群疏散情况，具体的题目就不详细说了，我这里详细介绍一下我在队友帮助下建立起的简单疏散模型。</p><span id="more"></span><h2 id="模型设计">模型设计</h2><h3 id="预处理">预处理</h3><p>将实际的人群分布抽象成网络图，即每个点表示一个区域，连接两个点的边表示该两区域之间可以通行。</p><p>其中每个点和每条边都存有若干属性：</p><ul><li>点：该区域目前的人数<span class="math inline">\(N\)</span>和该区域能容纳的最大人数<span class="math inline">\(M_v\)</span>。</li><li>边：该通道单位时间能通过的人数<span class="math inline">\(F\)</span>和该通道单位时间能通过人数的最大值<span class="math inline">\(M_e\)</span>。</li></ul><p>最后将复杂的实际人群分布图抽象成一张简单图(simple graph)，例如：</p><figure><img src="https://imgbed.scubot.com/simple_model-post-inf-struct.jpg" alt="示例"><figcaption aria-hidden="true">示例</figcaption></figure><div class="note note-success">            <p>绿色结点表示有人群分布的区域</p>          </div><div class="note note-danger">            <p>红色结点表示出口标志(不存信息)</p>          </div><blockquote><p>要说明的一点是，与纯图论的图不同，这里抽象出的图结点与边都存有信息，而纯图论中只有边会存储信息，点是不存信息的。这是因为图论是研究关系的一门科学，边存储的信息用来表示两个量之间关系的程度(见每个图具体的定义)，而点只作为标志。所以可以认为我们抽象出的图的边仍可叫做Edge，但结点由于存储有信息不如叫做Node而不用Vertex。</p></blockquote><h3 id="定义">定义</h3><p>我们的模型目的是去模拟在有多个出口且位置已知的情况下，不同结点在各个时间段的人群分布情况，进而获得全局的疏散情况。</p><p>因此，我们需要定义一些符号来解释这些逻辑。</p><table><thead><tr><th style="text-align: center;">符号</th><th style="text-align: center;">含义</th></tr></thead><tbody><tr><td style="text-align: center;"><span class="math inline">\(U_t\)</span></td><td style="text-align: center;">单位时间</td></tr><tr><td style="text-align: center;">$v_i $</td><td style="text-align: center;"><span class="math inline">\(v_i = \{N,M_v\}\)</span>，标记为<span class="math inline">\(i\)</span>的结点</td></tr><tr><td style="text-align: center;"><span class="math inline">\(e(v_i,v_j)\)</span></td><td style="text-align: center;"><span class="math inline">\(e(v_i, v_j)= \{F_l, M_c, \epsilon\}\)</span>，连接<span class="math inline">\(v_i\)</span>和<span class="math inline">\(v_j\)</span>的边</td></tr><tr><td style="text-align: center;"><span class="math inline">\(\delta\)</span></td><td style="text-align: center;">单位时间内该结点人数的减少量</td></tr><tr><td style="text-align: center;">$F_l $</td><td style="text-align: center;">某条边在单位时间内通过的人数</td></tr><tr><td style="text-align: center;">$M_e $</td><td style="text-align: center;">某条边在单位时间内能通过的最大人数</td></tr><tr><td style="text-align: center;"><span class="math inline">\(\epsilon\)</span></td><td style="text-align: center;">人群对某条边的偏向程度</td></tr><tr><td style="text-align: center;"><span class="math inline">\(N\)</span></td><td style="text-align: center;">某一结点的人数</td></tr><tr><td style="text-align: center;">$M_v $</td><td style="text-align: center;">某一结点能容纳的最大人数</td></tr><tr><td style="text-align: center;"><span class="math inline">\(N^+(v_i)\)</span></td><td style="text-align: center;">与<span class="math inline">\(v_i\)</span>邻接且已经更新过的结点的集合</td></tr><tr><td style="text-align: center;"><span class="math inline">\(N^-(v_i)\)</span></td><td style="text-align: center;">与<span class="math inline">\(v_i\)</span>邻接且未更新的结点的集合</td></tr><tr><td style="text-align: center;"><span class="math inline">\(lt^T, lt^E,lt^D\)</span></td><td style="text-align: center;">限制某个结点人数转移的三个限制因素</td></tr></tbody></table><h3 id="算法原理">算法原理</h3><p>首先我们认为<span class="math inline">\(\rightarrow\)</span>代表引用集合中某个元素，例如<span class="math inline">\(v_i\rightarrow N\)</span>表示$v_i $中的人数。</p><p>且规定<span class="math inline">\(v_i\rightarrow \delta = \min(lt^T,lt^E,lt^D)\)</span>。也就是说只要知道那三个限制因素，就知道在单位时间内某个结点的人数变化。</p><p>为了更好地在计算机中处理数据，我这里对整个疏散过程离散化。也就是定义一个单位时间，在该单位时间内计算所有结点的人数减少量，即可反应该单位时间内的人数变化趋势，直到人数都为0为止，疏散完成。</p><p>在单位时间内，我这里用BFS的方法，以所有出口结点初始化BFS队列，然后向外扩散至每一个结点。</p><p>针对扩散到的某一结点<span class="math inline">\(v_i\)</span>，我们很容易就可以算出来<span class="math inline">\(N^+(v_i)\)</span>和<span class="math inline">\(N^-(v_i)\)</span>。接下来就要算那三个限制因素。</p><h4 id="目标结点限制">目标结点限制</h4><p>假设我们处在某一结点上，前面有多个方向都发生了人数流动，且人数都在减少。该结点上的每一个人都会选择多个方向中的其中一个方向前进，由定义可知，<span class="math inline">\(v_i\)</span>结点人数的流动一定是向<span class="math inline">\(N^+(v_i)\)</span>中的结点的。</p><p>假如我们已经知道了<span class="math inline">\(v_i\)</span>向<span class="math inline">\(N^+(v_i)\)</span>中某个结点<span class="math inline">\(v_t\)</span>的偏向性<span class="math inline">\(\epsilon\)</span>，即<span class="math inline">\(e(v_i, v_t)\rightarrow \epsilon, v_t \inN^+(v_i)\)</span>，那么：</p><p><span class="math display">\[lt^T = e(v_i, v_t)\rightarrow \epsilon \times(v_t \rightarrow M_v -v_t\rightarrow N)\]</span></p><p>也就是说，该方向的偏向性乘上目标结点还可以容纳的人数就是该结点在该方向的<strong>结点取向限制$lt^T $</strong>。</p><p>而某条边的偏向性<span class="math inline">\(\epsilon\)</span>可以通过这样的公式得到：</p><p><span class="math display">\[\forall v_k \in N^-(v_i) \e(v_i, v_k) \rightarrow \epsilon \\[2ex]= \frac{\min(v_k\rightarrow N,e(v_i, v_k) \rightarrow F_l \times U_t)}{\sum_{v\in N^-(v_i)}\min(v\rightarrow N, e(v_i, v) \rightarrow F_l \times U_t)}\]</span></p><h4 id="边流量限制">边流量限制</h4><p>边所能承载的流量也是限制结点人数转移的一大因素。假设我们要从<span class="math inline">\(v_i\)</span>向<span class="math inline">\(v_t\)</span>转移人数，且<span class="math inline">\(v_t \in N^+(v_i)\)</span>。</p><p><span class="math display">\[lt^E = e(v_i, v_t) \rightarrow F_l \times U_t\]</span></p><p>该方向边的流量乘上单位时间即该结点在该方向的<strong>边流量限制<span class="math inline">\(lt^E\)</span></strong>。</p><p>特别地，边流量也可能随着时间的变化而变化，影响其变化的主要因素就是起点与终点的人数差。人数差越大，边流量也就越大，反之亦然。表示为：</p><p><span class="math display">\[e(v_i, v_t) \rightarrow F_l \propto \mid v_i\rightarrow N - v_t\rightarrow B\mid\]</span></p><h4 id="结点偏向性限制">结点偏向性限制</h4><p>当人群有多种出口选择的时候，人们会偏向选择流动最快的。但是在紧急疏散过程中，根据人群的从众心理，很有可能在有多种选择时，人们偏向选择人数多方向。即在向目标结点转移限制的表示为：</p><p><span class="math display">\[lt^D = v_i \rightarrow N \times \frac{v_t \rightarrow N + v_t\rightarrow \delta}{\sum_{v\in N^+(v_i) }v_t \rightarrow N + v_t\rightarrow \delta}\]</span></p><p>即多个目标方向中，人数越多的，该结点向目标结点的偏向性越大，即<strong>结点的偏向性限制<span class="math inline">\(lt^D\)</span></strong>。</p><h2 id="模型测试">模型测试</h2><h3 id="输入">输入</h3><p>仍然用<a href="#预处理">预处理</a>中的图片作为输入，再加上每个结点的相关信息。</p><h4 id="结点信息">结点信息</h4><table><thead><tr><th style="text-align: center;">标签</th><th style="text-align: center;">是否出口</th><th style="text-align: center;"><span class="math inline">\(N\)</span></th><th style="text-align: center;"><span class="math inline">\(M_v\)</span></th></tr></thead><tbody><tr><td style="text-align: center;">1</td><td style="text-align: center;">false</td><td style="text-align: center;">1600</td><td style="text-align: center;">3000</td></tr><tr><td style="text-align: center;">2</td><td style="text-align: center;">false</td><td style="text-align: center;">2000</td><td style="text-align: center;">3000</td></tr><tr><td style="text-align: center;">3</td><td style="text-align: center;">false</td><td style="text-align: center;">2500</td><td style="text-align: center;">2500</td></tr><tr><td style="text-align: center;">4</td><td style="text-align: center;">false</td><td style="text-align: center;">3000</td><td style="text-align: center;">3000</td></tr><tr><td style="text-align: center;">5</td><td style="text-align: center;">false</td><td style="text-align: center;">2600</td><td style="text-align: center;">3000</td></tr><tr><td style="text-align: center;">6</td><td style="text-align: center;">false</td><td style="text-align: center;">3000</td><td style="text-align: center;">3000</td></tr><tr><td style="text-align: center;">7</td><td style="text-align: center;">false</td><td style="text-align: center;">4000</td><td style="text-align: center;">4000</td></tr><tr><td style="text-align: center;">A</td><td style="text-align: center;">true</td><td style="text-align: center;">NA</td><td style="text-align: center;">NA</td></tr><tr><td style="text-align: center;">H</td><td style="text-align: center;">true</td><td style="text-align: center;">NA</td><td style="text-align: center;">NA</td></tr></tbody></table><h4 id="边值信息">边值信息</h4><table><thead><tr><th style="text-align: center;">结点编号</th><th style="text-align: center;">结点编号</th><th style="text-align: center;"><span class="math inline">\(F_l\)</span></th><th style="text-align: center;"><span class="math inline">\(M_e\)</span></th></tr></thead><tbody><tr><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;">6</td><td style="text-align: center;">10</td></tr><tr><td style="text-align: center;">1</td><td style="text-align: center;">7</td><td style="text-align: center;">4</td><td style="text-align: center;">10</td></tr><tr><td style="text-align: center;">1</td><td style="text-align: center;">5</td><td style="text-align: center;">3</td><td style="text-align: center;">10</td></tr><tr><td style="text-align: center;">1</td><td style="text-align: center;">A</td><td style="text-align: center;">5</td><td style="text-align: center;">10</td></tr><tr><td style="text-align: center;">5</td><td style="text-align: center;">H</td><td style="text-align: center;">7</td><td style="text-align: center;">10</td></tr><tr><td style="text-align: center;">5</td><td style="text-align: center;">6</td><td style="text-align: center;">3</td><td style="text-align: center;">10</td></tr><tr><td style="text-align: center;">5</td><td style="text-align: center;">4</td><td style="text-align: center;">2</td><td style="text-align: center;">5</td></tr><tr><td style="text-align: center;">4</td><td style="text-align: center;">7</td><td style="text-align: center;">3</td><td style="text-align: center;">5</td></tr><tr><td style="text-align: center;">2</td><td style="text-align: center;">7</td><td style="text-align: center;">4</td><td style="text-align: center;">5</td></tr><tr><td style="text-align: center;">3</td><td style="text-align: center;">4</td><td style="text-align: center;">6</td><td style="text-align: center;">10</td></tr></tbody></table><h3 id="输出">输出</h3><p>经过程序模拟，得到疏散的过程，我们把数据放到MATLAB中进行数据的可视化，得到结果：</p><figure><img src="https://imgbed.scubot.com/simple_model-result.png" alt="结果"><figcaption aria-hidden="true">结果</figcaption></figure><p>结果就如看到的这样，每个结点的人数随时间的变化趋势。</p><h2 id="分析总结">分析总结</h2><p>其实在比赛中的模型内容比上面说的要复杂一些，但是总体的思路并没有变。当时在设计的过程中抛弃了很多想法，原因很简单，我一个人能力达不到或者是时间不够用。</p><p>也就是在美赛的第一天下午我们就商量决定用这种方法去构建模型，在程序设计的过程中我也遇到了很多细节问题，针对这些问题我自己做了一些决策，不过至少跑出来了结果。</p><p>如果要我分析这个算法，我是很不愿意的。因为我知道这个算法就是一个离散时间跑多次BFS再加上四个我拍脑袋想出来的数学公式，它基本没有使用价值，存在的意义仅仅是帮我完成论文和锻炼我的编程能力。</p><p>但是毕竟这个模型也投入了我很大的精力，所以我才想写篇博客把这些内容记录下来，也希望我下次打数模比赛的时候多想想这次的教训，希望以后我能做得更好吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外部排序及性能测试</title>
    <link href="/article/409/"/>
    <url>/article/409/</url>
    
    <content type="html"><![CDATA[<h1 id="外部排序及性能测试">外部排序及性能测试</h1><h2 id="概述">概述</h2><p>文章以DSAA课程中的一个实验题目为例，展示:</p><ul><li>具体算法细节(<a href="#外部排序算法">外部排序算法</a>)</li><li>数据结构实现(<a href="#**数据结构**">数据结构</a>)</li><li>程序性能测试(<a href="#性能测试">性能测试</a>)</li></ul><p>最后对实验的结果做分析与总结(<a href="#程序分析">程序分析</a>)，再写一些感想(<a href="#结语">结语</a>)。</p><span id="more"></span><hr><p>这个实验课题的程序我连续肝了两天，其中最后一天在Wakatime上的记录coding时长突破了我一天写代码时长的记录达到10h。</p><p>最后一节DSAA课的时候(半个月前)也上台展示了自己的程序，不过现在想想有很多遗憾的地方，具体的在最后一部分总结时说。</p><p>写程序是一方面，测程序是另一方面。为了测试程序的性能，我在最后期末考试的复习阶段几乎把每科的复习时间压缩到了一天时间内，也写了一部分脚本花了很多时间进行反复测试。</p><p>所以</p><p>如果读者不太清楚外排的细节以及其性能的规律，不妨耐心看完，看到最后一定会有所收获；</p><p>如果读者已经对这部分内容了如指掌，也请多多指出文章内容的不合理之处以便我改正。</p><h2 id="题目要求">题目要求</h2><p><strong>下面是题目的具体要求:</strong></p><blockquote><p>For this task, you will implement an external sorting algorithm. Theinput data file will consist of 8N (N is a positive integer number)blocks of data, where a block is 4096 bytes. Each block will contain aseries of records, where each record has 8 bytes. The first 4-byte fieldis a non-negative integer value for the record ID and the second 4-bytefield is a float value for the key, which will be used for sorting. Thuseach block contains 512 records.</p><p>Your job is to sort the file (in ascending order of the key values),as follows: Using replacement selection, you will sort sections of thefile in a working memory that is 8 blocks long. To be precise, the heapwill be 8 blocks in size; in addition you will also have a one blockinput buffer, a one block output buffer and any additional workingvariables that you need. To process, read the first 8 blocks of theinput file into memory and use replacement selection to create thelongest possible run. As it is being created, the run is output to theone block output buffer. Whenever this output buffer becomes full, it iswritten to an output file called the run file. When the first run iscomplete, continue on to the next section of the input file, adding thesecond run to the end of the run file. When the process of creating runsis complete, the run file will contain some number of runs, each runbeing at least 8 blocks long, with the data sorted within each run. Forconvenience, you will probably want to begin each run in a new block.You will then use a multi-way merge to combine the runs into a singlesorted file. You must also use 8 blocks of memory used for the heap inthe run-building step to store working data from the runs during themerge step. Multi-way merging is done by reading the first block fromeach of the runs currently being merged into your working area, andmerging these runs into the one block output buffer. When the outputbuffer fills up, it is written to another output file. Whenever one ofthe input blocks is exhausted, read in the next block for thatparticular run. This step requires random access (using seek) to the runfile, and a sequential write of the output file. Depending on the sizeof all records, you may need multiple passes of multiway-merging to sortthe whole record. Your program will take the names of two files from thecommand line, like this:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">extsort &lt;record file name&gt; &lt;statistics file name&gt;<br></code></pre></td></tr></tbody></table></figure><p>The record file is the input data file to be sorted. At the end ofyour program, the record file (on disk) should be sorted. So yourprogram does modify the input data file. Be careful to keep a copy ofthe original when you do your testing. In addition to sorting the datafile, you must report some information about the execution of yourprogram (e.g., the number of runs, and the time taken to sort the recordfile), which will be stored in the statistics file. If the specifiedrecord file does not exist, output a suitable error message and exit.Your program will create the statistics file if it does not alreadyexist, or append to it if it does.</p></blockquote><p><strong>翻译成中文，简而言之：</strong></p><ol type="1"><li><p>定义内存中每个<strong>块</strong>的大小为4096 bytes(4kb)。</p></li><li><p>待排序文件(为了简便下面统称为<code>REC.dat</code>)中只包含记录，且文件占8N个块大小(即32Nkb)。</p></li><li><p>每条记录包含一个<strong>键</strong>(<code>float</code>类型, 4bytes)和一个<strong>值</strong>(<code>unsigned int</code>类型, 4bytes)，每条记录占8bytes，以二进制方式存储，即每个块中正好能存下512条记录。</p></li><li><p><strong>主存</strong>(main memory)允许10个块大小，其中：</p><ul><li>1个块实现输入缓冲区</li><li>1个块实现输出缓冲区</li><li>8个块实现数据处理</li></ul></li><li><p>用<strong>置换选择</strong>的办法按键的升序产生顺串，每一个顺串补全整数个块大小，所有的顺串首尾相接存储在一个顺串文件(统称<code>RUNFILE.tmp</code>)中。</p></li><li><p>用<strong>八路归并</strong>的方法归并顺串，最后得到的结果存储在<code>REC.dat</code>中，且保留一份原<code>REC.dat</code>的拷贝文件(统称<code>cp_REC.dat</code>)。</p></li><li><p>以追加的方式将排序的中间信息写入<strong>统计文件</strong>(统称<code>STAT.csv</code>)中。写入的信息至少包括：</p><ul><li>置换选择产生的顺串的个数</li><li>排序所用的时间</li></ul></li></ol><h2 id="分析与准备">分析与准备</h2><ol type="1"><li><p>首先要考虑的是待排序文件要怎么得到，我选择了用随机数随机产生数据得到数据文件，源码很简单如下：</p><blockquote><p><code>random_creater.cc</code></p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> N;<br>string filename;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e6</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> block_rec = <span class="hljs-number">512</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> </span>{<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>    filename = argv[<span class="hljs-number">1</span>];<br>    N = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">2</span>]);<br>    <br>    <span class="hljs-function">ofstream <span class="hljs-title">outFile</span><span class="hljs-params">(filename.c_str(), ios::out | ios::binary)</span></span>;<br>    <span class="hljs-keyword">if</span> (!outFile.<span class="hljs-built_in">good</span>()) {<br>        cout &lt;&lt; <span class="hljs-string">"file open error!"</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    }<br>    <br>    <span class="hljs-type">int</span> total_ = block_rec * <span class="hljs-number">8</span> * N;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> inc = <span class="hljs-number">0</span>; inc &lt; total_; inc ++) {<br>        <span class="hljs-function">pair&lt;<span class="hljs-type">float</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; <span class="hljs-title">rec</span><span class="hljs-params">(<span class="hljs-number">1.0</span> * (rand() % maxn) / <span class="hljs-number">11</span>, rand() % maxn)</span></span>;<br>        outFile.<span class="hljs-built_in">write</span>((<span class="hljs-type">char</span> *)&amp;rec, <span class="hljs-built_in">sizeof</span>(rec));<br>    }<br><br>    cout &lt;&lt; <span class="hljs-string">"_____________________________________________________"</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"Succeed in writing 8 * 512 * "</span> &lt;&lt; N &lt;&lt; <span class="hljs-string">" = "</span> \<br>        &lt;&lt; <span class="hljs-number">8</span> * <span class="hljs-number">512</span> * N &lt;&lt; <span class="hljs-string">" records in file: "</span> &lt;&lt; filename &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"File's size should be "</span> &lt;&lt; <span class="hljs-number">8</span> * <span class="hljs-number">4096</span> * N &lt;&lt; <span class="hljs-string">" bytes"</span> \<br>        &lt;&lt; <span class="hljs-string">" ("</span> &lt;&lt; <span class="hljs-number">32</span> * N &lt;&lt; <span class="hljs-string">" kb)"</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"_____________________________________________________"</span> &lt;&lt; endl;<br>    <br>    outFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>调用方式(git bash)：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./random_creater.exe REC.dat N<br></code></pre></td></tr></tbody></table></figure><p>其中<code>REC.dat</code>为要产生的数据文件，<code>N</code>就是题目要求中的N，用来规定数据规模。</p><p>效果如下：</p><figure><img src="https://imgbed.scubot.com/extsort-post-inf-random.jpg" alt="random_creater演示"><figcaption aria-hidden="true">random_creater演示</figcaption></figure><p>检查生成文件大小：</p><figure><img src="https://imgbed.scubot.com/extsort-post-inf-random-check.jpg" alt="random_creater-check演示"><figcaption aria-hidden="true">random_creater-check演示</figcaption></figure><p>与目标一致。</p></li><li><p>其次就是怎么检查文件是否排序完成。由于所有记录以二进制方式存入，用文本编辑器打开会显示乱码，且记录条数达到<span class="math inline">\(512\times8N\)</span>，所以需要用程序辅助检查。</p><p>我这里用简单的顺序查找方式来找出不符合<strong>键是升序</strong>这一要求的记录，如果查找完毕没有不符合要求的记录则认为文件已排序。源码如下：</p><blockquote><p><code>check_sorted.cc</code></p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string filename;  <br>string statFile;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> </span>{<br>    filename = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-function">ifstream <span class="hljs-title">inFile</span><span class="hljs-params">(filename.c_str(), ios::binary)</span></span>;  <br>    <span class="hljs-keyword">if</span> (!inFile.<span class="hljs-built_in">good</span>()) {<br>        cout &lt;&lt; <span class="hljs-string">"file open error"</span> &lt;&lt; endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    }<br><br>    pair&lt;<span class="hljs-type">float</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; rec;<br>    <span class="hljs-type">double</span> prec = <span class="hljs-number">-1e7</span>;<br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (inFile.<span class="hljs-built_in">read</span>((<span class="hljs-type">char</span> *)&amp;rec, <span class="hljs-built_in">sizeof</span>(rec))) {<br>        <span class="hljs-keyword">if</span> (rec.first &lt; prec) {<br>            cout &lt;&lt; <span class="hljs-string">"__________________________________"</span> &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">"file: "</span> &lt;&lt; filename &lt;&lt; <span class="hljs-string">" has not been sorted"</span> &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">"prev-idx: "</span> &lt;&lt; idx - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">"  key: "</span> &lt;&lt; prec &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">"curr-idx: "</span> &lt;&lt; idx &lt;&lt; <span class="hljs-string">"  key: "</span> &lt;&lt; rec.first &lt;&lt; endl;<br>            cout &lt;&lt; <span class="hljs-string">"__________________________________"</span> &lt;&lt; endl;<br>            inFile.<span class="hljs-built_in">close</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        }<br>        prec = rec.first;<br>        idx ++;<br>    }<br><br>    cout &lt;&lt; <span class="hljs-string">"file: "</span> &lt;&lt; filename &lt;&lt; <span class="hljs-string">" has been sorted"</span> &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">"__________________________________"</span> &lt;&lt; endl;<br>    inFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>调用方式(git bash)：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./check_sorted.exe REC.dat<br></code></pre></td></tr></tbody></table></figure><p>我们来查一下刚刚随机生成的数据文件的有序情况(大概率下是没有排好序的，有兴趣的话可以去考虑计算一下记录非升序的第一个索引的期望)</p><figure><img src="https://imgbed.scubot.com/extsort-post-inf-check.png" alt="check_sorted演示"><figcaption aria-hidden="true">check_sorted演示</figcaption></figure><p>很明显，该随即数据的文件并没有被排序，且第一处出现非升序的索引是<code>prev-idx: 0</code>。</p></li><li><p>接下来考虑外部排序的内容。</p><p>算法和数据结构下面两部分详细讨论，这里考虑<code>STAT.csv</code>中存储的数据内容。</p><ul><li>待排序文件的大小，文件中记录的个数</li><li>产生的顺串总个数</li><li>八路归并的次数</li><li>产生顺串消耗的时间</li><li>归并消耗的时间</li><li>总消耗的时间</li></ul><p>只需要在排序过程中记录以上数据，最后再输出到文件。</p></li></ol><h2 id="外部排序算法">外部排序算法</h2><h3 id="说明">说明</h3><p>外部排序是指对大型文件的排序算法，由于无法将文件内容全部读入到主存中，所以一般采用<strong>产生顺串</strong>再<strong>归并顺串</strong>这样的归并排序算法的思想。</p><p>外部排序与内部排序的最大不同就是，制约算法效率的核心因素不同。</p><ul><li>内部排序制约算法效率的核心因素是<strong>数据比较/交换的次数(桶排序，基数排序等除外)</strong></li><li>外部排序制约算法效率的核心因素是<strong>读取和写入文件的次数</strong></li></ul><p>外部排序是一类算法，具体的实现也不尽相同，这里实现的算法只是其中一种。不过不论哪一种外部排序算法，其核心思想都是<strong>将对文件的I/O操作次数降到最小</strong>，具体体现为<strong>利用特定的算法，使得产生的顺串个数尽可能小</strong>，这也是产生顺串的过程采用置换选择的原因。</p><p>对所有置换选择产生的顺串进行归并，一般采用多路归并。考虑到主存空间及时间效率等限制，采用八路归并。</p><h3 id="流程图">流程图</h3><p>程序流程</p><figure><img src="https://imgbed.scubot.com/extsort-post-inf-path.jpg" alt="流程展示"><figcaption aria-hidden="true">流程展示</figcaption></figure><h3 id="置换选择">置换选择</h3><p><strong>置换选择(Replacementselection)</strong>是用来产生顺串的一种算法，其本质是最小堆的变形。</p><h4 id="算法流程">算法流程</h4><ol type="1"><li><p>从文件中读取数据，读到最小堆的数组里，这里根据要求读入8个块大小。记录最后一组数据的索引为<span class="math inline">\(LAST=8\times 512 -1\)</span>。</p></li><li><p>利用数据中键的偏序关系建立最小堆。</p></li><li><p>重复以下步骤直到最小堆为空(<span class="math inline">\(LAST &lt;0\)</span>)：</p><ol type="1"><li><p>取出堆顶数据送到输出缓冲区。</p></li><li><p>从输入缓冲区读入一组数据<span class="math inline">\(R\)</span>，将其放置在堆顶。</p></li><li><p>如果<span class="math inline">\(R\)</span>比刚刚输出的堆顶数据小，则将<span class="math inline">\(R\)</span>与堆中索引为<span class="math inline">\(LAST\)</span>的数据交换位置，之后<span class="math inline">\(LAST=LAST-1\)</span>。</p></li><li><p>对堆顶数据进行<strong>下沉(Sift down)</strong>操作。</p></li></ol></li><li><p>上一步完成后就产生了一个顺串，这时只需重复&lt;2&gt;和&lt;3&gt;直到输入缓冲区为空停止。</p></li></ol><h4 id="算法框架">算法框架</h4><figure><img src="https://imgbed.scubot.com/extsort-post-inf-rs.jpg" alt="算法框架"><figcaption aria-hidden="true">算法框架</figcaption></figure><h4 id="算法分析">算法分析</h4><p>堆的容量为<span class="math inline">\(8 \times512\)</span>，在平摊意义下每个顺串包含的数据个数为为<span class="math inline">\(2\times8\times 512\)</span>。</p><p>若有<span class="math inline">\(8\times512N\)</span>条记录，最后的顺串个数约为<span class="math inline">\(\frac{8\times 512N}{2\times 8\times 512}= N/2\)</span>。</p><h3 id="多路归并">多路归并</h3><p>以八路归并为例子，将产生的多个顺串归并到一个文件中。</p><p>由于归并路数不大，我们可以直接顺序搜索8个元素中最大的那个。</p><p>例如：</p><p>现在一共有<span class="math inline">\(M\)</span>份顺串，我们将他们在文件<span class="math inline">\(A\)</span>和<span class="math inline">\(B\)</span>间进行归并：</p><ul><li>首先将<span class="math inline">\(M\)</span>每8个分成一组，最后多出来的可能不够8个。</li><li>构造一个输入缓冲池(8个块)，由8个输入缓冲区构成，每个缓冲区负责读入一份顺串。</li><li>每个输入缓冲区取出一份记录，在8条记录中找到最小的那份送到输出缓冲区。</li><li>一旦有输入缓冲区为空就继续读入文件，直到该文件读完该缓冲区搁置。</li><li>一旦输出缓冲区为满则向输出文件<span class="math inline">\(A\)</span>中输出。</li></ul><p>每组顺串重复以上过程直到结果全部输出到<span class="math inline">\(A\)</span>。所以我们能在该文件中得到<span class="math inline">\(\lceil \frac{M}{8}\rceil\)</span>个顺串。</p><p>然后对<span class="math inline">\(A\)</span>中的顺串进行同样过程的归并，得到的顺串输出到<span class="math inline">\(B\)</span>，再经过同样的过程输出到<span class="math inline">\(A\)</span>。直到顺串个数为1。</p><p>所以我们得到八路归并<span class="math inline">\(M\)</span>条顺串的文件操作次数是<span class="math inline">\(\lceil \log_8M\rceil\)</span>次。</p><h2 id="数据结构">数据结构</h2><p>上面的内容更偏重理论的分析，这部分我们将着手于在C++中的算法实现。</p><p>由于篇幅有限，接下来我给出一些设计思路于关键类的定义与说明，具体实现部分还请参考<strong><a href="https://github.com/Herixth/External-sorting">External-sorting</a></strong>。</p><h3 id="类定义缓冲区">类定义：缓冲区</h3><p>根据题目的具体要求，程序需要进行多次文件操作，也是我们出于对主存利用效率更高的需求，程序中需要实现对输入输出缓冲区的模拟。故有<strong>Buffer</strong>类定义：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Buffer</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Buffer</span>();<br>    ~<span class="hljs-built_in">Buffer</span>();<br>    <span class="hljs-comment">// 从参数指定的文件输入流中的指定参数字节位置开始读入一个缓冲区大小的数据</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">get_input</span><span class="hljs-params">(std::ifstream &amp;, <span class="hljs-type">int</span> = <span class="hljs-number">-1</span>)</span></span>; <br>    <span class="hljs-comment">// 向参数指定的文件输出流中以二进制输出整个缓冲区内容</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">write_output</span><span class="hljs-params">(std::ofstream &amp;)</span></span>;<br><br>    <span class="hljs-comment">// 获得当前__curr索引下的记录 </span><br>    <span class="hljs-comment">// typedef std::pair&lt;float, unsigned int&gt; pis;</span><br>    <span class="hljs-function">pis <span class="hljs-title">get_value</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 获取当前__curr索引</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_curr</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 向缓冲区末尾追加新纪录</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">append_value</span><span class="hljs-params">(pis)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move_to_start</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move_to_end</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move_to_next</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 清空缓冲区</span><br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">at_end</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 判断是否读到末尾</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 判断缓冲区是否为空</span><br><span class="hljs-keyword">private</span>:<br>    pis __buffer[rec_max];  <span class="hljs-comment">// 缓冲区数组定义</span><br>    <span class="hljs-type">int</span> __curr;  <span class="hljs-comment">// 当前记录索引</span><br>    <span class="hljs-type">int</span> __maxN;  <span class="hljs-comment">// 当前缓冲区的记录数目</span><br>    <span class="hljs-type">bool</span> is_empty;          <span class="hljs-comment">// 是否为空</span><br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="类定义最小堆">类定义：最小堆</h3><p>支持置换选择算法的数据结构是最小堆的变体，下面给出最小堆<strong>Min_heap</strong>的类定义：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Min_heap</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Min_heap</span>();<br>    ~<span class="hljs-built_in">Min_heap</span>();<br>    <span class="hljs-comment">// 根据缓冲区和文件输入流参数初始化最小堆中的值</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(Buffer &amp;, std::ifstream &amp;)</span></span>;<br>    <span class="hljs-comment">// 是否为空堆</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-comment">// 关键函数，用来实现置换选择算法</span><br>    <span class="hljs-function">pis <span class="hljs-title">remove_add</span><span class="hljs-params">(pis)</span></span>;<br>    <span class="hljs-comment">// 建堆</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build_heap</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 当前堆大小</span><br>    <span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> __left(<span class="hljs-type">int</span>) <span class="hljs-type">const</span>;<br>    <span class="hljs-type">int</span> __right(<span class="hljs-type">int</span>) <span class="hljs-type">const</span>;<br>    <span class="hljs-type">bool</span> __isLeaf(<span class="hljs-type">int</span>) <span class="hljs-type">const</span>;<br>    <span class="hljs-comment">// 下沉</span><br>    <span class="hljs-type">void</span> __siftdown(<span class="hljs-type">int</span>);<br>    <span class="hljs-comment">// 最小堆数组</span><br>    pis heap[block_num * rec_max];<br>    <span class="hljs-type">int</span> __maxN;<br>    <span class="hljs-type">int</span> __curr;<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="类定义外部排序管理">类定义：外部排序管理</h3><p>整合外部排序算法，定义对外接口函数，使排序实现更简洁。</p><p>给出<strong>Extsort_Manager</strong>类定义：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Extsort_Manager</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 读入argv参数</span><br>    <span class="hljs-built_in">Extsort_Manager</span>(<span class="hljs-type">char</span> **);<br>    ~<span class="hljs-built_in">Extsort_Manager</span>();<br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 置换选择建立顺串</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">create_runfile_RS</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 顺串八路归并</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">void</span> __merge(<span class="hljs-type">int</span>, std::vector&lt;pii&gt; &amp;);<br><br>    std::string rec_fname;  <span class="hljs-comment">// 待排序文件名</span><br>    std::string stat_fname; <span class="hljs-comment">// 信息统计文件名</span><br>    std::string run_fname;  <span class="hljs-comment">// 临时顺串的文件</span><br><br>    std::ifstream inFile;<br>    std::ofstream outFile;<br>    std::ofstream statFile;<br>    <span class="hljs-comment">// 记录临时顺串的索引信息</span><br>    std::vector&lt;pii&gt; run_idx;<br>    <br>    Buffer input_buffer; <span class="hljs-comment">// 单独的输入缓冲区</span><br>    Buffer output_buffer; <span class="hljs-comment">// 单独的输出缓冲区</span><br>    <span class="hljs-comment">// 归并中用到的输入缓冲池</span><br>    Buffer buffer_pool[block_num];<br>    <span class="hljs-comment">// 最小堆</span><br>    Min_heap min_heap;<br>    <span class="hljs-comment">// 实现计时功能</span><br>    std::<span class="hljs-type">clock_t</span> start_clc;<br>    std::<span class="hljs-type">clock_t</span> run_build_cost;<br>    std::<span class="hljs-type">clock_t</span> merge_cost;<br>};<br></code></pre></td></tr></tbody></table></figure><h2 id="性能测试">性能测试</h2><p>外部排序程序实现之后我们需要对其进行测试。</p><h3 id="测试概况">测试概况</h3><p>由于还需要进行多组的测试，所以<code>check_sorted.exe</code>将检查结果同样写入<code>STAT.csv</code>文件中，同样对<code>random_creater.cc</code>进行一部分修改。</p><p>特别的，由于测试数据来源是完全随机的，很难避免测试结果的偶然性，所以我们采用多次测试结构取平均值的方法对某一个N值进行测试。</p><p>为了更方便进行多组测试，我们利用shell脚本对测试逻辑打包，具体如下：</p><blockquote><p><code>autoTest.sh</code></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">########### 测试开始 ############</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"-----info-----"</span>     <span class="hljs-comment"># 输入信息块</span><br>recFile=<span class="hljs-string">"REC.dat"</span>         <span class="hljs-comment"># 为了方便测试，规定待排序文件名称</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">"input statfile: "</span> statFile  <span class="hljs-comment"># 输入信息统计文件名称</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">"input minN: "</span> minN          <span class="hljs-comment"># 最小的N</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">"input maxN: "</span> maxN          <span class="hljs-comment"># 最大的N    满足 minN &lt;= N &lt;= maxN</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">"input step: "</span> step          <span class="hljs-comment"># N自增的步长  及每次循环N自增的数值</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">"input test round: "</span> divide  <span class="hljs-comment"># 每一个N随机测试的次数，最后各项数据取平均值</span><br>srcFile=<span class="hljs-string">"src.tmp"</span>         <span class="hljs-comment"># 默认临时文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"-----init-----"</span>     <span class="hljs-comment"># 初始化板块</span><br>cprecFile=<span class="hljs-string">"cp_"</span><span class="hljs-variable">${recFile}</span> <span class="hljs-comment"># 源文件的拷贝文件名称 </span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$minN</span> -eq 1 ]; <span class="hljs-keyword">then</span>  <span class="hljs-comment"># 如果N从1开始，则重置信息统计文件statFile</span><br>    <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$statFile</span>     <br>    <span class="hljs-comment"># 并把头信息重定向输入到statFile中</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">"N,file size,records num,total runs,runs-var,\</span><br><span class="hljs-string">    run-build(s),run-build-var,run-merge(s),run-merge-var,\</span><br><span class="hljs-string">    total cost(s),total-var,state"</span> &gt; <span class="hljs-variable">$statFile</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># 为了防止编译环境不同导致的程序运行错误，对辅助程序进行重新编译</span><br><span class="hljs-comment"># 由于我这里只是在本地测试就省去以下编译步骤以节省时间</span><br><span class="hljs-comment"># g++ random_creater.cc -o random_creater.exe</span><br><span class="hljs-comment"># g++ check_sorted.cc -o check_sorted.exe</span><br><span class="hljs-comment"># g++ unit.cc -o unit.exe</span><br>clear<br><span class="hljs-built_in">echo</span> <span class="hljs-string">"-----test-----"</span>     <span class="hljs-comment"># 测试板块</span><br><span class="hljs-comment"># 主循环：对N从minN到maxN以步长为step进行循环测试</span><br><span class="hljs-keyword">for</span> ((N=<span class="hljs-variable">$minN</span>; N&lt;=<span class="hljs-variable">$maxN</span>; N+=<span class="hljs-variable">$step</span>))<br><span class="hljs-keyword">do</span><br>    <span class="hljs-comment"># 强制删除每次测试产生的临时文件以及排序文件，只留下信息统计文件以保证测试所占用内存的大小</span><br>    <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$srcFile</span> <span class="hljs-variable">$recFile</span> <span class="hljs-variable">$cprecFile</span><br>    <span class="hljs-comment"># 次循环：针对每个N，测试divide次，最后的结果用unit.exe进行平均处理</span><br>    <span class="hljs-keyword">for</span> ((round=<span class="hljs-number">1</span>; round&lt;=divide; round++))<br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">"N: <span class="hljs-variable">$N</span>: round: <span class="hljs-variable">$round</span>"</span>           <span class="hljs-comment"># 终端中显示当前测试进度</span><br>        ./random_creater.exe <span class="hljs-variable">$recFile</span> <span class="hljs-variable">$N</span>      <span class="hljs-comment"># 产生随即数据</span><br>        ./extsort.exe <span class="hljs-variable">$recFile</span> <span class="hljs-variable">$srcFile</span>       <span class="hljs-comment"># 将该次排序的统计信息写入临时文件</span><br>        ./check_sorted.exe <span class="hljs-variable">$recFile</span> <span class="hljs-variable">$srcFile</span>  <span class="hljs-comment"># 将该次排序的检查结果写入临时文件</span><br>    <span class="hljs-keyword">done</span><br>    ./unit.exe <span class="hljs-variable">$srcFile</span> <span class="hljs-variable">$statFile</span>    <span class="hljs-comment"># 针对多次测试产生的临时文件进行均值处理写入统计文件</span><br>    <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$srcFile</span>                   <span class="hljs-comment"># 删除临时文件</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$cprecFile</span> <span class="hljs-variable">$recFile</span>            <span class="hljs-comment"># 测试结束后删除除统计文件外的程序产生文件</span><br><span class="hljs-comment">########### 测试结束 ############</span><br></code></pre></td></tr></tbody></table></figure><p>其中<code>statFile</code>中的头信息为：</p><table><thead><tr><th>N</th><th>file size(M)</th><th>records num</th><th>total runs</th><th>runs-var</th><th>run-build(s)</th><th>run-build-var</th><th>run-merge(s)</th><th>run-merge-var</th><th>total cost(s)</th><th>total-var</th><th>state</th></tr></thead><tbody><tr><td>N</td><td>文件大小</td><td>数据记录个数</td><td>产生顺串个数</td><td>顺串个数方差</td><td>建立顺串耗时</td><td>建立顺串耗时方差</td><td>归并顺串耗时</td><td>归并顺串耗时方差</td><td>总耗时</td><td>总耗时的方差</td><td>sorted/unsorted</td></tr></tbody></table><h3 id="单点测试">单点测试</h3><p>有了完整的测试逻辑，我们来测试一个N的值来看看效果：</p><figure><img src="https://imgbed.scubot.com/extsort-post-inf-init.png" alt="单点测试_1"><figcaption aria-hidden="true">单点测试_1</figcaption></figure><figure><img src="https://imgbed.scubot.com/extsort-post-inf-test.png" alt="单点测试_2"><figcaption aria-hidden="true">单点测试_2</figcaption></figure><p>最后我们用EXCEL打开<code>STAT.csv</code>文件，得到：</p><figure><img src="https://imgbed.scubot.com/extsort-post-inf-result.png" alt="结果"><figcaption aria-hidden="true">结果</figcaption></figure><p>N=1的测试10次的结果就很显然了，总耗时为0.0083 s。</p><p>测了个最小的，那为什么不测一个大的呢。</p><p>目前为止受限于我计算机硬盘的大小，我最大只测过N=100000即3.05GB规模的文件，结果如下：</p><figure><img src="https://imgbed.scubot.com/extsort-post-inf-res.png" alt="结果"><figcaption aria-hidden="true">结果</figcaption></figure><p><span class="math inline">\(1375.91\text{ s} /60 \approx 22.93 \text{min}\)</span>，也就是花了几乎23分钟。这个结果直观看上去确实太慢了，而我个人也认为这个可以再快一点，由于耗时比较长，所以我没有多次测试，可能在平均条件下3.05GB的耗时可能会稍微好一点。</p><h3 id="多点测试">多点测试</h3><p>单点测试有很大的不确定性，而且我们也想知道该算法随时间增长的耗时是什么样子的趋势，所以我们可以继续用上面的测试脚本来测试N是一个范围内的所有数值。</p><h5 id="mb58.0938mb">1—1859(0.03125mb—58.0938mb)</h5><p>为了先有个直观的印象，我测了一组N从1到1859的数据，每组N只测了两次取平均值。得到的结果如下：</p><ul><li><p>顺串个数随N的变化趋势</p><figure><img src="https://imgbed.scubot.com/extsort-1_1859_run.png" alt="顺串趋势"><figcaption aria-hidden="true">顺串趋势</figcaption></figure><p>经过线性回归模拟出来的方程为</p><p><span class="math display">\[y = 0.4999x + 1.2492\]</span></p><p>可以看出斜率<span class="math inline">\(k \approx0.5\)</span>，即说明之前的顺串个数是数据规模的一半(<a href="#算法分析">算法分析</a>)</p></li><li><p>建立顺串耗时、归并顺串耗时、总耗时随N的变化趋势</p><figure><img src="https://imgbed.scubot.com/extsort-1_1859_cost.png" alt="耗时趋势"><figcaption aria-hidden="true">耗时趋势</figcaption></figure><p>可以很明显的看出在<span class="math inline">\(N&gt;1000\)</span>之后各项耗时变得很不稳定，而且显然建立顺串的过程比归并顺串的过程要稳定得多，可能是每组数据测的次数太少导致的。</p></li><li><p>各指标方差随N的变化趋势</p><figure><img src="https://imgbed.scubot.com/extsort-1_1859_var.png" alt="方差趋势"><figcaption aria-hidden="true">方差趋势</figcaption></figure><p>可见随即数据对排序效率影响之大，尤其是在文件较大的时候方差非常不稳定。</p></li></ul><h5 id="mb17.0938mb">1—547(0.03125mb—17.0938mb)</h5><p>前一种测试结果的数据不是很稳定，在同学的帮助下，我得到了一组N从1到547的数据，其中每组N测100次取平均，应该比上面的结果有更好的说服力。</p><ul><li><p>顺串个数的变化趋势和之前基本相同，这里省略。</p></li><li><p>建立顺串耗时、归并顺串耗时、总耗时随N的变化趋势</p><figure><img src="https://imgbed.scubot.com/extsort-1_547_cost.png" alt="耗时趋势"><figcaption aria-hidden="true">耗时趋势</figcaption></figure><p>总体上耗时和N的大小是正相关的，不过也N在250到300范围内的耗时出现了明显的断层，这个原因有很多，最有可能的是不同测试环境下的差异造成的，因为我把这些数据分成了很多个数据段分别发给同学们去测试。</p></li><li><p>各指标方差随N的变化趋势</p><figure><img src="https://imgbed.scubot.com/extsort-1_547_var.png" alt="方差趋势"><figcaption aria-hidden="true">方差趋势</figcaption></figure><p>除了N=373左右的那个方差值太大，可能是测试过程有误。其他的方差普遍比较小，也有几处方差比周围大得多的地方。</p></li></ul><h2 id="程序分析">程序分析</h2><p>由于我没有找到更合适更快速的测试方法，向上面这样的测试会花费很长时间，所以我也希望从这些数据中总结出一些规律来。</p><ul><li>文件中数据的产生是随机的，而这种随机性对排序时间产生的影响是随着N的增大而增大的。第二组测试中每个N测了100次求均值，但是我们还是能明显看出时间消耗的不稳定性。</li><li>决定排序时间的因素除了文件初始的随机性之外，还有对文件操作的时间。对单位文件操作的时间会因为不同的硬件环境而改变。程序中操作的文件在逻辑上是连续的但是在物理上是不连续的，计算机操作系统中有专门的部件负责文件内存的分配，而内存中文件的离散程度也会随着已有文件的增大而增大，这也增加了文件操作的时间。这也能说明为什么第二组数据中N在250和300范围内和邻接数据有不同，因为这一段数据是我发给同学们的，在他的硬件环境下的文件操作耗时可能更小。</li><li>从第一组数据可以看出来，在N不超过一定范围的时候排序的耗时是接近稳定的，而一旦超过了这个范围，排序的耗时情况便不再那么有序，而对应的方差也明显变大。也就是说，这个排序程序实在一定范围内使用效果比较好，而超出这个范围也可以用，不过耗时可能便不那么容易预测。</li></ul><p>当然有了问题就要寻找解决优化的思路。</p><ul><li>在N小于一定范围时将所有数据都读入主存进行内部排序，减少文件的操作。我测了一下N=1000，即31.25MB的文件，全部读入主存调用头文件<code>algorithm</code>中的<code>std::sort</code>函数进行快速排序，同样测100次取平均数，得到的结果为<strong>2.78071s</strong>，要略小于外部排序的<strong>3.0785 s</strong>。</li><li>由第一组测试图表可以看出，对总耗时影响最大的是归并的部分，所以我们可以针对顺串归并做一些优化。比如在主存允许的情况下采用更多路的归并，减少归并的次数。也可以优化查找最小值的办法，因为查找操作会重复非常多次，我们可以设法维护一种数据结构来实现快速查找多个元素的最小值：最小堆，BIT等数据结构。</li><li>对于顺串的建立部分可以想办法在置换选择算法的基础上针对特殊情况进行改进，使得产生的顺串尽可能少。而产生的顺串可以存在不同的文件中方便归并的操作，不一定要存在一个文件中。</li></ul><h2 id="结语">结语</h2><p>至此，我比较详细的描述了外部排序的一种算法的实现以及其性能的测试，也提出了一些改进的拙见。当然文章中算法部分的内容是参考了<em>CliffordA. Shaffer</em>的<strong><a href="https://www.amazon.cn/dp/B00BR1VKXC/ref=sr_1_2?ie=UTF8&amp;qid=1547548378&amp;sr=8-2&amp;keywords=clifford+a.+shaffer">数据结构与算法分析(C++版)(第三版)英文版</a></strong>中<strong>8.5ExternalSorting</strong>的内容，我没有在网上找到该书原版的电子版，中文版倒是有，不过看过一点觉得翻译的质量并不高，所以希望大家有精力还是能够看一下这本书，这可能是我第一本一个词一个词啃了大半本的英文书了。</p><h3 id="特别感谢">特别感谢</h3><p>由于近期大家都在进行期末的备考，我也是终于有了大把的时间来做一些项目写一些内容。就这个题目而言，真正花费时间的不是程序的编写，而是数据的测试。曾经有连续三天的时间我几乎都在反复测试程序的性能，但到最后发现测试的脚本有问题，所以为了节省时间，我把测试的数据范围分成了很多小份，分别发给了同学进行测试，所以在这里感谢给我提供帮助的同学：</p><div class="note note-primary">            <pre><code class="hljs">        &lt;input type="checkbox"  checked="checked"&gt;&lt;em&gt;Weijun-Lin&lt;/em&gt; (&lt;a</code></pre><p>href="https://github.com/Weijun-Lin"&gt;Github)</p><pre><code class="hljs">        &lt;input type="checkbox"  checked="checked"&gt;&lt;em&gt;Marikruz&lt;/em&gt; (&lt;a</code></pre><p>href="https://github.com/Marikruz"&gt;Github)</p><pre><code class="hljs">        &lt;input type="checkbox"  checked="checked"&gt;&lt;em&gt;KIIIKIII&lt;/em&gt; (&lt;a</code></pre><p>href="https://github.com/KIIIKIII"&gt;Github)</p>          </div><h3 id="题外话">题外话</h3><p>说到这次的题目是我们DSAA课程lab3的第二个问题，该课的任课老师也是我的班主任，所以我也是对这门课格外上心，老师也非常负责，除了布置作业之外也给我们布置了三次lab。每次lab只有三四道实验题目，虽然我们有专门的数据结构实验课，但是显然，那个实验课的实验题目要比这个理论课的lab难度要小的多(至少我这么认为)。我还有另一篇文章是写了数据结构实验课的一个题目内容，不过文章的重点显然不在Huffman编码算法上，详细的见<a href="https://herixth.top/2018/12/04/HuffmanFilestructure.html">Huffman编码压缩文件时的文件储存结构</a>。</p><p>而DSAA理论课的lab确实给我留下了一些比较深的印象，我也确实从里面学到了一些东西。比如lab2里的<a href="https://herixth.top/2018/11/20/DecisionTree.html">DecisionTree</a>(这是当时我的实验报告，主要就是看一下题目)，虽然这很难说是机器学习的入门，不过写过决策树之后直接给了我很大的信心去攻克了全连接神经网络的算法并在期末考试前完成了全连接神经网络手写体数字识别的项目(<a href="https://github.com/Herixth/Handwritten-digit-recognition-CPP">Handwritten-digit-recognition-CPP</a>)。还有就是这次的外部排序，虽然这可能并不是考试的重点，但他确实是让我学到了一些关于内存和主存缓冲区方面的内容，更重要的是锻炼了我程序设计和实现的能力。</p><p>每次的lab程序都需要在课堂上上台展示，这次的外部排序我也是代表小组去展示，但是演示程序的时候忽略了一点，导致测试N为1000规模的时候竟然跑了40多秒，现在的测试结果是3秒左右，而跟我们组竞争的小组他们的测试耗时也远小于40秒，这我也觉得很是尴尬，明明同样的算法思路居然效果差这么多。而到后来我才知道原因，因为我是用VS2017编译得到的可执行文件，在编译的时候一直用的<strong>Debug</strong>模式，这种条件下编译器不会对程序进行任何优化，而且会保存所有的调试信息以便进一步调试，而选择<strong>Release</strong>模式后编译，编译器会自动把程序优化，省去调试细节可以实现最好的效果。在<strong>Release</strong>下编译后程序不知道快了多少倍，这是展示几周之后同学告诉我的，也很遗憾当初没有用最好状态的程序进行演示。而更遗憾的是，当初展示的时候我几乎没有做多点测试，更没有做出图表这样可视化的变化趋势，所以连性能的分析也没有，明明我当时有时间去做但是就没想到。以后有这样的事情我就争取能做的更好吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本空间向量搜索引擎理论(译)</title>
    <link href="/article/7421/"/>
    <url>/article/7421/</url>
    
    <content type="html"><![CDATA[<h1 id="说明">说明</h1><ul><li>文本主要翻译<em>Vidiot</em>的<strong>&lt;&lt;Basic Vector SpaceSearch Engine Theory&gt;&gt;</strong><a href="https://ondoc.logand.com/d/2697/pdf">原文地址</a>，并且阐述理论的应用。</li><li>我尽可能还原原文并且减少翻译的生硬，但是由于翻译经验不足，如有些内容翻译不准确还请去阅读原文。</li></ul><span id="more"></span><h1 id="原文翻译">原文翻译</h1><h2 id="basic-vector-space-search-engine-theory"><strong>Basic VectorSpace Search Engine Theory</strong></h2><p><strong>LA 2600 — January 2, 2004 - presented by Vidiot</strong></p><h3 id="概述"><strong>概述</strong></h3><p>空间向量搜索引擎(<em>Vector Space Search Engine</em> ,简称<em>VSSE</em>)是一种使用非常简单的矩阵代数方法去比较文本词汇相似度的技术。</p><ul><li>对于<em>VSSE</em>，首先要明确的概念就是<strong>项空间</strong>(<em>termspace</em>)。简单来讲，定义在一份文档集合上的项空间就是所有文档中不相同单词的集合，(项空间的维数就是不同单词的种类数)<span class="math inline">\(_{译者注}\)</span>。</li><li>第二个需要知道的概念就是<strong>项计数</strong>(<em>termcounts</em>)。这也可以简单地定义成每一个项在某单个文档中出现的次数。这通常可以用表格来表示，之后会举一些例子。</li></ul><p>用项空间作为坐标空间，项计数作为每一项地值，则针对文档集合中的每一份文档都可以在这个坐标空间中生成一个向量。我们来看一个简单的例子，大家应该都非常熟悉笛卡尔坐标系(直角坐标系和斜坐标系的统称)<span class="math inline">\(_{译者注}\)</span>；在坐标系中用<span class="math inline">\(X\)</span>，<span class="math inline">\(Y\)</span>和<span class="math inline">\(Z\)</span>定义一个点。类似地，如果项空间只包含三个不同项的话，我们就可以用<span class="math inline">\(term1\)</span>，<span class="math inline">\(term2\)</span>和<span class="math inline">\(term3\)</span>作为轴来定义项空间中的点。(在空间向量搜索理论中相空间的<strong>轴</strong>(<em>axes</em>)通常表示<strong>维度</strong>(<em>dimensions</em>))。依靠对每项(通常是单词)在单个文档中的计数，并且在坐标空间各个项维度下确定尺度，我们就可以用一个坐标空间中的点来表示一份文档。同时，有了这个点我们也就可以确定一个由原点指向该点的向量。</p><p>一旦我们对一份文档计算出了它在项空间中的向量，我们也就可以计算出这个向量的模，可以把这个向量的模当作从项空间原点到文档表示的点的线段长度。有了向量的模，我们就可以通过计算不同向量间夹角的余弦来比较不同文档间的相似度。例如，单个文档关于自己向量的余弦是1，有相似内容的不同文档间具有正的向量余弦值，而没有任何内容相同的文档间向量的余弦值是0。</p><h3 id="示例"><strong>示例</strong></h3><p>在这里的示例里我们仅用3个维度去遍历搜索整个文档集合，因为这样的感受比较直观。</p><p>首先，假设我们有一个有3份文档的文档集合。每一份文档都包含有这3个词<em>cat</em>，<em>dog</em>和<em>mouse</em>。根据定义，这些词<em>cat</em>，<em>dog</em>和<em>mouse</em>就组成了项空间。因此我们就可以认为每一篇文章都在<em>cat</em>，<em>dog</em>和<em>mouse</em>这三个维度内有坐标。这些坐标是由每个项在不同文档中出现的次数决定的。例如，文档(1)如下，就有一个“cat-dog-mouse向量”为<span class="math inline">\((3, 1, 4)\)</span>。</p><p><span class="math display">\[\begin{array}{c|ccc}\text{项空间} &amp; \text{项计数} \\&amp; \text{文档(1)} &amp; 文档(2) &amp; 文档(3)\\\hlinecat &amp; 3 &amp; 1 &amp; 2\\dog &amp; 1 &amp; 2 &amp; 3\\mouse &amp; 4 &amp; 5 &amp; 0\end{array}\]</span></p><p>在维度为2的条件下我们可以用毕达哥拉斯定理(即勾股定理)<span class="math inline">\(_{译者注}\)</span>求出向量的模，但在此条件下我们有新的公式：<span class="math display">\[a^2+b^2+c^2=d^2\]</span></p><ul><li>$ V_1= = = 5.09901$</li><li>$V_2= = = 5.47722 $</li><li>$ V_3===3.87298$</li></ul><blockquote><p>注意：这里$ V<span class="math inline">\(表示向量\)</span>V$的模</p></blockquote><p>值得注意的是不论我们在研究多大维度的向量，毕达哥拉斯公式的项数也可以不断增加。</p><p>此外，细心的读者也许注意到了不同的文档可能具有相同的空间向量模。例如，两份不同的文档分别具有空间向量(1,2, 3)和(3, 2,1)，那么这两个向量的模都是3.74165。这其实并不矛盾，正如我们所见，文档间的相关性是基于查找的项的维度的，即具有相同空间向量模大小的多份文档可能会得到非常不同的查询结果。也就是说，仅仅因为两条线段有同样的长度，并不能说明它们在项空间中指向同一个角度。</p><h3 id="查询"><strong>查询</strong></h3><p>为了查询文档集合中的元素，我们把查询向量(queryvector)在文档集合的项空间中建模，之后计算查询向量与文档集合中所有文档对应向量的夹角余弦值。也就是说，把查询向量放到项空间里，然后看看哪些文档对应的向量在该查询向量附近。</p><p>例如，如果查询项为“mouse”，那么“cat-dog-mouse向量”就是<span class="math inline">\((0, 0,1)\)</span>。那么我们的查询向量的模就是：</p><p><span class="math display">\[\mid \mid  Q \mid \mid = \sqrt{(0^2) + (0^2) + (1^2)} = \sqrt{0+0+1} =\sqrt{1}= 1\]</span> &gt;注意：该计算过程在写程序的时候可以进行简单的简化，即检查该查询项是否在项空间中，如果在则<span class="math inline">\(\mid \mid Q \mid \mid\)</span>总为1，但这仅仅适用于单个查询项的情况。针对多个查询项的时候，只需统计有多少项是属于项空间的，并对计数取平方根即可。因为查询项的表示不会小于1，<span class="math inline">\(\mid \midQ\mid\mid\)</span>的值总是某个整数的平方根。但是这些都是基于每组查询中的查询元素仅出现一次的假设，这并不是一个有力的假设，因为这涉及到<strong>词干提取</strong>(<em>wordstemming</em>)的问题，我会在后面讨论。</p><p>为了计算每个查询向量和文档所表示的向量间夹角的余弦值，我们要用查询项两和文档向量间的<strong>点积</strong>(<em>DotProduct</em>)除以查询向量的模与文档向量的模的乘积。</p><p><span class="math display">\[\frac{Q \ast V_1}{\mid \mid Q\mid \mid \times \mid \mid V_1\mid\mid}\]</span></p><p>点积就是每一个文档的所有项计数与查询向量中对应的项计数的乘积的和。例如，如果我们要查询的项是"mouse"，查询向量就是<span class="math inline">\((0,0,1)\)</span>，因为词"cat"和"dog"都没有出现，且"mouse"出现了一次，正好对应了项空间的第三个维度。在我们的示例中，文档1基于上面表格对应的项计数得到的向量为<span class="math inline">\((3,1,4)\)</span>。如果我们要计算查询向量与文档1向量的点积，我们要做一下计算：</p><p><span class="math display">\[\left.\begin{array}{l}\mathrm{Query\ vector:\quad \quad \quad } (0, \quad  \quad 0,\quad\quad  1) \\[2ex]\mathrm{Document\ 1\ vector:\ } (3,\quad\quad 1,\quad \quad 4) \\[2ex]\mathrm{Dot\ Product:\quad \quad \ \ \ \ } (0\times 3)+(0 \times 1) + (1\times 4) = 4\end{array}\right.\]</span></p><p>现在我们用点积<span class="math inline">\(4\)</span>除以查询向量和文档向量模的乘积，用以得到余弦值。我们之前计算过文档1的向量模是<span class="math inline">\(5.09901\)</span>，查询向量的模为<span class="math inline">\(1\)</span>，因此余弦值为<span class="math inline">\(4\)</span>除以<span class="math inline">\(5.09901\)</span>。</p><p>让我们来尝试一下，查询向量"mouse"和文档1向量之间的夹角的余弦值可以被这样计算：</p><p><span class="math display">\[\frac{Q \ast V_1}{\mid \mid Q \mid\mid \times \mid\mid V_1 \mid\mid}= \frac{(0 \times 3) + (0 \times 1) + (1 \times 4)}{1 \times 5.09901} =\frac{4}{5.09901} = 0.78446\]</span></p><blockquote><p>注意：如果一个文档中不包含任何与搜索项相关的项，则点积为0。由于0除以任何数都为0，因此余弦值也为0。特判这种情况将使写出的代码更高效。</p></blockquote><p>如果我们对其他两份文档进行同样的计算，我们就会得到以下余弦值：</p><p><span class="math display">\[\mathrm{Doc\ 1} = 0.78446 \\[1ex]\mathrm{Doc \ 2} = 0.91287 \\[1ex]\mathrm{Doc\ 3} = 0.00000\]</span></p><p>再将这些余弦值按降序排序后，得到：</p><p><span class="math display">\[\mathrm{Doc \ 2} = 0.91287 \\[1ex]\mathrm{Doc\ 1} = 0.78446 \\[1ex]\mathrm{Doc\ 3} = 0.00000\]</span></p><p><strong>未完待续</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>论文翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Huffman编码压缩文件时的文件储存结构</title>
    <link href="/article/c83f/"/>
    <url>/article/c83f/</url>
    
    <content type="html"><![CDATA[<h1 id="文件结构">文件结构</h1><h3 id="说明">说明</h3><ul><li>该文件结构针对ASCII码设计，字符的种类数设为<span class="math inline">\(N\)</span>，由于ASCII码中可显示字符十进制编码范围是<span class="math inline">\([32,126]\)</span> , 共<span class="math inline">\(95\)</span>种，考虑进少量不可见字符则<span class="math inline">\(N_{max}=127\)</span>，又因为对于Huffman编码，如果<span class="math inline">\(N\leq2\)</span>则编码没有任何效果，所以可设置范围<span class="math inline">\(N \in [3,127]\)</span>。</li><li>设源文件大小不超过4GB(<span class="math inline">\(2^{32}\text{bytes}\)</span>)，又因为<span class="math inline">\(N&gt;2\)</span>，所以在平均情况下所有文本中的字符的频数都可以用32位整数表示为<span class="math inline">\(M_i\)</span>。</li><li>由于Huffman编码方式确定，源文件文本对应的Huffman编码不可变，则设Huffman编码的长度为<span class="math inline">\(HLen\)</span>。</li><li>用存储所有字符-频数键值对的方式间接表示原Huffman树结构，解压时先根据键值对构建Huffman树再进行解压操作以得到原文件。</li><li>Huffman编码中最后一个字节设为<span class="math inline">\(HuffLast\)</span>，由于$HuffLast <span class="math inline">\(中存在编码余位不足8而补位的情况，故设\)</span>HuffLast[7:loc]<span class="math inline">\(为编码，而\)</span>HuffLast[loc-1,0]<span class="math inline">\(为补位，其中\)</span>loc<span class="math inline">\(，特别地，当\)</span>loc=0<span class="math inline">\(时表示\)</span>HuffLast$中没有补位。</li><li>设每一个字符-频数对为<span class="math inline">\((K_i,M_i)\)</span>，其中<span class="math inline">\(M_i\)</span>经过计算后可得到等价的<span class="math inline">\(V_i\)</span>，所以字符-频数对<span class="math inline">\((K_i,M_i)\)</span>可转换成键值对<span class="math inline">\((K_i,V_i)\)</span>，则<span class="math inline">\(Pair=\{(K_1,V_1),(K_2,V_2),\dots,(K_N,V_N)\}\)</span>。</li><li>在该文件结构下，文件大小为<span class="math inline">\((2\cdot N +HLen / 8 - 1)\)</span> bytes.</li></ul><span id="more"></span><h3 id="整体结构">整体结构</h3><table><thead><tr><th>名称(简称)</th><th>占用空间</th></tr></thead><tbody><tr><td>所有键值对集合(<span class="math inline">\(Pair\)</span>)</td><td><span class="math inline">\((2 \cdot N - 1)\)</span> bytes</td></tr><tr><td>文本Huffman编码(<span class="math inline">\(Huff\)</span>)</td><td><span class="math inline">\((HLen/8)\)</span> bytes</td></tr></tbody></table><hr><h3 id="pair"><span class="math inline">\(Pair\)</span></h3><p><span class="math inline">\(Pair\)</span>为所有字符-频数变形后的键值对的集合。集合大小<span class="math inline">\(N &gt; 2\)</span>。</p><p>对于<span class="math inline">\(Pair\)</span>中的除<span class="math inline">\((K_1,V_1)\)</span>外每一个元素<span class="math inline">\(Pair[i]=(K_i,V_i)\)</span>，分配2个字节。</p><ul><li>第一个字节表示该字符即<span class="math inline">\(K_i\)</span>。</li><li>第二个字节表示该字符对应原文本中出现的频数<span class="math inline">\(M_i\)</span>的变形<span class="math inline">\(V_i\)</span>。</li></ul><blockquote><p><span class="math inline">\((K_1,V_1)\)</span>只分配一个字节存<span class="math inline">\(K_1\)</span>，不存<span class="math inline">\(V_1\)</span>。</p></blockquote><p>由于每个字符在原文本中出现的频数<span class="math inline">\(M_i\)</span>属于32位整数，占四个字节，但是结合Huffman树构建的原理可将频数压缩至只占一个字节的<span class="math inline">\(V_i\)</span>。</p><h5 id="pair的计算与存储"><span class="math inline">\(Pair\)</span>的计算与存储</h5><ol type="1"><li><p>定义<span class="math inline">\((K_i,M_i)&lt;(K_j,M_j) \text{ : }M_i &lt;M_j \text{ or } (M_i=M_j \text{ and }K_i&lt;K_j)\)</span>。将字符-频数集合按升序排序后得到新的序列<span class="math inline">\(\{(K_1,M_1),(K_2,M_2),\dots,(K_N,M_N)\}\)</span>。</p></li><li><p>设函数<span class="math inline">\(f(M_i)\)</span>: <span class="math display">\[f(M_i) = \begin{cases}1 &amp;&amp; i = 1 \\[2ex]M_{i-1} / M_{i} &amp;&amp; i\in[2,N]\end{cases}\]</span> &gt; 当<span class="math inline">\(i=1\)</span>时，设<span class="math inline">\(V_i=C\cdot f(M_i)=C\text{ 其中C为常数}\)</span>。&gt; &gt; 当<span class="math inline">\(i&gt;1\)</span>时，<span class="math inline">\(0&lt;f(M_i) &lt; 1\)</span>，设<span class="math inline">\(V_i\)</span>表示<span class="math inline">\(f(M_i)\)</span>小数点后前8位小数，精度为<span class="math inline">\(1/2^8 = 0.0039\)</span>。</p><p>综上可得到有序序列<span class="math inline">\(V=\{i\in[1,N]\midV_i\}\)</span>。</p></li><li><p>由于<span class="math inline">\(K_i\)</span>表示字符种类，范围为ASCII码前127位，则<span class="math inline">\(Ki\)</span>最高位<span class="math inline">\(K_i[7]\)</span>不参与字符种类表示。由于键值对个数为<span class="math inline">\(N\)</span>，对<span class="math inline">\(K_i[7]\)</span>进行标记，使得以下关系成立： <span class="math display">\[((i &lt; N-1 \wedge \forall x\in[1,i])\to K_x[7]=0)\wedge K_{N-1}[7] = 1\]</span> 即对于前<span class="math inline">\(N-1\)</span>个键值对除了<span class="math inline">\(K_{N-1}[7]=1\)</span>，其余<span class="math inline">\(K\)</span>的最高为都为0。通过这种方法就可以判断出<span class="math inline">\(N\)</span>的大小。</p></li><li><p>对于<span class="math inline">\(K_N[7]\)</span>进行标记。</p><p><span class="math display">\[K_N[7]=\begin{cases}0 &amp; loc=0 \\[2ex]1 &amp; loc &gt; 0\end{cases}\]</span> 即可以来表示<span class="math inline">\(HuffLast\)</span>中是否有补位。</p></li><li><p>综上所述可以得到$Pair={i(K_i, V_i)} <span class="math inline">\(，在存储时由于\)</span>V_1=C<span class="math inline">\(，\)</span>C<span class="math inline">\(可以任取，故存储时略过\)</span> V_1$。可得到占用空间为<span class="math inline">\(2\cdot N-1\)</span>bytes。</p></li></ol><hr><h3 id="huff"><span class="math inline">\(Huff\)</span></h3><p>对于长度为<span class="math inline">\(HLen\)</span>的二进制编码，每8位为一个字节以unsignedchar类型储存进文件，对于最后不足8位的编码，长度满足 $ HLen 8 = (8 - loc)8 <span class="math inline">\(。由\)</span>K_N[7]<span class="math inline">\(可得\)</span>loc<span class="math inline">\(得两种状态，\)</span>loc=0<span class="math inline">\(时\)</span>HuffLast<span class="math inline">\(全是编码不用特殊处理；\)</span>loc=1<span class="math inline">\(时对补位\)</span>HuffLast[loc-1, 0]<span class="math inline">\(进行处理，使以下关系成立:\)</span>$ ((loc&gt;1x)HuffLast[x]=1) ((loc)HuffLast[loc-1]=0) $$</p><p>即</p><p><span class="math display">\[HuffLast[x]=\begin{cases} 1 &amp;&amp; loc &gt; 1 \text{ and }x\in[0,loc-2] \\[2ex] 0 &amp;&amp; loc \geq 1 \text{ and } x =loc-1\end{cases}\]</span></p><p>用这种方法可以仅用一个额外的bit(<span class="math inline">\(K_N[7]\)</span>)，配合补位的内容就可以把<span class="math inline">\(HuffLast\)</span>中补位的个数表示出来。</p><hr><h3 id="总结">总结</h3><p>用<span class="math inline">\(V_i\)</span>表示<span class="math inline">\(M_i\)</span>时由于二进制小数位数的限制会有精度的损失，故<span class="math inline">\(V_i\)</span>可能略小于$ M_{i-1}/M_{i} <span class="math inline">\(，而且\)</span>V_i<span class="math inline">\(的值仅和\)</span>M_{i-1}<span class="math inline">\(有关，而还原时是进行\)</span>M^{d}<em>i=M^{d}</em>{i-1}/V_i<span class="math inline">\(，会对通过\)</span> M^{d}_{i-1} <span class="math inline">\(对\)</span>V_i<span class="math inline">\(精度的误差进行累积，这两点共同导致还原出的\)</span>M^{d}_i <span class="math inline">\(略大于\)</span> M_i $。</p><p>但是由于Huffman编码过程并不需要准确的<span class="math inline">\(M_i\)</span>，仅仅需要保存$ { iM_i }$各有可能的不相交子集元素之和大小关系，故这种方式在大概率下不会导致所建Huffman树与原树不同，也就保证了解压后文本的正确性。</p><hr><h3 id="代码片段huff.h">代码片段(Huff.h)</h3><blockquote><p>2018-12-06更新: 感谢室友的测试，已经更改了一些bug -修复了各种状态转移间的信息未清空的问题。 -修复了二进制小数转化的部分的临界问题。 -修复了如果huffman编码部分没有补位，文件末尾仍有一个空字符的问题。 -通过测试采用<code>initC</code> = 2替换原来的4。</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHOW_DETAIL</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMPRESS   0x1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DECOMPRESS 0x2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXIT       0x3</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BITSIZE    0x8</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxN = <span class="hljs-number">1e4</span> + <span class="hljs-number">1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> initC = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> timestamp;<br><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title">dbToCh</span><span class="hljs-params">(<span class="hljs-type">double</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">chToDb</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)</span></span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">VarAndFrec</span> {<br>    <span class="hljs-type">char</span> var;<br>    <span class="hljs-type">int</span> frec;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> VarAndFrec &amp;obj) <span class="hljs-type">const</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;frec &lt; obj.frec;<br>    }<br>    <span class="hljs-built_in">VarAndFrec</span>(<span class="hljs-type">char</span> v = <span class="hljs-string">'\0'</span>, <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>) :<br>        <span class="hljs-built_in">var</span>(v), <span class="hljs-built_in">frec</span>(f) { }<br>    ~<span class="hljs-built_in">VarAndFrec</span>() { }<br>};<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> {<br>    <span class="hljs-type">int</span> frec;<br>    <span class="hljs-type">bool</span> isLeaf;<br>    <span class="hljs-type">char</span> var;<br>    Node *left;<br>    Node *right;<br><br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> frec = <span class="hljs-number">0</span>, <span class="hljs-type">char</span> var = <span class="hljs-string">'\0'</span>) :<br>        <span class="hljs-built_in">frec</span>(frec), <span class="hljs-built_in">var</span>(var), <span class="hljs-built_in">isLeaf</span>(<span class="hljs-literal">true</span>), <span class="hljs-built_in">left</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">NULL</span>) { }<br>    ~<span class="hljs-built_in">Node</span>() { }<br>};<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffMan</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">HuffMan</span>() {<br>        root = <span class="hljs-keyword">new</span> Node;<br>    }<br>    ~<span class="hljs-built_in">HuffMan</span>() { <span class="hljs-built_in">removeAll</span>(root); }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Operate</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    Node *root;<br>    std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; varToFrec;<br>    std::map&lt;<span class="hljs-type">char</span>, std::string&gt; codeList;<br>    std::ifstream input;<br>    std::ofstream output;<br>    std::string texts;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeAll</span><span class="hljs-params">(Node *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">coding</span><span class="hljs-params">(Node *, std::string)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">getFilestream</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-type">bool</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">compress</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decompress</span><span class="hljs-params">()</span></span>;<br>};<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffMan::removeAll</span><span class="hljs-params">(Node *root)</span> </span>{<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-built_in">removeAll</span>(root-&gt;left);<br>    <span class="hljs-built_in">removeAll</span>(root-&gt;right);<br><br>    <span class="hljs-keyword">delete</span> root;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffMan::coding</span><span class="hljs-params">(Node *root, std::string code)</span> </span>{<br>    <span class="hljs-keyword">if</span> (root-&gt;isLeaf) {<br>        codeList[root-&gt;var] = code;<br>        <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-built_in">coding</span>(root-&gt;left, code + <span class="hljs-string">"0"</span>);<br>    <span class="hljs-built_in">coding</span>(root-&gt;right, code + <span class="hljs-string">"1"</span>);<br>}<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HuffMan::getFilestream</span><span class="hljs-params">()</span> </span>{<br>    std::string getin = <span class="hljs-string">""</span>, getout = <span class="hljs-string">""</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input source file name(size less than 4GB)\n&gt;&gt; "</span>);<br>    <span class="hljs-built_in">getline</span>(std::cin, getin);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input code file name\n&gt;&gt; "</span>);<br>    <span class="hljs-built_in">getline</span>(std::cin, getout);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br><br>    input.<span class="hljs-built_in">open</span>(getin.<span class="hljs-built_in">c_str</span>(), std::ios::in | std::ios::binary);<br>    output.<span class="hljs-built_in">open</span>(getout.<span class="hljs-built_in">c_str</span>(), std::ios::out | std::ios::binary);<br><br>    <span class="hljs-keyword">return</span> input.<span class="hljs-built_in">good</span>();<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffMan::buildTree</span><span class="hljs-params">(<span class="hljs-type">bool</span> sign = <span class="hljs-literal">true</span>)</span> </span>{<br>    <span class="hljs-comment">// read text</span><br>    <span class="hljs-keyword">if</span> (sign) {<br>        <span class="hljs-type">char</span> alpha = <span class="hljs-string">'\0'</span>;<br>        varToFrec.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">while</span> (input.<span class="hljs-built_in">get</span>(alpha)) {<br>            texts += alpha;<br>            varToFrec.<span class="hljs-built_in">find</span>(alpha) != varToFrec.<span class="hljs-built_in">end</span>() ?<br>                varToFrec[alpha] ++ : varToFrec[alpha] = <span class="hljs-number">1</span>;<br>        }<br>        <span class="hljs-keyword">if</span> (varToFrec.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">3</span>) {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"File no need to be compressed!\n"</span>);<br>            <span class="hljs-keyword">return</span>;<br>        }<br>    }<br>    <span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHOW_DETAIL</span><br>    std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;::iterator mpiter = varToFrec.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"char     frec\n"</span>);<br>    <span class="hljs-keyword">for</span> (; mpiter != varToFrec.<span class="hljs-built_in">end</span>(); mpiter++) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %c        %d\n"</span>, mpiter-&gt;first, mpiter-&gt;second);<br>    }<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// SHOWDETAIL</span></span><br><br>    <span class="hljs-comment">// build queue</span><br>    <span class="hljs-built_in">removeAll</span>(root);<br>    root = <span class="hljs-keyword">new</span> Node;<br>    std::map&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, Node *&gt; priQ;<br>    <span class="hljs-comment">// init</span><br>    std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;::iterator iter = varToFrec.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">for</span> (; iter != varToFrec.<span class="hljs-built_in">end</span>(); iter++) {<br>        priQ[std::<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(iter-&gt;second, timestamp++)] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(iter-&gt;second, iter-&gt;first);<br>    }<br>    <span class="hljs-keyword">while</span> (priQ.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) {<br>        Node *fir = priQ.<span class="hljs-built_in">begin</span>()-&gt;second; priQ.<span class="hljs-built_in">erase</span>(priQ.<span class="hljs-built_in">begin</span>());<br>        Node *sec = priQ.<span class="hljs-built_in">begin</span>()-&gt;second; priQ.<span class="hljs-built_in">erase</span>(priQ.<span class="hljs-built_in">begin</span>());<br><br>        Node *inter = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Node</span>(fir-&gt;frec + sec-&gt;frec);<br>        inter-&gt;isLeaf = <span class="hljs-literal">false</span>;<br>        inter-&gt;left = fir-&gt;frec &lt; sec-&gt;frec ? fir : sec;<br>        inter-&gt;right = fir-&gt;frec &lt; sec-&gt;frec ? sec : fir;<br><br>        priQ[std::<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(inter-&gt;frec, timestamp++)] = inter;<br>    }<br><br>    root = priQ.<span class="hljs-built_in">begin</span>()-&gt;second; priQ.<span class="hljs-built_in">clear</span>();<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffMan::compress</span><span class="hljs-params">()</span> </span>{<br>    codeList.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">coding</span>(root, <span class="hljs-string">""</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHOW_DETAIL</span><br>    std::map&lt;<span class="hljs-type">char</span>, std::string&gt;::iterator iter = codeList.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">for</span> (; iter != codeList.<span class="hljs-built_in">end</span>(); iter++) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %c     %s\n"</span>, iter-&gt;first, iter-&gt;second.<span class="hljs-built_in">c_str</span>());<br>    }<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// SHOW_DETAIL</span></span><br><br>    std::string LastCode = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">for</span> (std::string::iterator iter = texts.<span class="hljs-built_in">begin</span>(); iter != texts.<span class="hljs-built_in">end</span>(); iter++) {<br>        LastCode += codeList[*iter];<br>    }<br><br>    <span class="hljs-type">int</span> recLen = LastCode.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-comment">/************ Pair ****************/</span><br>    <span class="hljs-type">int</span> PairNum = varToFrec.<span class="hljs-built_in">size</span>();<br>    VarAndFrec FTV[maxN];<br>    std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;::iterator iterC = varToFrec.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> inc = <span class="hljs-number">0</span>; iterC != varToFrec.<span class="hljs-built_in">end</span>(); iterC++, inc++) {<br>        FTV[inc] = <span class="hljs-built_in">VarAndFrec</span>(iterC-&gt;first, iterC-&gt;second);<br>    }<br>    std::<span class="hljs-built_in">sort</span>(FTV, FTV + PairNum);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>; idx &lt; PairNum; idx++) {<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> K_i = FTV[idx].var, V_i = <span class="hljs-string">'\0'</span>;<br>        <span class="hljs-keyword">if</span> (idx == PairNum - <span class="hljs-number">1</span>) {<br>            K_i |= (recLen % BITSIZE != <span class="hljs-number">0</span>) &lt;&lt; (BITSIZE - <span class="hljs-number">1</span>);<br>        }<br>        <span class="hljs-keyword">else</span> {<br>            K_i |= (idx == PairNum - <span class="hljs-number">2</span>) ? <span class="hljs-number">0x80</span> : <span class="hljs-number">0x00</span>;<br>        }<br><br>        output &lt;&lt; K_i;<br>        <span class="hljs-keyword">if</span> (idx) {<br>            V_i = <span class="hljs-built_in">dbToCh</span>(<span class="hljs-number">1.0</span> * FTV[idx - <span class="hljs-number">1</span>].frec / FTV[idx].frec);<br>            output &lt;&lt; V_i;<br>        }<br>    }<br>    <span class="hljs-comment">/************ Pair ****************/</span><br><br>    <span class="hljs-type">int</span> len = recLen / BITSIZE;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> inc = <span class="hljs-number">0</span>; inc &lt; len; inc++) {<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Tm = <span class="hljs-string">'\0'</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> snc = <span class="hljs-number">0</span>; snc &lt; BITSIZE; snc++) {<br>            Tm |= (<span class="hljs-built_in">int</span>(*(LastCode.<span class="hljs-built_in">begin</span>() + inc * BITSIZE + snc) - <span class="hljs-string">'0'</span>) &lt;&lt; snc);<br>        }<br>        output &lt;&lt; Tm; <br>    }<br><br>    <span class="hljs-type">int</span> Modlen = LastCode.<span class="hljs-built_in">length</span>() % BITSIZE;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Ch = <span class="hljs-string">'\0'</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> inc = <span class="hljs-number">0</span>; inc &lt; BITSIZE; inc++) {<br>        <span class="hljs-keyword">if</span> (inc &lt; Modlen)<br>            Ch |= (<span class="hljs-built_in">int</span>(*(LastCode.<span class="hljs-built_in">begin</span>() + len * BITSIZE + inc) - <span class="hljs-string">'0'</span>) &lt;&lt; inc);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inc &gt; Modlen)<br>            Ch |= (<span class="hljs-number">0x1</span> &lt;&lt; inc);<br>    }<br><br>    <span class="hljs-keyword">if</span> (Modlen)<br>        output &lt;&lt; Ch;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Compress succeed!\n"</span>);<br><br>    input.<span class="hljs-built_in">close</span>();<br>    output.<span class="hljs-built_in">close</span>();<br>}<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffMan::decompress</span><span class="hljs-params">()</span> </span>{<br>    std::string line;<br>    std::string text;<br>    <span class="hljs-type">bool</span> needEnter = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(input, line)) {<br>        <span class="hljs-keyword">if</span> (needEnter) line = <span class="hljs-string">"\n"</span> + line;<br>        text += line;<br>        needEnter = <span class="hljs-literal">true</span>;<br>    }<br><br>    <span class="hljs-type">int</span> KVpairNum = <span class="hljs-number">0</span>, loc = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> nextStop = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Read Pair</span><br>    varToFrec.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span> (std::string::iterator iter = text.<span class="hljs-built_in">begin</span>(); iter != text.<span class="hljs-built_in">end</span>(); iter++) {<br>        <span class="hljs-keyword">if</span> (iter != text.<span class="hljs-built_in">begin</span>()) {<br>            varToFrec[(*iter) &amp; <span class="hljs-number">0x7F</span>] = std::<span class="hljs-built_in">floor</span>(varToFrec[(*(iter - <span class="hljs-number">1</span> - (varToFrec.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">2</span>))) &amp; <span class="hljs-number">0x7F</span>] / <span class="hljs-built_in">chToDb</span>(*(iter + <span class="hljs-number">1</span>)));<br>            <span class="hljs-keyword">if</span> (nextStop) {<br>                loc = ((*iter) &gt;&gt; (BITSIZE - <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">0x01</span>;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                nextStop = ((*iter) &gt;&gt; (BITSIZE - <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">0x01</span>;<br>            }<br>            iter++;<br>        }<br>        <span class="hljs-keyword">else</span> {<br>            nextStop = ((*iter) &gt;&gt; (BITSIZE - <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">0x01</span>;<br>            varToFrec[(*iter) &amp; <span class="hljs-number">0x7F</span>] = initC;<br>        }<br>    }<br>    <span class="hljs-built_in">buildTree</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> HFLast = *text.<span class="hljs-built_in">rbegin</span>();<br>    <span class="hljs-keyword">if</span> (loc) {<br>        loc = BITSIZE;<br>        <span class="hljs-keyword">while</span> (HFLast &amp; (<span class="hljs-number">1</span> &lt;&lt; (--loc)));<br>    }<br>    <span class="hljs-keyword">else</span> {<br>        loc = BITSIZE;<br>    }<br><br>    <span class="hljs-type">int</span> PairSize = <span class="hljs-number">2</span> * varToFrec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// Read Huffman Code</span><br>    Node *curr = root;<br>    <span class="hljs-keyword">for</span> (std::string::iterator iter = text.<span class="hljs-built_in">begin</span>() + PairSize; iter != text.<span class="hljs-built_in">end</span>(); iter++) {<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Tm = *iter;<br>        <span class="hljs-type">int</span> Range = (iter + <span class="hljs-number">1</span> == text.<span class="hljs-built_in">end</span>() ? loc : BITSIZE);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> inc = <span class="hljs-number">0</span>; inc &lt; Range; inc++) {<br>            curr = ((Tm &gt;&gt; inc) &amp; <span class="hljs-number">0x1</span>) ? curr-&gt;right : curr-&gt;left;<br>            <span class="hljs-keyword">if</span> (curr-&gt;isLeaf) {<br>                output &lt;&lt; curr-&gt;var;<br>                curr = root;<br>            }<br>        }<br>    }<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Decompress succeed!\n"</span>);<br><br>    input.<span class="hljs-built_in">close</span>();<br>    output.<span class="hljs-built_in">close</span>();<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HuffMan::Operate</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span>  opeNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!quit) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-------------------\n"</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"1. Compress   \n"</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"2. Decompress \n"</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"3. Exit       \n"</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"-------------------\n"</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"&gt;&gt; "</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;opeNum);<br>        <span class="hljs-built_in">getchar</span>();<br><br>        <span class="hljs-keyword">if</span> (opeNum == COMPRESS) {<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">getFilestream</span>()) {<br>                <span class="hljs-built_in">buildTree</span>();<br>                <span class="hljs-built_in">compress</span>();<br>            }<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opeNum == DECOMPRESS) {<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">getFilestream</span>()) {<br>                <span class="hljs-built_in">decompress</span>();<br>            }<br>        }<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opeNum == EXIT) {<br>            quit = <span class="hljs-literal">true</span>;<br>        }<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title">dbToCh</span><span class="hljs-params">(<span class="hljs-type">double</span> db)</span> </span>{<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Ch = <span class="hljs-string">'\0'</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> mv = <span class="hljs-number">0</span>; mv &lt; <span class="hljs-number">8</span>; mv++) {<br>        Ch |= (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)((db * <span class="hljs-number">2</span> &gt;= <span class="hljs-number">1</span>) &lt;&lt; (<span class="hljs-number">7</span> - mv));<br>        db = <span class="hljs-number">2</span> * db &gt;= <span class="hljs-number">1</span> ? <span class="hljs-number">2</span> * db - <span class="hljs-number">1</span> : <span class="hljs-number">2</span> * db;<br>    }<br>    <span class="hljs-keyword">return</span> Ch;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">double</span> <span class="hljs-title">chToDb</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Ch)</span> </span>{<br>    <span class="hljs-type">double</span> db = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> mv = <span class="hljs-number">0</span>; mv &lt; <span class="hljs-number">8</span>; mv++) {<br>        db += <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, mv - <span class="hljs-number">8</span>) * ((Ch &gt;&gt; mv) &amp; <span class="hljs-number">0x01</span>);<br>    }<br>    <span class="hljs-keyword">return</span> db;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于ID3算法的决策树实现</title>
    <link href="/article/36aa/"/>
    <url>/article/36aa/</url>
    
    <content type="html"><![CDATA[<h1 id="decision-tree">Decision Tree</h1><ul><li><p>name: He Xiang (贺翔)</p></li><li><p>date: 2018-11-10</p></li><li><p>Experimental enviroment</p><blockquote><p>OS: Windows 10</p><p>IDE: Visual Studio 2017 &amp; vim 8.1</p></blockquote></li></ul><hr><span id="more"></span><h3 id="requirement">Requirement</h3><p>​ A decision tree is a flowchart-like structure in which each internalnode represents a "test" on an attribute (e.g whether a coin flip comesup heads or tails), each branch represents the outcome of the test, andeach leaf node represents a class label (decision taken after computingall attributes). The paths from root to leaf represent classificationrules.</p><p>​ In Decision Tree the major challenge is the identification of theattribute for the root node in each level. This processis known asattribute selection. We have a popular attribute selection measure,Information Gain, which is defined based on entropy. Entropy is themeasure of uncertainty of a random variable; it characterizes theimpurity of an arbitrary collection of examples. As we use a node indecision tree to partition the training instances into smaller subsets,the entropy changes. Information gain is a measure of this change inentropy. The best attribute should maximize the information gain given aset of training instances.</p><p>​ The table below specifies the conditions for whether to playbadmintion or not. You are required to construct a decision tree basedon the information in the table.</p><table><thead><tr><th>No.</th><th>Outlook</th><th>Temperature</th><th>Humidity</th><th>Windy</th><th>Play?</th></tr></thead><tbody><tr><td>1</td><td>Sunny</td><td>Hot</td><td>High</td><td>False</td><td>No</td></tr><tr><td>2</td><td>Sunny</td><td>Hot</td><td>High</td><td>True</td><td>No</td></tr><tr><td>3</td><td>Overcast</td><td>Hot</td><td>High</td><td>False</td><td>Yes</td></tr><tr><td>4</td><td>Rain</td><td>Mild</td><td>High</td><td>False</td><td>Yes</td></tr><tr><td>5</td><td>Rain</td><td>Cool</td><td>Normal</td><td>False</td><td>Yes</td></tr><tr><td>6</td><td>Rain</td><td>Cool</td><td>Normal</td><td>True</td><td>No</td></tr><tr><td>7</td><td>Overcast</td><td>Cool</td><td>Normal</td><td>True</td><td>Yes</td></tr><tr><td>8</td><td>Sunny</td><td>Mild</td><td>High</td><td>False</td><td>No</td></tr><tr><td>9</td><td>Sunny</td><td>Cool</td><td>Normal</td><td>False</td><td>Yes</td></tr><tr><td>10</td><td>Rain</td><td>Mild</td><td>Normal</td><td>False</td><td>Yes</td></tr><tr><td>11</td><td>Sunny</td><td>Mild</td><td>Normal</td><td>True</td><td>Yes</td></tr><tr><td>12</td><td>Overcast</td><td>Mild</td><td>High</td><td>True</td><td>Yes</td></tr><tr><td>13</td><td>Overcast</td><td>Hot</td><td>Normal</td><td>False</td><td>Yes</td></tr><tr><td>14</td><td>Rain</td><td>Mild</td><td>High</td><td>True</td><td>No</td></tr></tbody></table><h3 id="algorithm">Algorithm</h3><p>The decision tree build is ruled by the ID3 algorithm(IterativeDichotomiser 3). And its main theory is Information theory.</p><h4 id="description">description</h4><p>If <span class="math inline">\(X\)</span> is a discrete randomvariable and its probability distribution is <span class="math inline">\(p(x)=P(X=x), x\in X\)</span>, then the informationentropy of <span class="math inline">\(X\)</span> is <span class="math inline">\(H(X)\)</span> <span class="math display">\[  H(X) = -\sum_{i}^{}{p(x_i)\log_2p(x_i)}\]</span> ​ <span class="math inline">\(H(X)\)</span> is also calledPrior Entropy of X.</p><p>​ Support that condition that an event <span class="math inline">\(y_j\)</span> happens, the conditional probabilityof the random event <span class="math inline">\(x_i\)</span> occurringis <span class="math inline">\(p(x_i\mid y_j)\)</span>. Under thecondition of <span class="math inline">\(y_j\)</span>, the uncertaintyabout <span class="math inline">\(X\)</span> is defined as the posteriorentropy <span class="math inline">\(H(X\mid y_j)\)</span>. <span class="math display">\[  H(X|y_j)=-\sum_{i}^{}p(x_i|y_j)\log_2(p(x_i|y_j))\]</span> ​ For attribute <span class="math inline">\(Y\)</span> (the setof each <span class="math inline">\(y_j\)</span>), the conditionalentropy of set <span class="math inline">\(X\)</span> is <span class="math inline">\(H(X\mid Y)\)</span> <span class="math display">\[  H(X|Y)=\sum_{j}{p(y_j)H(X|y_j)}=-\sum_{j}{p(y_j)\sum_{i}{p(x_i|y_j)\log_2p(x_i|y_j)}}\]</span> ​ With prior entropy <span class="math inline">\(H(X)\)</span>and conditional entropy <span class="math inline">\(H(X \midY)\)</span>, We can define the information gain <span class="math inline">\(IG(X,Y)\)</span>, means that how much informationgain can variable <span class="math inline">\(X\)</span> get fromattribute <span class="math inline">\(Y\)</span> <span class="math display">\[IG(X,Y)=H(X)-H(X|Y)\]</span></p><h4 id="example">example</h4><p>For the training table. Consider attribute <span class="math inline">\(Outlook=\{Sunny, Overcast,Rainy\}\)</span>.</p><ul><li><span class="math inline">\(H(Play\midSunny)=-\frac{2}{5}\cdot\log_2\frac{2}{5}-\frac{3}{5}\cdot\log_2\frac{3}{5}=0.970951\)</span></li><li><span class="math inline">\(H(Play \midOvercast)=-\frac{4}{4}\cdot\log_2\frac{4}{4}-0\cdot\log_20=0\)</span></li><li><span class="math inline">\(H(Play\midRainy)=-\frac{3}{5}\cdot\log_2\frac{3}{5}-\frac{2}{3}\cdot\log_2\frac{2}{3}=0.970951\)</span></li></ul><p>So the conditional entropy of <span class="math inline">\(Outlook\)</span> is <span class="math inline">\(H(Play\midOutlook)=\frac{5}{14}\cdot0.970951+\frac{4}{14}\cdot0+\frac{5}{14}\cdot0.970951=0.693536\)</span>.and then the information gain from <span class="math inline">\(Outlook\)</span> to <span class="math inline">\(Play\)</span> is <span class="math inline">\(IG(Play,Outlook)=H(Play)-H(Play\midOutlook)=0.24675\)</span>.</p><p>​ For all attributes are the same:</p><ul><li><p><span class="math inline">\(IG(Play,Outlook)=0.24675\)</span></p></li><li><p><span class="math inline">\(IG(Play,Temperature)=0.0292226\)</span></p></li><li><p><span class="math inline">\(IG(Play,Humidity)=0.151836\)</span></p></li><li><p><span class="math inline">\(IG(Play, Windy)=0.048127\)</span></p><p>​ Alfter get all attributes' IG, then choose the maximum IG. Here is<span class="math inline">\(IG(Play, Outlook)\)</span>, For the decisiontree current node, make <span class="math inline">\(Outlook\)</span> asthe node's attribute and make all its value be the node's child nodes'index.</p><p>​ Divide the from when process the child node, and recursively buildthe tree.</p></li></ul><h6 id="class-definition">class definition</h6><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**   </span><br><span class="hljs-comment"> * @Brief store the attribute(col) in the sample  </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Attr</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// which col  </span><br>    <span class="hljs-type">int</span> colIndex;  <br>    <span class="hljs-comment">// how many types of the attr</span><br>    <span class="hljs-type">int</span> typeNum;  <br>    <span class="hljs-type">double</span> conEntroy, InforGain;<br>    std::string attribute; <br>    std::vector&lt;std::string&gt; attriValue;<br>    <span class="hljs-comment">// init 0.0</span><br>    std::map&lt;std::string, <span class="hljs-type">double</span>&gt; typeEntropy;<br>    <span class="hljs-comment">// start from 1</span><br>    std::map&lt;std::string, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; typeCnt;<br>    std::map&lt;std::string, std::map&lt;std::string, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; &gt; attriValue_to_result;<br><br>    <span class="hljs-built_in">Attr</span>(<span class="hljs-type">int</span> col = <span class="hljs-number">0</span>, std::string str = <span class="hljs-string">""</span>):<br>        <span class="hljs-built_in">colIndex</span>(col), <span class="hljs-built_in">typeNum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">conEntroy</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">InforGain</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">attribute</span>(str) { }<br>    ~<span class="hljs-built_in">Attr</span>() { }<br>};<br><br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * @Brief define the node infor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// current attribute Infor</span><br>    std::string attri; <br>    std::map&lt;std::string, TreeNode *&gt; attri_To_Children;<br>    std::vector&lt;Attr&gt; Table;<br>    <span class="hljs-type">int</span> rowNum, colNum;<br>    <span class="hljs-type">double</span> InforGain;<br>    <span class="hljs-type">int</span> biggestIGidx;<br>    <span class="hljs-type">bool</span> isLeaf;<br><br>    <span class="hljs-built_in">TreeNode</span>(): <span class="hljs-built_in">biggestIGidx</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">InforGain</span>(<span class="hljs-number">0.0</span>),<br>    <span class="hljs-built_in">isLeaf</span>(<span class="hljs-literal">true</span>), <span class="hljs-built_in">rowNum</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">colNum</span>(<span class="hljs-number">0</span>) { }<br>    ~<span class="hljs-built_in">TreeNode</span>() { }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">chooseIG</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clearCol</span><span class="hljs-params">()</span></span>;<br>};<br><br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * @Brief define the decision tree</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecisionTree</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">DecisionTree</span>() { root = <span class="hljs-keyword">new</span> TreeNode; }<br>    ~<span class="hljs-built_in">DecisionTree</span>() { <span class="hljs-built_in">removeAll</span>(root); }<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BuildTree</span><span class="hljs-params">()</span> </span>{ <span class="hljs-built_in">builder</span>(root); }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ReadTable</span><span class="hljs-params">(std::ifstream &amp;)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testTree</span><span class="hljs-params">()</span> </span>{ <span class="hljs-built_in">testTreeHelp</span>(root); }<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printTree</span><span class="hljs-params">()</span> </span>{ <span class="hljs-built_in">printTreeHelp</span>(root, <span class="hljs-string">"NULL"</span>); }; <br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeAll</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printSample</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">computeEntropyFir</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">computeEntropySec</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">builder</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">processSample</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divideChild</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testTreeHelp</span><span class="hljs-params">(TreeNode *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printTreeHelp</span><span class="hljs-params">(TreeNode *, std::string)</span></span>;<br><br>    TreeNode *root;<br>};<br></code></pre></td></tr></tbody></table></figure><h3 id="analysis-and-discussion">Analysis and discussion</h3><p>​ ID3 algorithm is a kind of greedy algorithm, when set a node'sattribute, alway choose the IG max one.</p><p>​ this algorithm is easy to train data, but there are also samedisadvantages. First, it only can process descrete data, if data iscontinuous, it does not work. Second, this algorithm is very reply onthe training data, so it is easy to build a insufficient decision tree.And at most time, there may be some attribute won't support anyeffective information, in this condition, the tree be built may be a bitunsuitable.</p><p>For me to implement this algorithm, I use a lot of <span class="math inline">\(STL\)</span> like <span class="math inline">\(string\)</span>, <span class="math inline">\(map\)</span> and <span class="math inline">\(vector\)</span>, may waste a lot of space and makethe time efficiency lower.</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
